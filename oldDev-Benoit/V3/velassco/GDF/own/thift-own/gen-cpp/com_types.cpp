/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "com_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




message::~message() throw() {
}


void message::__set_message1(const std::string& val) {
  this->message1 = val;
}

void message::__set_message2(const std::string& val) {
  this->message2 = val;
__isset.message2 = true;
}

void message::__set_message3(const std::string& val) {
  this->message3 = val;
__isset.message3 = true;
}

void message::__set_message4(const std::string& val) {
  this->message4 = val;
__isset.message4 = true;
}

void message::__set_message5(const std::string& val) {
  this->message5 = val;
__isset.message5 = true;
}

void message::__set_message6(const std::string& val) {
  this->message6 = val;
__isset.message6 = true;
}

const char* message::ascii_fingerprint = "319220C08A0EB9FCE7E7E52BE3BFA706";
const uint8_t message::binary_fingerprint[16] = {0x31,0x92,0x20,0xC0,0x8A,0x0E,0xB9,0xFC,0xE7,0xE7,0xE5,0x2B,0xE3,0xBF,0xA7,0x06};

uint32_t message::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message1);
          this->__isset.message1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message2);
          this->__isset.message2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message3);
          this->__isset.message3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message4);
          this->__isset.message4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message5);
          this->__isset.message5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message6);
          this->__isset.message6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("message");

  xfer += oprot->writeFieldBegin("message1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message1);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message2) {
    xfer += oprot->writeFieldBegin("message2", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message3) {
    xfer += oprot->writeFieldBegin("message3", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->message3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message4) {
    xfer += oprot->writeFieldBegin("message4", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->message4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message5) {
    xfer += oprot->writeFieldBegin("message5", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->message5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message6) {
    xfer += oprot->writeFieldBegin("message6", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->message6);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(message &a, message &b) {
  using ::std::swap;
  swap(a.message1, b.message1);
  swap(a.message2, b.message2);
  swap(a.message3, b.message3);
  swap(a.message4, b.message4);
  swap(a.message5, b.message5);
  swap(a.message6, b.message6);
  swap(a.__isset, b.__isset);
}

message::message(const message& other0) {
  message1 = other0.message1;
  message2 = other0.message2;
  message3 = other0.message3;
  message4 = other0.message4;
  message5 = other0.message5;
  message6 = other0.message6;
  __isset = other0.__isset;
}
message& message::operator=(const message& other1) {
  message1 = other1.message1;
  message2 = other1.message2;
  message3 = other1.message3;
  message4 = other1.message4;
  message5 = other1.message5;
  message6 = other1.message6;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const message& obj) {
  using apache::thrift::to_string;
  out << "message(";
  out << "message1=" << to_string(obj.message1);
  out << ", " << "message2="; (obj.__isset.message2 ? (out << to_string(obj.message2)) : (out << "<null>"));
  out << ", " << "message3="; (obj.__isset.message3 ? (out << to_string(obj.message3)) : (out << "<null>"));
  out << ", " << "message4="; (obj.__isset.message4 ? (out << to_string(obj.message4)) : (out << "<null>"));
  out << ", " << "message5="; (obj.__isset.message5 ? (out << to_string(obj.message5)) : (out << "<null>"));
  out << ", " << "message6="; (obj.__isset.message6 ? (out << to_string(obj.message6)) : (out << "<null>"));
  out << ")";
  return out;
}


InvalidOperation::~InvalidOperation() throw() {
}


void InvalidOperation::__set_what(const int32_t val) {
  this->what = val;
}

void InvalidOperation::__set_why(const std::string& val) {
  this->why = val;
}

const char* InvalidOperation::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t InvalidOperation::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t InvalidOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidOperation");

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidOperation &a, InvalidOperation &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

InvalidOperation::InvalidOperation(const InvalidOperation& other2) : TException() {
  what = other2.what;
  why = other2.why;
  __isset = other2.__isset;
}
InvalidOperation& InvalidOperation::operator=(const InvalidOperation& other3) {
  what = other3.what;
  why = other3.why;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidOperation(";
  out << "what=" << to_string(obj.what);
  out << ", " << "why=" << to_string(obj.why);
  out << ")";
  return out;
}


