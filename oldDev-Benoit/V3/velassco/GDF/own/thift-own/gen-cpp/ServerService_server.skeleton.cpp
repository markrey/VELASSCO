// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ServerService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ServerServiceHandler : virtual public ServerServiceIf {
 public:
  ServerServiceHandler() {
    // Your initialization goes here
  }

  void getStatusOfAllNodes(message& _return) {
    // Your implementation goes here
    printf("getStatusOfAllNodes\n");
  }

  void getStatusOfNode(message& _return, const std::string& nodeName) {
    // Your implementation goes here
    printf("getStatusOfNode\n");
  }

  void getStatusOfAllServicesOnNode(message& _return, const std::string& nodeName) {
    // Your implementation goes here
    printf("getStatusOfAllServicesOnNode\n");
  }

  void getStatusOfServiceOnNode(message& _return, const std::string& nodeName, const std::string& serviceName) {
    // Your implementation goes here
    printf("getStatusOfServiceOnNode\n");
  }

  void startAllServicesOnAllNodes() {
    // Your implementation goes here
    printf("startAllServicesOnAllNodes\n");
  }

  void startAllServicesOnANode(const std::string& nodeName) {
    // Your implementation goes here
    printf("startAllServicesOnANode\n");
  }

  void startAServiceOnANode(const std::string& nodeName, const std::string& serviceName) {
    // Your implementation goes here
    printf("startAServiceOnANode\n");
  }

  void stopAllServicesOnAllNodes() {
    // Your implementation goes here
    printf("stopAllServicesOnAllNodes\n");
  }

  void stopAllServicesOnANode(const std::string& nodeName) {
    // Your implementation goes here
    printf("stopAllServicesOnANode\n");
  }

  void stopAServiceOnANode(const std::string& nodeName, const std::string& serviceName) {
    // Your implementation goes here
    printf("stopAServiceOnANode\n");
  }

  void getGDFConfigurationFile(message& _return, const std::string& fileName) {
    // Your implementation goes here
    printf("getGDFConfigurationFile\n");
  }

  void setGDFConfigurationFile(const std::string& fileName, const std::string& message) {
    // Your implementation goes here
    printf("setGDFConfigurationFile\n");
  }

  void query(message& _return, const message& querry) {
    // Your implementation goes here
    printf("query\n");
  }

  void ping(message& _return) {
    // Your implementation goes here
    printf("ping\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ServerServiceHandler> handler(new ServerServiceHandler());
  shared_ptr<TProcessor> processor(new ServerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

