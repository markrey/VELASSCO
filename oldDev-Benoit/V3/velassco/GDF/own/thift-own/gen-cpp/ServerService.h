/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServerService_H
#define ServerService_H

#include <thrift/TDispatchProcessor.h>
#include "com_types.h"



class ServerServiceIf {
 public:
  virtual ~ServerServiceIf() {}
  virtual void getStatusOfAllNodes(message& _return) = 0;
  virtual void getStatusOfNode(message& _return, const std::string& nodeName) = 0;
  virtual void getStatusOfAllServicesOnNode(message& _return, const std::string& nodeName) = 0;
  virtual void getStatusOfServiceOnNode(message& _return, const std::string& nodeName, const std::string& serviceName) = 0;
  virtual void startAllServicesOnAllNodes() = 0;
  virtual void startAllServicesOnANode(const std::string& nodeName) = 0;
  virtual void startAServiceOnANode(const std::string& nodeName, const std::string& serviceName) = 0;
  virtual void stopAllServicesOnAllNodes() = 0;
  virtual void stopAllServicesOnANode(const std::string& nodeName) = 0;
  virtual void stopAServiceOnANode(const std::string& nodeName, const std::string& serviceName) = 0;
  virtual void getGDFConfigurationFile(message& _return, const std::string& fileName) = 0;
  virtual void setGDFConfigurationFile(const std::string& fileName, const std::string& message) = 0;
  virtual void query(message& _return, const message& querry) = 0;
  virtual void ping(message& _return) = 0;
};

class ServerServiceIfFactory {
 public:
  typedef ServerServiceIf Handler;

  virtual ~ServerServiceIfFactory() {}

  virtual ServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServerServiceIf* /* handler */) = 0;
};

class ServerServiceIfSingletonFactory : virtual public ServerServiceIfFactory {
 public:
  ServerServiceIfSingletonFactory(const boost::shared_ptr<ServerServiceIf>& iface) : iface_(iface) {}
  virtual ~ServerServiceIfSingletonFactory() {}

  virtual ServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServerServiceIf> iface_;
};

class ServerServiceNull : virtual public ServerServiceIf {
 public:
  virtual ~ServerServiceNull() {}
  void getStatusOfAllNodes(message& /* _return */) {
    return;
  }
  void getStatusOfNode(message& /* _return */, const std::string& /* nodeName */) {
    return;
  }
  void getStatusOfAllServicesOnNode(message& /* _return */, const std::string& /* nodeName */) {
    return;
  }
  void getStatusOfServiceOnNode(message& /* _return */, const std::string& /* nodeName */, const std::string& /* serviceName */) {
    return;
  }
  void startAllServicesOnAllNodes() {
    return;
  }
  void startAllServicesOnANode(const std::string& /* nodeName */) {
    return;
  }
  void startAServiceOnANode(const std::string& /* nodeName */, const std::string& /* serviceName */) {
    return;
  }
  void stopAllServicesOnAllNodes() {
    return;
  }
  void stopAllServicesOnANode(const std::string& /* nodeName */) {
    return;
  }
  void stopAServiceOnANode(const std::string& /* nodeName */, const std::string& /* serviceName */) {
    return;
  }
  void getGDFConfigurationFile(message& /* _return */, const std::string& /* fileName */) {
    return;
  }
  void setGDFConfigurationFile(const std::string& /* fileName */, const std::string& /* message */) {
    return;
  }
  void query(message& /* _return */, const message& /* querry */) {
    return;
  }
  void ping(message& /* _return */) {
    return;
  }
};


class ServerService_getStatusOfAllNodes_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ServerService_getStatusOfAllNodes_args(const ServerService_getStatusOfAllNodes_args&);
  ServerService_getStatusOfAllNodes_args& operator=(const ServerService_getStatusOfAllNodes_args&);
  ServerService_getStatusOfAllNodes_args() {
  }

  virtual ~ServerService_getStatusOfAllNodes_args() throw();

  bool operator == (const ServerService_getStatusOfAllNodes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ServerService_getStatusOfAllNodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfAllNodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllNodes_args& obj);
};


class ServerService_getStatusOfAllNodes_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ServerService_getStatusOfAllNodes_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllNodes_pargs& obj);
};

typedef struct _ServerService_getStatusOfAllNodes_result__isset {
  _ServerService_getStatusOfAllNodes_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfAllNodes_result__isset;

class ServerService_getStatusOfAllNodes_result {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};

  ServerService_getStatusOfAllNodes_result(const ServerService_getStatusOfAllNodes_result&);
  ServerService_getStatusOfAllNodes_result& operator=(const ServerService_getStatusOfAllNodes_result&);
  ServerService_getStatusOfAllNodes_result() {
  }

  virtual ~ServerService_getStatusOfAllNodes_result() throw();
  message success;
  InvalidOperation ouch;

  _ServerService_getStatusOfAllNodes_result__isset __isset;

  void __set_success(const message& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const ServerService_getStatusOfAllNodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ServerService_getStatusOfAllNodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfAllNodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllNodes_result& obj);
};

typedef struct _ServerService_getStatusOfAllNodes_presult__isset {
  _ServerService_getStatusOfAllNodes_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfAllNodes_presult__isset;

class ServerService_getStatusOfAllNodes_presult {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};


  virtual ~ServerService_getStatusOfAllNodes_presult() throw();
  message* success;
  InvalidOperation ouch;

  _ServerService_getStatusOfAllNodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllNodes_presult& obj);
};

typedef struct _ServerService_getStatusOfNode_args__isset {
  _ServerService_getStatusOfNode_args__isset() : nodeName(false) {}
  bool nodeName :1;
} _ServerService_getStatusOfNode_args__isset;

class ServerService_getStatusOfNode_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServerService_getStatusOfNode_args(const ServerService_getStatusOfNode_args&);
  ServerService_getStatusOfNode_args& operator=(const ServerService_getStatusOfNode_args&);
  ServerService_getStatusOfNode_args() : nodeName() {
  }

  virtual ~ServerService_getStatusOfNode_args() throw();
  std::string nodeName;

  _ServerService_getStatusOfNode_args__isset __isset;

  void __set_nodeName(const std::string& val);

  bool operator == (const ServerService_getStatusOfNode_args & rhs) const
  {
    if (!(nodeName == rhs.nodeName))
      return false;
    return true;
  }
  bool operator != (const ServerService_getStatusOfNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfNode_args& obj);
};


class ServerService_getStatusOfNode_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ServerService_getStatusOfNode_pargs() throw();
  const std::string* nodeName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfNode_pargs& obj);
};

typedef struct _ServerService_getStatusOfNode_result__isset {
  _ServerService_getStatusOfNode_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfNode_result__isset;

class ServerService_getStatusOfNode_result {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};

  ServerService_getStatusOfNode_result(const ServerService_getStatusOfNode_result&);
  ServerService_getStatusOfNode_result& operator=(const ServerService_getStatusOfNode_result&);
  ServerService_getStatusOfNode_result() {
  }

  virtual ~ServerService_getStatusOfNode_result() throw();
  message success;
  InvalidOperation ouch;

  _ServerService_getStatusOfNode_result__isset __isset;

  void __set_success(const message& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const ServerService_getStatusOfNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ServerService_getStatusOfNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfNode_result& obj);
};

typedef struct _ServerService_getStatusOfNode_presult__isset {
  _ServerService_getStatusOfNode_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfNode_presult__isset;

class ServerService_getStatusOfNode_presult {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};


  virtual ~ServerService_getStatusOfNode_presult() throw();
  message* success;
  InvalidOperation ouch;

  _ServerService_getStatusOfNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfNode_presult& obj);
};

typedef struct _ServerService_getStatusOfAllServicesOnNode_args__isset {
  _ServerService_getStatusOfAllServicesOnNode_args__isset() : nodeName(false) {}
  bool nodeName :1;
} _ServerService_getStatusOfAllServicesOnNode_args__isset;

class ServerService_getStatusOfAllServicesOnNode_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServerService_getStatusOfAllServicesOnNode_args(const ServerService_getStatusOfAllServicesOnNode_args&);
  ServerService_getStatusOfAllServicesOnNode_args& operator=(const ServerService_getStatusOfAllServicesOnNode_args&);
  ServerService_getStatusOfAllServicesOnNode_args() : nodeName() {
  }

  virtual ~ServerService_getStatusOfAllServicesOnNode_args() throw();
  std::string nodeName;

  _ServerService_getStatusOfAllServicesOnNode_args__isset __isset;

  void __set_nodeName(const std::string& val);

  bool operator == (const ServerService_getStatusOfAllServicesOnNode_args & rhs) const
  {
    if (!(nodeName == rhs.nodeName))
      return false;
    return true;
  }
  bool operator != (const ServerService_getStatusOfAllServicesOnNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfAllServicesOnNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllServicesOnNode_args& obj);
};


class ServerService_getStatusOfAllServicesOnNode_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ServerService_getStatusOfAllServicesOnNode_pargs() throw();
  const std::string* nodeName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllServicesOnNode_pargs& obj);
};

typedef struct _ServerService_getStatusOfAllServicesOnNode_result__isset {
  _ServerService_getStatusOfAllServicesOnNode_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfAllServicesOnNode_result__isset;

class ServerService_getStatusOfAllServicesOnNode_result {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};

  ServerService_getStatusOfAllServicesOnNode_result(const ServerService_getStatusOfAllServicesOnNode_result&);
  ServerService_getStatusOfAllServicesOnNode_result& operator=(const ServerService_getStatusOfAllServicesOnNode_result&);
  ServerService_getStatusOfAllServicesOnNode_result() {
  }

  virtual ~ServerService_getStatusOfAllServicesOnNode_result() throw();
  message success;
  InvalidOperation ouch;

  _ServerService_getStatusOfAllServicesOnNode_result__isset __isset;

  void __set_success(const message& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const ServerService_getStatusOfAllServicesOnNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ServerService_getStatusOfAllServicesOnNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfAllServicesOnNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllServicesOnNode_result& obj);
};

typedef struct _ServerService_getStatusOfAllServicesOnNode_presult__isset {
  _ServerService_getStatusOfAllServicesOnNode_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfAllServicesOnNode_presult__isset;

class ServerService_getStatusOfAllServicesOnNode_presult {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};


  virtual ~ServerService_getStatusOfAllServicesOnNode_presult() throw();
  message* success;
  InvalidOperation ouch;

  _ServerService_getStatusOfAllServicesOnNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfAllServicesOnNode_presult& obj);
};

typedef struct _ServerService_getStatusOfServiceOnNode_args__isset {
  _ServerService_getStatusOfServiceOnNode_args__isset() : nodeName(false), serviceName(false) {}
  bool nodeName :1;
  bool serviceName :1;
} _ServerService_getStatusOfServiceOnNode_args__isset;

class ServerService_getStatusOfServiceOnNode_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ServerService_getStatusOfServiceOnNode_args(const ServerService_getStatusOfServiceOnNode_args&);
  ServerService_getStatusOfServiceOnNode_args& operator=(const ServerService_getStatusOfServiceOnNode_args&);
  ServerService_getStatusOfServiceOnNode_args() : nodeName(), serviceName() {
  }

  virtual ~ServerService_getStatusOfServiceOnNode_args() throw();
  std::string nodeName;
  std::string serviceName;

  _ServerService_getStatusOfServiceOnNode_args__isset __isset;

  void __set_nodeName(const std::string& val);

  void __set_serviceName(const std::string& val);

  bool operator == (const ServerService_getStatusOfServiceOnNode_args & rhs) const
  {
    if (!(nodeName == rhs.nodeName))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    return true;
  }
  bool operator != (const ServerService_getStatusOfServiceOnNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfServiceOnNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfServiceOnNode_args& obj);
};


class ServerService_getStatusOfServiceOnNode_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~ServerService_getStatusOfServiceOnNode_pargs() throw();
  const std::string* nodeName;
  const std::string* serviceName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfServiceOnNode_pargs& obj);
};

typedef struct _ServerService_getStatusOfServiceOnNode_result__isset {
  _ServerService_getStatusOfServiceOnNode_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfServiceOnNode_result__isset;

class ServerService_getStatusOfServiceOnNode_result {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};

  ServerService_getStatusOfServiceOnNode_result(const ServerService_getStatusOfServiceOnNode_result&);
  ServerService_getStatusOfServiceOnNode_result& operator=(const ServerService_getStatusOfServiceOnNode_result&);
  ServerService_getStatusOfServiceOnNode_result() {
  }

  virtual ~ServerService_getStatusOfServiceOnNode_result() throw();
  message success;
  InvalidOperation ouch;

  _ServerService_getStatusOfServiceOnNode_result__isset __isset;

  void __set_success(const message& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const ServerService_getStatusOfServiceOnNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ServerService_getStatusOfServiceOnNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getStatusOfServiceOnNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfServiceOnNode_result& obj);
};

typedef struct _ServerService_getStatusOfServiceOnNode_presult__isset {
  _ServerService_getStatusOfServiceOnNode_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getStatusOfServiceOnNode_presult__isset;

class ServerService_getStatusOfServiceOnNode_presult {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};


  virtual ~ServerService_getStatusOfServiceOnNode_presult() throw();
  message* success;
  InvalidOperation ouch;

  _ServerService_getStatusOfServiceOnNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getStatusOfServiceOnNode_presult& obj);
};


class ServerService_startAllServicesOnAllNodes_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ServerService_startAllServicesOnAllNodes_args(const ServerService_startAllServicesOnAllNodes_args&);
  ServerService_startAllServicesOnAllNodes_args& operator=(const ServerService_startAllServicesOnAllNodes_args&);
  ServerService_startAllServicesOnAllNodes_args() {
  }

  virtual ~ServerService_startAllServicesOnAllNodes_args() throw();

  bool operator == (const ServerService_startAllServicesOnAllNodes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ServerService_startAllServicesOnAllNodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_startAllServicesOnAllNodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_startAllServicesOnAllNodes_args& obj);
};


class ServerService_startAllServicesOnAllNodes_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ServerService_startAllServicesOnAllNodes_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_startAllServicesOnAllNodes_pargs& obj);
};

typedef struct _ServerService_startAllServicesOnANode_args__isset {
  _ServerService_startAllServicesOnANode_args__isset() : nodeName(false) {}
  bool nodeName :1;
} _ServerService_startAllServicesOnANode_args__isset;

class ServerService_startAllServicesOnANode_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServerService_startAllServicesOnANode_args(const ServerService_startAllServicesOnANode_args&);
  ServerService_startAllServicesOnANode_args& operator=(const ServerService_startAllServicesOnANode_args&);
  ServerService_startAllServicesOnANode_args() : nodeName() {
  }

  virtual ~ServerService_startAllServicesOnANode_args() throw();
  std::string nodeName;

  _ServerService_startAllServicesOnANode_args__isset __isset;

  void __set_nodeName(const std::string& val);

  bool operator == (const ServerService_startAllServicesOnANode_args & rhs) const
  {
    if (!(nodeName == rhs.nodeName))
      return false;
    return true;
  }
  bool operator != (const ServerService_startAllServicesOnANode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_startAllServicesOnANode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_startAllServicesOnANode_args& obj);
};


class ServerService_startAllServicesOnANode_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ServerService_startAllServicesOnANode_pargs() throw();
  const std::string* nodeName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_startAllServicesOnANode_pargs& obj);
};

typedef struct _ServerService_startAServiceOnANode_args__isset {
  _ServerService_startAServiceOnANode_args__isset() : nodeName(false), serviceName(false) {}
  bool nodeName :1;
  bool serviceName :1;
} _ServerService_startAServiceOnANode_args__isset;

class ServerService_startAServiceOnANode_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ServerService_startAServiceOnANode_args(const ServerService_startAServiceOnANode_args&);
  ServerService_startAServiceOnANode_args& operator=(const ServerService_startAServiceOnANode_args&);
  ServerService_startAServiceOnANode_args() : nodeName(), serviceName() {
  }

  virtual ~ServerService_startAServiceOnANode_args() throw();
  std::string nodeName;
  std::string serviceName;

  _ServerService_startAServiceOnANode_args__isset __isset;

  void __set_nodeName(const std::string& val);

  void __set_serviceName(const std::string& val);

  bool operator == (const ServerService_startAServiceOnANode_args & rhs) const
  {
    if (!(nodeName == rhs.nodeName))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    return true;
  }
  bool operator != (const ServerService_startAServiceOnANode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_startAServiceOnANode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_startAServiceOnANode_args& obj);
};


class ServerService_startAServiceOnANode_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~ServerService_startAServiceOnANode_pargs() throw();
  const std::string* nodeName;
  const std::string* serviceName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_startAServiceOnANode_pargs& obj);
};


class ServerService_stopAllServicesOnAllNodes_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ServerService_stopAllServicesOnAllNodes_args(const ServerService_stopAllServicesOnAllNodes_args&);
  ServerService_stopAllServicesOnAllNodes_args& operator=(const ServerService_stopAllServicesOnAllNodes_args&);
  ServerService_stopAllServicesOnAllNodes_args() {
  }

  virtual ~ServerService_stopAllServicesOnAllNodes_args() throw();

  bool operator == (const ServerService_stopAllServicesOnAllNodes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ServerService_stopAllServicesOnAllNodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_stopAllServicesOnAllNodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_stopAllServicesOnAllNodes_args& obj);
};


class ServerService_stopAllServicesOnAllNodes_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ServerService_stopAllServicesOnAllNodes_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_stopAllServicesOnAllNodes_pargs& obj);
};

typedef struct _ServerService_stopAllServicesOnANode_args__isset {
  _ServerService_stopAllServicesOnANode_args__isset() : nodeName(false) {}
  bool nodeName :1;
} _ServerService_stopAllServicesOnANode_args__isset;

class ServerService_stopAllServicesOnANode_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServerService_stopAllServicesOnANode_args(const ServerService_stopAllServicesOnANode_args&);
  ServerService_stopAllServicesOnANode_args& operator=(const ServerService_stopAllServicesOnANode_args&);
  ServerService_stopAllServicesOnANode_args() : nodeName() {
  }

  virtual ~ServerService_stopAllServicesOnANode_args() throw();
  std::string nodeName;

  _ServerService_stopAllServicesOnANode_args__isset __isset;

  void __set_nodeName(const std::string& val);

  bool operator == (const ServerService_stopAllServicesOnANode_args & rhs) const
  {
    if (!(nodeName == rhs.nodeName))
      return false;
    return true;
  }
  bool operator != (const ServerService_stopAllServicesOnANode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_stopAllServicesOnANode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_stopAllServicesOnANode_args& obj);
};


class ServerService_stopAllServicesOnANode_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ServerService_stopAllServicesOnANode_pargs() throw();
  const std::string* nodeName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_stopAllServicesOnANode_pargs& obj);
};

typedef struct _ServerService_stopAServiceOnANode_args__isset {
  _ServerService_stopAServiceOnANode_args__isset() : nodeName(false), serviceName(false) {}
  bool nodeName :1;
  bool serviceName :1;
} _ServerService_stopAServiceOnANode_args__isset;

class ServerService_stopAServiceOnANode_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ServerService_stopAServiceOnANode_args(const ServerService_stopAServiceOnANode_args&);
  ServerService_stopAServiceOnANode_args& operator=(const ServerService_stopAServiceOnANode_args&);
  ServerService_stopAServiceOnANode_args() : nodeName(), serviceName() {
  }

  virtual ~ServerService_stopAServiceOnANode_args() throw();
  std::string nodeName;
  std::string serviceName;

  _ServerService_stopAServiceOnANode_args__isset __isset;

  void __set_nodeName(const std::string& val);

  void __set_serviceName(const std::string& val);

  bool operator == (const ServerService_stopAServiceOnANode_args & rhs) const
  {
    if (!(nodeName == rhs.nodeName))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    return true;
  }
  bool operator != (const ServerService_stopAServiceOnANode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_stopAServiceOnANode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_stopAServiceOnANode_args& obj);
};


class ServerService_stopAServiceOnANode_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~ServerService_stopAServiceOnANode_pargs() throw();
  const std::string* nodeName;
  const std::string* serviceName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_stopAServiceOnANode_pargs& obj);
};

typedef struct _ServerService_getGDFConfigurationFile_args__isset {
  _ServerService_getGDFConfigurationFile_args__isset() : fileName(false) {}
  bool fileName :1;
} _ServerService_getGDFConfigurationFile_args__isset;

class ServerService_getGDFConfigurationFile_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServerService_getGDFConfigurationFile_args(const ServerService_getGDFConfigurationFile_args&);
  ServerService_getGDFConfigurationFile_args& operator=(const ServerService_getGDFConfigurationFile_args&);
  ServerService_getGDFConfigurationFile_args() : fileName() {
  }

  virtual ~ServerService_getGDFConfigurationFile_args() throw();
  std::string fileName;

  _ServerService_getGDFConfigurationFile_args__isset __isset;

  void __set_fileName(const std::string& val);

  bool operator == (const ServerService_getGDFConfigurationFile_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const ServerService_getGDFConfigurationFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getGDFConfigurationFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getGDFConfigurationFile_args& obj);
};


class ServerService_getGDFConfigurationFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ServerService_getGDFConfigurationFile_pargs() throw();
  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getGDFConfigurationFile_pargs& obj);
};

typedef struct _ServerService_getGDFConfigurationFile_result__isset {
  _ServerService_getGDFConfigurationFile_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getGDFConfigurationFile_result__isset;

class ServerService_getGDFConfigurationFile_result {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};

  ServerService_getGDFConfigurationFile_result(const ServerService_getGDFConfigurationFile_result&);
  ServerService_getGDFConfigurationFile_result& operator=(const ServerService_getGDFConfigurationFile_result&);
  ServerService_getGDFConfigurationFile_result() {
  }

  virtual ~ServerService_getGDFConfigurationFile_result() throw();
  message success;
  InvalidOperation ouch;

  _ServerService_getGDFConfigurationFile_result__isset __isset;

  void __set_success(const message& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const ServerService_getGDFConfigurationFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ServerService_getGDFConfigurationFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_getGDFConfigurationFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getGDFConfigurationFile_result& obj);
};

typedef struct _ServerService_getGDFConfigurationFile_presult__isset {
  _ServerService_getGDFConfigurationFile_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_getGDFConfigurationFile_presult__isset;

class ServerService_getGDFConfigurationFile_presult {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};


  virtual ~ServerService_getGDFConfigurationFile_presult() throw();
  message* success;
  InvalidOperation ouch;

  _ServerService_getGDFConfigurationFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_getGDFConfigurationFile_presult& obj);
};

typedef struct _ServerService_setGDFConfigurationFile_args__isset {
  _ServerService_setGDFConfigurationFile_args__isset() : fileName(false), message(false) {}
  bool fileName :1;
  bool message :1;
} _ServerService_setGDFConfigurationFile_args__isset;

class ServerService_setGDFConfigurationFile_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ServerService_setGDFConfigurationFile_args(const ServerService_setGDFConfigurationFile_args&);
  ServerService_setGDFConfigurationFile_args& operator=(const ServerService_setGDFConfigurationFile_args&);
  ServerService_setGDFConfigurationFile_args() : fileName(), message() {
  }

  virtual ~ServerService_setGDFConfigurationFile_args() throw();
  std::string fileName;
  std::string message;

  _ServerService_setGDFConfigurationFile_args__isset __isset;

  void __set_fileName(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const ServerService_setGDFConfigurationFile_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ServerService_setGDFConfigurationFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_setGDFConfigurationFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_setGDFConfigurationFile_args& obj);
};


class ServerService_setGDFConfigurationFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~ServerService_setGDFConfigurationFile_pargs() throw();
  const std::string* fileName;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_setGDFConfigurationFile_pargs& obj);
};

typedef struct _ServerService_setGDFConfigurationFile_result__isset {
  _ServerService_setGDFConfigurationFile_result__isset() : ouch(false) {}
  bool ouch :1;
} _ServerService_setGDFConfigurationFile_result__isset;

class ServerService_setGDFConfigurationFile_result {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  ServerService_setGDFConfigurationFile_result(const ServerService_setGDFConfigurationFile_result&);
  ServerService_setGDFConfigurationFile_result& operator=(const ServerService_setGDFConfigurationFile_result&);
  ServerService_setGDFConfigurationFile_result() {
  }

  virtual ~ServerService_setGDFConfigurationFile_result() throw();
  InvalidOperation ouch;

  _ServerService_setGDFConfigurationFile_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const ServerService_setGDFConfigurationFile_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ServerService_setGDFConfigurationFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_setGDFConfigurationFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_setGDFConfigurationFile_result& obj);
};

typedef struct _ServerService_setGDFConfigurationFile_presult__isset {
  _ServerService_setGDFConfigurationFile_presult__isset() : ouch(false) {}
  bool ouch :1;
} _ServerService_setGDFConfigurationFile_presult__isset;

class ServerService_setGDFConfigurationFile_presult {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~ServerService_setGDFConfigurationFile_presult() throw();
  InvalidOperation ouch;

  _ServerService_setGDFConfigurationFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_setGDFConfigurationFile_presult& obj);
};

typedef struct _ServerService_query_args__isset {
  _ServerService_query_args__isset() : querry(false) {}
  bool querry :1;
} _ServerService_query_args__isset;

class ServerService_query_args {
 public:

  static const char* ascii_fingerprint; // = "5FE1DF3B495076E0DA173CCA7C026BC2";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0xE1,0xDF,0x3B,0x49,0x50,0x76,0xE0,0xDA,0x17,0x3C,0xCA,0x7C,0x02,0x6B,0xC2};

  ServerService_query_args(const ServerService_query_args&);
  ServerService_query_args& operator=(const ServerService_query_args&);
  ServerService_query_args() {
  }

  virtual ~ServerService_query_args() throw();
  message querry;

  _ServerService_query_args__isset __isset;

  void __set_querry(const message& val);

  bool operator == (const ServerService_query_args & rhs) const
  {
    if (!(querry == rhs.querry))
      return false;
    return true;
  }
  bool operator != (const ServerService_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_query_args& obj);
};


class ServerService_query_pargs {
 public:

  static const char* ascii_fingerprint; // = "5FE1DF3B495076E0DA173CCA7C026BC2";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0xE1,0xDF,0x3B,0x49,0x50,0x76,0xE0,0xDA,0x17,0x3C,0xCA,0x7C,0x02,0x6B,0xC2};


  virtual ~ServerService_query_pargs() throw();
  const message* querry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_query_pargs& obj);
};

typedef struct _ServerService_query_result__isset {
  _ServerService_query_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_query_result__isset;

class ServerService_query_result {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};

  ServerService_query_result(const ServerService_query_result&);
  ServerService_query_result& operator=(const ServerService_query_result&);
  ServerService_query_result() {
  }

  virtual ~ServerService_query_result() throw();
  message success;
  InvalidOperation ouch;

  _ServerService_query_result__isset __isset;

  void __set_success(const message& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const ServerService_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const ServerService_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_query_result& obj);
};

typedef struct _ServerService_query_presult__isset {
  _ServerService_query_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _ServerService_query_presult__isset;

class ServerService_query_presult {
 public:

  static const char* ascii_fingerprint; // = "2AC81F5D1C1A32625C8CF6087E2BE76F";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC8,0x1F,0x5D,0x1C,0x1A,0x32,0x62,0x5C,0x8C,0xF6,0x08,0x7E,0x2B,0xE7,0x6F};


  virtual ~ServerService_query_presult() throw();
  message* success;
  InvalidOperation ouch;

  _ServerService_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_query_presult& obj);
};


class ServerService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ServerService_ping_args(const ServerService_ping_args&);
  ServerService_ping_args& operator=(const ServerService_ping_args&);
  ServerService_ping_args() {
  }

  virtual ~ServerService_ping_args() throw();

  bool operator == (const ServerService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ServerService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_ping_args& obj);
};


class ServerService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ServerService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_ping_pargs& obj);
};

typedef struct _ServerService_ping_result__isset {
  _ServerService_ping_result__isset() : success(false) {}
  bool success :1;
} _ServerService_ping_result__isset;

class ServerService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "5A7089586DBF0D54358DE59B9984B907";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x70,0x89,0x58,0x6D,0xBF,0x0D,0x54,0x35,0x8D,0xE5,0x9B,0x99,0x84,0xB9,0x07};

  ServerService_ping_result(const ServerService_ping_result&);
  ServerService_ping_result& operator=(const ServerService_ping_result&);
  ServerService_ping_result() {
  }

  virtual ~ServerService_ping_result() throw();
  message success;

  _ServerService_ping_result__isset __isset;

  void __set_success(const message& val);

  bool operator == (const ServerService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServerService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServerService_ping_result& obj);
};

typedef struct _ServerService_ping_presult__isset {
  _ServerService_ping_presult__isset() : success(false) {}
  bool success :1;
} _ServerService_ping_presult__isset;

class ServerService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "5A7089586DBF0D54358DE59B9984B907";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x70,0x89,0x58,0x6D,0xBF,0x0D,0x54,0x35,0x8D,0xE5,0x9B,0x99,0x84,0xB9,0x07};


  virtual ~ServerService_ping_presult() throw();
  message* success;

  _ServerService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ServerService_ping_presult& obj);
};

class ServerServiceClient : virtual public ServerServiceIf {
 public:
  ServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getStatusOfAllNodes(message& _return);
  void send_getStatusOfAllNodes();
  void recv_getStatusOfAllNodes(message& _return);
  void getStatusOfNode(message& _return, const std::string& nodeName);
  void send_getStatusOfNode(const std::string& nodeName);
  void recv_getStatusOfNode(message& _return);
  void getStatusOfAllServicesOnNode(message& _return, const std::string& nodeName);
  void send_getStatusOfAllServicesOnNode(const std::string& nodeName);
  void recv_getStatusOfAllServicesOnNode(message& _return);
  void getStatusOfServiceOnNode(message& _return, const std::string& nodeName, const std::string& serviceName);
  void send_getStatusOfServiceOnNode(const std::string& nodeName, const std::string& serviceName);
  void recv_getStatusOfServiceOnNode(message& _return);
  void startAllServicesOnAllNodes();
  void send_startAllServicesOnAllNodes();
  void startAllServicesOnANode(const std::string& nodeName);
  void send_startAllServicesOnANode(const std::string& nodeName);
  void startAServiceOnANode(const std::string& nodeName, const std::string& serviceName);
  void send_startAServiceOnANode(const std::string& nodeName, const std::string& serviceName);
  void stopAllServicesOnAllNodes();
  void send_stopAllServicesOnAllNodes();
  void stopAllServicesOnANode(const std::string& nodeName);
  void send_stopAllServicesOnANode(const std::string& nodeName);
  void stopAServiceOnANode(const std::string& nodeName, const std::string& serviceName);
  void send_stopAServiceOnANode(const std::string& nodeName, const std::string& serviceName);
  void getGDFConfigurationFile(message& _return, const std::string& fileName);
  void send_getGDFConfigurationFile(const std::string& fileName);
  void recv_getGDFConfigurationFile(message& _return);
  void setGDFConfigurationFile(const std::string& fileName, const std::string& message);
  void send_setGDFConfigurationFile(const std::string& fileName, const std::string& message);
  void recv_setGDFConfigurationFile();
  void query(message& _return, const message& querry);
  void send_query(const message& querry);
  void recv_query(message& _return);
  void ping(message& _return);
  void send_ping();
  void recv_ping(message& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getStatusOfAllNodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatusOfNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatusOfAllServicesOnNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatusOfServiceOnNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAllServicesOnAllNodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAllServicesOnANode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAServiceOnANode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopAllServicesOnAllNodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopAllServicesOnANode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopAServiceOnANode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGDFConfigurationFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setGDFConfigurationFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServerServiceProcessor(boost::shared_ptr<ServerServiceIf> iface) :
    iface_(iface) {
    processMap_["getStatusOfAllNodes"] = &ServerServiceProcessor::process_getStatusOfAllNodes;
    processMap_["getStatusOfNode"] = &ServerServiceProcessor::process_getStatusOfNode;
    processMap_["getStatusOfAllServicesOnNode"] = &ServerServiceProcessor::process_getStatusOfAllServicesOnNode;
    processMap_["getStatusOfServiceOnNode"] = &ServerServiceProcessor::process_getStatusOfServiceOnNode;
    processMap_["startAllServicesOnAllNodes"] = &ServerServiceProcessor::process_startAllServicesOnAllNodes;
    processMap_["startAllServicesOnANode"] = &ServerServiceProcessor::process_startAllServicesOnANode;
    processMap_["startAServiceOnANode"] = &ServerServiceProcessor::process_startAServiceOnANode;
    processMap_["stopAllServicesOnAllNodes"] = &ServerServiceProcessor::process_stopAllServicesOnAllNodes;
    processMap_["stopAllServicesOnANode"] = &ServerServiceProcessor::process_stopAllServicesOnANode;
    processMap_["stopAServiceOnANode"] = &ServerServiceProcessor::process_stopAServiceOnANode;
    processMap_["getGDFConfigurationFile"] = &ServerServiceProcessor::process_getGDFConfigurationFile;
    processMap_["setGDFConfigurationFile"] = &ServerServiceProcessor::process_setGDFConfigurationFile;
    processMap_["query"] = &ServerServiceProcessor::process_query;
    processMap_["ping"] = &ServerServiceProcessor::process_ping;
  }

  virtual ~ServerServiceProcessor() {}
};

class ServerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServerServiceProcessorFactory(const ::boost::shared_ptr< ServerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServerServiceIfFactory > handlerFactory_;
};

class ServerServiceMultiface : virtual public ServerServiceIf {
 public:
  ServerServiceMultiface(std::vector<boost::shared_ptr<ServerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServerServiceIf> > ifaces_;
  ServerServiceMultiface() {}
  void add(boost::shared_ptr<ServerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getStatusOfAllNodes(message& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatusOfAllNodes(_return);
    }
    ifaces_[i]->getStatusOfAllNodes(_return);
    return;
  }

  void getStatusOfNode(message& _return, const std::string& nodeName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatusOfNode(_return, nodeName);
    }
    ifaces_[i]->getStatusOfNode(_return, nodeName);
    return;
  }

  void getStatusOfAllServicesOnNode(message& _return, const std::string& nodeName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatusOfAllServicesOnNode(_return, nodeName);
    }
    ifaces_[i]->getStatusOfAllServicesOnNode(_return, nodeName);
    return;
  }

  void getStatusOfServiceOnNode(message& _return, const std::string& nodeName, const std::string& serviceName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatusOfServiceOnNode(_return, nodeName, serviceName);
    }
    ifaces_[i]->getStatusOfServiceOnNode(_return, nodeName, serviceName);
    return;
  }

  void startAllServicesOnAllNodes() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startAllServicesOnAllNodes();
    }
    ifaces_[i]->startAllServicesOnAllNodes();
  }

  void startAllServicesOnANode(const std::string& nodeName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startAllServicesOnANode(nodeName);
    }
    ifaces_[i]->startAllServicesOnANode(nodeName);
  }

  void startAServiceOnANode(const std::string& nodeName, const std::string& serviceName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startAServiceOnANode(nodeName, serviceName);
    }
    ifaces_[i]->startAServiceOnANode(nodeName, serviceName);
  }

  void stopAllServicesOnAllNodes() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopAllServicesOnAllNodes();
    }
    ifaces_[i]->stopAllServicesOnAllNodes();
  }

  void stopAllServicesOnANode(const std::string& nodeName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopAllServicesOnANode(nodeName);
    }
    ifaces_[i]->stopAllServicesOnANode(nodeName);
  }

  void stopAServiceOnANode(const std::string& nodeName, const std::string& serviceName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopAServiceOnANode(nodeName, serviceName);
    }
    ifaces_[i]->stopAServiceOnANode(nodeName, serviceName);
  }

  void getGDFConfigurationFile(message& _return, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGDFConfigurationFile(_return, fileName);
    }
    ifaces_[i]->getGDFConfigurationFile(_return, fileName);
    return;
  }

  void setGDFConfigurationFile(const std::string& fileName, const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setGDFConfigurationFile(fileName, message);
    }
    ifaces_[i]->setGDFConfigurationFile(fileName, message);
  }

  void query(message& _return, const message& querry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, querry);
    }
    ifaces_[i]->query(_return, querry);
    return;
  }

  void ping(message& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

};



#endif
