/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef THBaseService_H
#define THBaseService_H

#include <thrift/TDispatchProcessor.h>
#include "hbase_types.h"

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 {

class THBaseServiceIf {
 public:
  virtual ~THBaseServiceIf() {}

  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * @param table the table to check on
   * 
   * @param get the TGet to check for
   */
  virtual bool exists(const std::string& table, const TGet& get) = 0;

  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * @param table the table to get from
   * 
   * @param get the TGet to fetch
   */
  virtual void get(TResult& _return, const std::string& table, const TGet& get) = 0;

  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * @param table the table to get from
   * 
   * @param gets a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  virtual void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & gets) = 0;

  /**
   * Commit a TPut to a table.
   * 
   * @param table the table to put data in
   * 
   * @param put the TPut to put
   */
  virtual void put(const std::string& table, const TPut& put) = 0;

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * @param table to check in and put to
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param put the TPut to put if the check succeeds
   */
  virtual bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put) = 0;

  /**
   * Commit a List of Puts to the table.
   * 
   * @param table the table to put data in
   * 
   * @param puts a list of TPuts to commit
   */
  virtual void putMultiple(const std::string& table, const std::vector<TPut> & puts) = 0;

  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * @param table the table to delete from
   * 
   * @param deleteSingle the TDelete to delete
   */
  virtual void deleteSingle(const std::string& table, const TDelete& deleteSingle) = 0;

  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * @param table the table to delete from
   * 
   * @param deletes list of TDeletes to delete
   */
  virtual void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & deletes) = 0;

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param deleteSingle the TDelete to execute if the check succeeds
   */
  virtual bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle) = 0;
  virtual void increment(TResult& _return, const std::string& table, const TIncrement& increment) = 0;
  virtual void append(TResult& _return, const std::string& table, const TAppend& append) = 0;

  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * @param table the table to get the Scanner for
   * 
   * @param scan the scan object to get a Scanner for
   */
  virtual int32_t openScanner(const std::string& table, const TScan& scan) = 0;

  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   * 
   * @param numRows number of rows to return
   */
  virtual void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) = 0;

  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * @param scannerId the Id of the Scanner to close *
   */
  virtual void closeScanner(const int32_t scannerId) = 0;

  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * @param table table to apply the mutations
   * 
   * @param rowMutations mutations to apply
   */
  virtual void mutateRow(const std::string& table, const TRowMutations& rowMutations) = 0;

  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * @param table the table to get the Scanner for
   * 
   * @param scan the scan object to get a Scanner for
   * 
   * @param numRows number of rows to return
   */
  virtual void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& scan, const int32_t numRows) = 0;
};

class THBaseServiceIfFactory {
 public:
  typedef THBaseServiceIf Handler;

  virtual ~THBaseServiceIfFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(THBaseServiceIf* /* handler */) = 0;
};

class THBaseServiceIfSingletonFactory : virtual public THBaseServiceIfFactory {
 public:
  THBaseServiceIfSingletonFactory(const boost::shared_ptr<THBaseServiceIf>& iface) : iface_(iface) {}
  virtual ~THBaseServiceIfSingletonFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(THBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<THBaseServiceIf> iface_;
};

class THBaseServiceNull : virtual public THBaseServiceIf {
 public:
  virtual ~THBaseServiceNull() {}
  bool exists(const std::string& /* table */, const TGet& /* get */) {
    bool _return = false;
    return _return;
  }
  void get(TResult& /* _return */, const std::string& /* table */, const TGet& /* get */) {
    return;
  }
  void getMultiple(std::vector<TResult> & /* _return */, const std::string& /* table */, const std::vector<TGet> & /* gets */) {
    return;
  }
  void put(const std::string& /* table */, const TPut& /* put */) {
    return;
  }
  bool checkAndPut(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TPut& /* put */) {
    bool _return = false;
    return _return;
  }
  void putMultiple(const std::string& /* table */, const std::vector<TPut> & /* puts */) {
    return;
  }
  void deleteSingle(const std::string& /* table */, const TDelete& /* deleteSingle */) {
    return;
  }
  void deleteMultiple(std::vector<TDelete> & /* _return */, const std::string& /* table */, const std::vector<TDelete> & /* deletes */) {
    return;
  }
  bool checkAndDelete(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TDelete& /* deleteSingle */) {
    bool _return = false;
    return _return;
  }
  void increment(TResult& /* _return */, const std::string& /* table */, const TIncrement& /* increment */) {
    return;
  }
  void append(TResult& /* _return */, const std::string& /* table */, const TAppend& /* append */) {
    return;
  }
  int32_t openScanner(const std::string& /* table */, const TScan& /* scan */) {
    int32_t _return = 0;
    return _return;
  }
  void getScannerRows(std::vector<TResult> & /* _return */, const int32_t /* scannerId */, const int32_t /* numRows */) {
    return;
  }
  void closeScanner(const int32_t /* scannerId */) {
    return;
  }
  void mutateRow(const std::string& /* table */, const TRowMutations& /* rowMutations */) {
    return;
  }
  void getScannerResults(std::vector<TResult> & /* _return */, const std::string& /* table */, const TScan& /* scan */, const int32_t /* numRows */) {
    return;
  }
};


class THBaseService_exists_args {
 public:

  static const char* ascii_fingerprint; // = "6E6724C40F64EDA48DBBA4170932F634";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x67,0x24,0xC4,0x0F,0x64,0xED,0xA4,0x8D,0xBB,0xA4,0x17,0x09,0x32,0xF6,0x34};

  THBaseService_exists_args(const THBaseService_exists_args&);
  THBaseService_exists_args& operator=(const THBaseService_exists_args&);
  THBaseService_exists_args() : table() {
  }

  virtual ~THBaseService_exists_args() throw();
  std::string table;
  TGet get;

  void __set_table(const std::string& val);

  void __set_get(const TGet& val);

  bool operator == (const THBaseService_exists_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(get == rhs.get))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_exists_pargs {
 public:

  static const char* ascii_fingerprint; // = "6E6724C40F64EDA48DBBA4170932F634";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x67,0x24,0xC4,0x0F,0x64,0xED,0xA4,0x8D,0xBB,0xA4,0x17,0x09,0x32,0xF6,0x34};


  virtual ~THBaseService_exists_pargs() throw();
  const std::string* table;
  const TGet* get;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_exists_result__isset {
  _THBaseService_exists_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_exists_result__isset;

class THBaseService_exists_result {
 public:

  static const char* ascii_fingerprint; // = "CAC6718E0B842C3D21F71D078053BB9D";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xC6,0x71,0x8E,0x0B,0x84,0x2C,0x3D,0x21,0xF7,0x1D,0x07,0x80,0x53,0xBB,0x9D};

  THBaseService_exists_result(const THBaseService_exists_result&);
  THBaseService_exists_result& operator=(const THBaseService_exists_result&);
  THBaseService_exists_result() : success(0) {
  }

  virtual ~THBaseService_exists_result() throw();
  bool success;
  TIOError io;

  _THBaseService_exists_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_exists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_exists_presult__isset {
  _THBaseService_exists_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_exists_presult__isset;

class THBaseService_exists_presult {
 public:

  static const char* ascii_fingerprint; // = "CAC6718E0B842C3D21F71D078053BB9D";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xC6,0x71,0x8E,0x0B,0x84,0x2C,0x3D,0x21,0xF7,0x1D,0x07,0x80,0x53,0xBB,0x9D};


  virtual ~THBaseService_exists_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_exists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_get_args {
 public:

  static const char* ascii_fingerprint; // = "6E6724C40F64EDA48DBBA4170932F634";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x67,0x24,0xC4,0x0F,0x64,0xED,0xA4,0x8D,0xBB,0xA4,0x17,0x09,0x32,0xF6,0x34};

  THBaseService_get_args(const THBaseService_get_args&);
  THBaseService_get_args& operator=(const THBaseService_get_args&);
  THBaseService_get_args() : table() {
  }

  virtual ~THBaseService_get_args() throw();
  std::string table;
  TGet get;

  void __set_table(const std::string& val);

  void __set_get(const TGet& val);

  bool operator == (const THBaseService_get_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(get == rhs.get))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "6E6724C40F64EDA48DBBA4170932F634";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x67,0x24,0xC4,0x0F,0x64,0xED,0xA4,0x8D,0xBB,0xA4,0x17,0x09,0x32,0xF6,0x34};


  virtual ~THBaseService_get_pargs() throw();
  const std::string* table;
  const TGet* get;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_get_result__isset {
  _THBaseService_get_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_get_result__isset;

class THBaseService_get_result {
 public:

  static const char* ascii_fingerprint; // = "B62303CE8593592F811A708E0A08BB88";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x23,0x03,0xCE,0x85,0x93,0x59,0x2F,0x81,0x1A,0x70,0x8E,0x0A,0x08,0xBB,0x88};

  THBaseService_get_result(const THBaseService_get_result&);
  THBaseService_get_result& operator=(const THBaseService_get_result&);
  THBaseService_get_result() {
  }

  virtual ~THBaseService_get_result() throw();
  TResult success;
  TIOError io;

  _THBaseService_get_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_get_presult__isset {
  _THBaseService_get_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_get_presult__isset;

class THBaseService_get_presult {
 public:

  static const char* ascii_fingerprint; // = "B62303CE8593592F811A708E0A08BB88";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x23,0x03,0xCE,0x85,0x93,0x59,0x2F,0x81,0x1A,0x70,0x8E,0x0A,0x08,0xBB,0x88};


  virtual ~THBaseService_get_presult() throw();
  TResult* success;
  TIOError io;

  _THBaseService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_getMultiple_args {
 public:

  static const char* ascii_fingerprint; // = "0ED8F8D89D62F36C121DF816737CF025";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xD8,0xF8,0xD8,0x9D,0x62,0xF3,0x6C,0x12,0x1D,0xF8,0x16,0x73,0x7C,0xF0,0x25};

  THBaseService_getMultiple_args(const THBaseService_getMultiple_args&);
  THBaseService_getMultiple_args& operator=(const THBaseService_getMultiple_args&);
  THBaseService_getMultiple_args() : table() {
  }

  virtual ~THBaseService_getMultiple_args() throw();
  std::string table;
  std::vector<TGet>  gets;

  void __set_table(const std::string& val);

  void __set_gets(const std::vector<TGet> & val);

  bool operator == (const THBaseService_getMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(gets == rhs.gets))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getMultiple_pargs {
 public:

  static const char* ascii_fingerprint; // = "0ED8F8D89D62F36C121DF816737CF025";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xD8,0xF8,0xD8,0x9D,0x62,0xF3,0x6C,0x12,0x1D,0xF8,0x16,0x73,0x7C,0xF0,0x25};


  virtual ~THBaseService_getMultiple_pargs() throw();
  const std::string* table;
  const std::vector<TGet> * gets;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getMultiple_result__isset {
  _THBaseService_getMultiple_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getMultiple_result__isset;

class THBaseService_getMultiple_result {
 public:

  static const char* ascii_fingerprint; // = "822809B5B600C291C6EE7648F3F09714";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x28,0x09,0xB5,0xB6,0x00,0xC2,0x91,0xC6,0xEE,0x76,0x48,0xF3,0xF0,0x97,0x14};

  THBaseService_getMultiple_result(const THBaseService_getMultiple_result&);
  THBaseService_getMultiple_result& operator=(const THBaseService_getMultiple_result&);
  THBaseService_getMultiple_result() {
  }

  virtual ~THBaseService_getMultiple_result() throw();
  std::vector<TResult>  success;
  TIOError io;

  _THBaseService_getMultiple_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getMultiple_presult__isset {
  _THBaseService_getMultiple_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getMultiple_presult__isset;

class THBaseService_getMultiple_presult {
 public:

  static const char* ascii_fingerprint; // = "822809B5B600C291C6EE7648F3F09714";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x28,0x09,0xB5,0xB6,0x00,0xC2,0x91,0xC6,0xEE,0x76,0x48,0xF3,0xF0,0x97,0x14};


  virtual ~THBaseService_getMultiple_presult() throw();
  std::vector<TResult> * success;
  TIOError io;

  _THBaseService_getMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_put_args {
 public:

  static const char* ascii_fingerprint; // = "4906AF31E8C6DC2453E34AA8C6586BEF";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x06,0xAF,0x31,0xE8,0xC6,0xDC,0x24,0x53,0xE3,0x4A,0xA8,0xC6,0x58,0x6B,0xEF};

  THBaseService_put_args(const THBaseService_put_args&);
  THBaseService_put_args& operator=(const THBaseService_put_args&);
  THBaseService_put_args() : table() {
  }

  virtual ~THBaseService_put_args() throw();
  std::string table;
  TPut put;

  void __set_table(const std::string& val);

  void __set_put(const TPut& val);

  bool operator == (const THBaseService_put_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(put == rhs.put))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_put_pargs {
 public:

  static const char* ascii_fingerprint; // = "4906AF31E8C6DC2453E34AA8C6586BEF";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x06,0xAF,0x31,0xE8,0xC6,0xDC,0x24,0x53,0xE3,0x4A,0xA8,0xC6,0x58,0x6B,0xEF};


  virtual ~THBaseService_put_pargs() throw();
  const std::string* table;
  const TPut* put;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_put_result__isset {
  _THBaseService_put_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_put_result__isset;

class THBaseService_put_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  THBaseService_put_result(const THBaseService_put_result&);
  THBaseService_put_result& operator=(const THBaseService_put_result&);
  THBaseService_put_result() {
  }

  virtual ~THBaseService_put_result() throw();
  TIOError io;

  _THBaseService_put_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_put_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_put_presult__isset {
  _THBaseService_put_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_put_presult__isset;

class THBaseService_put_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~THBaseService_put_presult() throw();
  TIOError io;

  _THBaseService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_checkAndPut_args__isset {
  _THBaseService_checkAndPut_args__isset() : value(false) {}
  bool value :1;
} _THBaseService_checkAndPut_args__isset;

class THBaseService_checkAndPut_args {
 public:

  static const char* ascii_fingerprint; // = "4F1F9DFB5B3ADBD8A58794AC441A54D6";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x1F,0x9D,0xFB,0x5B,0x3A,0xDB,0xD8,0xA5,0x87,0x94,0xAC,0x44,0x1A,0x54,0xD6};

  THBaseService_checkAndPut_args(const THBaseService_checkAndPut_args&);
  THBaseService_checkAndPut_args& operator=(const THBaseService_checkAndPut_args&);
  THBaseService_checkAndPut_args() : table(), row(), family(), qualifier(), value() {
  }

  virtual ~THBaseService_checkAndPut_args() throw();
  std::string table;
  std::string row;
  std::string family;
  std::string qualifier;
  std::string value;
  TPut put;

  _THBaseService_checkAndPut_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_put(const TPut& val);

  bool operator == (const THBaseService_checkAndPut_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(put == rhs.put))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_checkAndPut_pargs {
 public:

  static const char* ascii_fingerprint; // = "4F1F9DFB5B3ADBD8A58794AC441A54D6";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x1F,0x9D,0xFB,0x5B,0x3A,0xDB,0xD8,0xA5,0x87,0x94,0xAC,0x44,0x1A,0x54,0xD6};


  virtual ~THBaseService_checkAndPut_pargs() throw();
  const std::string* table;
  const std::string* row;
  const std::string* family;
  const std::string* qualifier;
  const std::string* value;
  const TPut* put;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndPut_result__isset {
  _THBaseService_checkAndPut_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndPut_result__isset;

class THBaseService_checkAndPut_result {
 public:

  static const char* ascii_fingerprint; // = "CAC6718E0B842C3D21F71D078053BB9D";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xC6,0x71,0x8E,0x0B,0x84,0x2C,0x3D,0x21,0xF7,0x1D,0x07,0x80,0x53,0xBB,0x9D};

  THBaseService_checkAndPut_result(const THBaseService_checkAndPut_result&);
  THBaseService_checkAndPut_result& operator=(const THBaseService_checkAndPut_result&);
  THBaseService_checkAndPut_result() : success(0) {
  }

  virtual ~THBaseService_checkAndPut_result() throw();
  bool success;
  TIOError io;

  _THBaseService_checkAndPut_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_checkAndPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndPut_presult__isset {
  _THBaseService_checkAndPut_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndPut_presult__isset;

class THBaseService_checkAndPut_presult {
 public:

  static const char* ascii_fingerprint; // = "CAC6718E0B842C3D21F71D078053BB9D";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xC6,0x71,0x8E,0x0B,0x84,0x2C,0x3D,0x21,0xF7,0x1D,0x07,0x80,0x53,0xBB,0x9D};


  virtual ~THBaseService_checkAndPut_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_checkAndPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_putMultiple_args {
 public:

  static const char* ascii_fingerprint; // = "5C32D48DB3D9FD5653CB98F092DCD6B8";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x32,0xD4,0x8D,0xB3,0xD9,0xFD,0x56,0x53,0xCB,0x98,0xF0,0x92,0xDC,0xD6,0xB8};

  THBaseService_putMultiple_args(const THBaseService_putMultiple_args&);
  THBaseService_putMultiple_args& operator=(const THBaseService_putMultiple_args&);
  THBaseService_putMultiple_args() : table() {
  }

  virtual ~THBaseService_putMultiple_args() throw();
  std::string table;
  std::vector<TPut>  puts;

  void __set_table(const std::string& val);

  void __set_puts(const std::vector<TPut> & val);

  bool operator == (const THBaseService_putMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(puts == rhs.puts))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_putMultiple_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C32D48DB3D9FD5653CB98F092DCD6B8";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x32,0xD4,0x8D,0xB3,0xD9,0xFD,0x56,0x53,0xCB,0x98,0xF0,0x92,0xDC,0xD6,0xB8};


  virtual ~THBaseService_putMultiple_pargs() throw();
  const std::string* table;
  const std::vector<TPut> * puts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_putMultiple_result__isset {
  _THBaseService_putMultiple_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_putMultiple_result__isset;

class THBaseService_putMultiple_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  THBaseService_putMultiple_result(const THBaseService_putMultiple_result&);
  THBaseService_putMultiple_result& operator=(const THBaseService_putMultiple_result&);
  THBaseService_putMultiple_result() {
  }

  virtual ~THBaseService_putMultiple_result() throw();
  TIOError io;

  _THBaseService_putMultiple_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_putMultiple_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_putMultiple_presult__isset {
  _THBaseService_putMultiple_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_putMultiple_presult__isset;

class THBaseService_putMultiple_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~THBaseService_putMultiple_presult() throw();
  TIOError io;

  _THBaseService_putMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_deleteSingle_args {
 public:

  static const char* ascii_fingerprint; // = "7A22FEBAFF1EBC025CB2F47CEDEE8161";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x22,0xFE,0xBA,0xFF,0x1E,0xBC,0x02,0x5C,0xB2,0xF4,0x7C,0xED,0xEE,0x81,0x61};

  THBaseService_deleteSingle_args(const THBaseService_deleteSingle_args&);
  THBaseService_deleteSingle_args& operator=(const THBaseService_deleteSingle_args&);
  THBaseService_deleteSingle_args() : table() {
  }

  virtual ~THBaseService_deleteSingle_args() throw();
  std::string table;
  TDelete deleteSingle;

  void __set_table(const std::string& val);

  void __set_deleteSingle(const TDelete& val);

  bool operator == (const THBaseService_deleteSingle_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(deleteSingle == rhs.deleteSingle))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_deleteSingle_pargs {
 public:

  static const char* ascii_fingerprint; // = "7A22FEBAFF1EBC025CB2F47CEDEE8161";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x22,0xFE,0xBA,0xFF,0x1E,0xBC,0x02,0x5C,0xB2,0xF4,0x7C,0xED,0xEE,0x81,0x61};


  virtual ~THBaseService_deleteSingle_pargs() throw();
  const std::string* table;
  const TDelete* deleteSingle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteSingle_result__isset {
  _THBaseService_deleteSingle_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteSingle_result__isset;

class THBaseService_deleteSingle_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  THBaseService_deleteSingle_result(const THBaseService_deleteSingle_result&);
  THBaseService_deleteSingle_result& operator=(const THBaseService_deleteSingle_result&);
  THBaseService_deleteSingle_result() {
  }

  virtual ~THBaseService_deleteSingle_result() throw();
  TIOError io;

  _THBaseService_deleteSingle_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteSingle_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteSingle_presult__isset {
  _THBaseService_deleteSingle_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteSingle_presult__isset;

class THBaseService_deleteSingle_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~THBaseService_deleteSingle_presult() throw();
  TIOError io;

  _THBaseService_deleteSingle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_deleteMultiple_args {
 public:

  static const char* ascii_fingerprint; // = "2605FCB4A214271FD0F4872DB688E7A6";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x05,0xFC,0xB4,0xA2,0x14,0x27,0x1F,0xD0,0xF4,0x87,0x2D,0xB6,0x88,0xE7,0xA6};

  THBaseService_deleteMultiple_args(const THBaseService_deleteMultiple_args&);
  THBaseService_deleteMultiple_args& operator=(const THBaseService_deleteMultiple_args&);
  THBaseService_deleteMultiple_args() : table() {
  }

  virtual ~THBaseService_deleteMultiple_args() throw();
  std::string table;
  std::vector<TDelete>  deletes;

  void __set_table(const std::string& val);

  void __set_deletes(const std::vector<TDelete> & val);

  bool operator == (const THBaseService_deleteMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(deletes == rhs.deletes))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_deleteMultiple_pargs {
 public:

  static const char* ascii_fingerprint; // = "2605FCB4A214271FD0F4872DB688E7A6";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x05,0xFC,0xB4,0xA2,0x14,0x27,0x1F,0xD0,0xF4,0x87,0x2D,0xB6,0x88,0xE7,0xA6};


  virtual ~THBaseService_deleteMultiple_pargs() throw();
  const std::string* table;
  const std::vector<TDelete> * deletes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteMultiple_result__isset {
  _THBaseService_deleteMultiple_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_deleteMultiple_result__isset;

class THBaseService_deleteMultiple_result {
 public:

  static const char* ascii_fingerprint; // = "4308627E1216D5B25EB7CD913E175F2B";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x08,0x62,0x7E,0x12,0x16,0xD5,0xB2,0x5E,0xB7,0xCD,0x91,0x3E,0x17,0x5F,0x2B};

  THBaseService_deleteMultiple_result(const THBaseService_deleteMultiple_result&);
  THBaseService_deleteMultiple_result& operator=(const THBaseService_deleteMultiple_result&);
  THBaseService_deleteMultiple_result() {
  }

  virtual ~THBaseService_deleteMultiple_result() throw();
  std::vector<TDelete>  success;
  TIOError io;

  _THBaseService_deleteMultiple_result__isset __isset;

  void __set_success(const std::vector<TDelete> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteMultiple_presult__isset {
  _THBaseService_deleteMultiple_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_deleteMultiple_presult__isset;

class THBaseService_deleteMultiple_presult {
 public:

  static const char* ascii_fingerprint; // = "4308627E1216D5B25EB7CD913E175F2B";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x08,0x62,0x7E,0x12,0x16,0xD5,0xB2,0x5E,0xB7,0xCD,0x91,0x3E,0x17,0x5F,0x2B};


  virtual ~THBaseService_deleteMultiple_presult() throw();
  std::vector<TDelete> * success;
  TIOError io;

  _THBaseService_deleteMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_checkAndDelete_args__isset {
  _THBaseService_checkAndDelete_args__isset() : value(false) {}
  bool value :1;
} _THBaseService_checkAndDelete_args__isset;

class THBaseService_checkAndDelete_args {
 public:

  static const char* ascii_fingerprint; // = "FC98427C4688BA1FD9312DFFFF0D0B38";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x98,0x42,0x7C,0x46,0x88,0xBA,0x1F,0xD9,0x31,0x2D,0xFF,0xFF,0x0D,0x0B,0x38};

  THBaseService_checkAndDelete_args(const THBaseService_checkAndDelete_args&);
  THBaseService_checkAndDelete_args& operator=(const THBaseService_checkAndDelete_args&);
  THBaseService_checkAndDelete_args() : table(), row(), family(), qualifier(), value() {
  }

  virtual ~THBaseService_checkAndDelete_args() throw();
  std::string table;
  std::string row;
  std::string family;
  std::string qualifier;
  std::string value;
  TDelete deleteSingle;

  _THBaseService_checkAndDelete_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_deleteSingle(const TDelete& val);

  bool operator == (const THBaseService_checkAndDelete_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(deleteSingle == rhs.deleteSingle))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_checkAndDelete_pargs {
 public:

  static const char* ascii_fingerprint; // = "FC98427C4688BA1FD9312DFFFF0D0B38";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x98,0x42,0x7C,0x46,0x88,0xBA,0x1F,0xD9,0x31,0x2D,0xFF,0xFF,0x0D,0x0B,0x38};


  virtual ~THBaseService_checkAndDelete_pargs() throw();
  const std::string* table;
  const std::string* row;
  const std::string* family;
  const std::string* qualifier;
  const std::string* value;
  const TDelete* deleteSingle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndDelete_result__isset {
  _THBaseService_checkAndDelete_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndDelete_result__isset;

class THBaseService_checkAndDelete_result {
 public:

  static const char* ascii_fingerprint; // = "CAC6718E0B842C3D21F71D078053BB9D";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xC6,0x71,0x8E,0x0B,0x84,0x2C,0x3D,0x21,0xF7,0x1D,0x07,0x80,0x53,0xBB,0x9D};

  THBaseService_checkAndDelete_result(const THBaseService_checkAndDelete_result&);
  THBaseService_checkAndDelete_result& operator=(const THBaseService_checkAndDelete_result&);
  THBaseService_checkAndDelete_result() : success(0) {
  }

  virtual ~THBaseService_checkAndDelete_result() throw();
  bool success;
  TIOError io;

  _THBaseService_checkAndDelete_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_checkAndDelete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndDelete_presult__isset {
  _THBaseService_checkAndDelete_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndDelete_presult__isset;

class THBaseService_checkAndDelete_presult {
 public:

  static const char* ascii_fingerprint; // = "CAC6718E0B842C3D21F71D078053BB9D";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xC6,0x71,0x8E,0x0B,0x84,0x2C,0x3D,0x21,0xF7,0x1D,0x07,0x80,0x53,0xBB,0x9D};


  virtual ~THBaseService_checkAndDelete_presult() throw();
  bool* success;
  TIOError io;

  _THBaseService_checkAndDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_increment_args {
 public:

  static const char* ascii_fingerprint; // = "9B531D32C2950E587578283A943B7A1A";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x53,0x1D,0x32,0xC2,0x95,0x0E,0x58,0x75,0x78,0x28,0x3A,0x94,0x3B,0x7A,0x1A};

  THBaseService_increment_args(const THBaseService_increment_args&);
  THBaseService_increment_args& operator=(const THBaseService_increment_args&);
  THBaseService_increment_args() : table() {
  }

  virtual ~THBaseService_increment_args() throw();
  std::string table;
  TIncrement increment;

  void __set_table(const std::string& val);

  void __set_increment(const TIncrement& val);

  bool operator == (const THBaseService_increment_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(increment == rhs.increment))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_increment_pargs {
 public:

  static const char* ascii_fingerprint; // = "9B531D32C2950E587578283A943B7A1A";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x53,0x1D,0x32,0xC2,0x95,0x0E,0x58,0x75,0x78,0x28,0x3A,0x94,0x3B,0x7A,0x1A};


  virtual ~THBaseService_increment_pargs() throw();
  const std::string* table;
  const TIncrement* increment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_increment_result__isset {
  _THBaseService_increment_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_increment_result__isset;

class THBaseService_increment_result {
 public:

  static const char* ascii_fingerprint; // = "B62303CE8593592F811A708E0A08BB88";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x23,0x03,0xCE,0x85,0x93,0x59,0x2F,0x81,0x1A,0x70,0x8E,0x0A,0x08,0xBB,0x88};

  THBaseService_increment_result(const THBaseService_increment_result&);
  THBaseService_increment_result& operator=(const THBaseService_increment_result&);
  THBaseService_increment_result() {
  }

  virtual ~THBaseService_increment_result() throw();
  TResult success;
  TIOError io;

  _THBaseService_increment_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_increment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_increment_presult__isset {
  _THBaseService_increment_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_increment_presult__isset;

class THBaseService_increment_presult {
 public:

  static const char* ascii_fingerprint; // = "B62303CE8593592F811A708E0A08BB88";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x23,0x03,0xCE,0x85,0x93,0x59,0x2F,0x81,0x1A,0x70,0x8E,0x0A,0x08,0xBB,0x88};


  virtual ~THBaseService_increment_presult() throw();
  TResult* success;
  TIOError io;

  _THBaseService_increment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_append_args {
 public:

  static const char* ascii_fingerprint; // = "5391C2FF1801348033F8C11805F9BA18";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0x91,0xC2,0xFF,0x18,0x01,0x34,0x80,0x33,0xF8,0xC1,0x18,0x05,0xF9,0xBA,0x18};

  THBaseService_append_args(const THBaseService_append_args&);
  THBaseService_append_args& operator=(const THBaseService_append_args&);
  THBaseService_append_args() : table() {
  }

  virtual ~THBaseService_append_args() throw();
  std::string table;
  TAppend append;

  void __set_table(const std::string& val);

  void __set_append(const TAppend& val);

  bool operator == (const THBaseService_append_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(append == rhs.append))
      return false;
    return true;
  }
  bool operator != (const THBaseService_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_append_pargs {
 public:

  static const char* ascii_fingerprint; // = "5391C2FF1801348033F8C11805F9BA18";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0x91,0xC2,0xFF,0x18,0x01,0x34,0x80,0x33,0xF8,0xC1,0x18,0x05,0xF9,0xBA,0x18};


  virtual ~THBaseService_append_pargs() throw();
  const std::string* table;
  const TAppend* append;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_append_result__isset {
  _THBaseService_append_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_append_result__isset;

class THBaseService_append_result {
 public:

  static const char* ascii_fingerprint; // = "B62303CE8593592F811A708E0A08BB88";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x23,0x03,0xCE,0x85,0x93,0x59,0x2F,0x81,0x1A,0x70,0x8E,0x0A,0x08,0xBB,0x88};

  THBaseService_append_result(const THBaseService_append_result&);
  THBaseService_append_result& operator=(const THBaseService_append_result&);
  THBaseService_append_result() {
  }

  virtual ~THBaseService_append_result() throw();
  TResult success;
  TIOError io;

  _THBaseService_append_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_append_presult__isset {
  _THBaseService_append_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_append_presult__isset;

class THBaseService_append_presult {
 public:

  static const char* ascii_fingerprint; // = "B62303CE8593592F811A708E0A08BB88";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x23,0x03,0xCE,0x85,0x93,0x59,0x2F,0x81,0x1A,0x70,0x8E,0x0A,0x08,0xBB,0x88};


  virtual ~THBaseService_append_presult() throw();
  TResult* success;
  TIOError io;

  _THBaseService_append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_openScanner_args {
 public:

  static const char* ascii_fingerprint; // = "7C93DE6AB952EF6EAF609B0E84E3D34F";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x93,0xDE,0x6A,0xB9,0x52,0xEF,0x6E,0xAF,0x60,0x9B,0x0E,0x84,0xE3,0xD3,0x4F};

  THBaseService_openScanner_args(const THBaseService_openScanner_args&);
  THBaseService_openScanner_args& operator=(const THBaseService_openScanner_args&);
  THBaseService_openScanner_args() : table() {
  }

  virtual ~THBaseService_openScanner_args() throw();
  std::string table;
  TScan scan;

  void __set_table(const std::string& val);

  void __set_scan(const TScan& val);

  bool operator == (const THBaseService_openScanner_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(scan == rhs.scan))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_openScanner_pargs {
 public:

  static const char* ascii_fingerprint; // = "7C93DE6AB952EF6EAF609B0E84E3D34F";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x93,0xDE,0x6A,0xB9,0x52,0xEF,0x6E,0xAF,0x60,0x9B,0x0E,0x84,0xE3,0xD3,0x4F};


  virtual ~THBaseService_openScanner_pargs() throw();
  const std::string* table;
  const TScan* scan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_openScanner_result__isset {
  _THBaseService_openScanner_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_openScanner_result__isset;

class THBaseService_openScanner_result {
 public:

  static const char* ascii_fingerprint; // = "1868F861797DACDC78FEB1B3E1A7A65D";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x68,0xF8,0x61,0x79,0x7D,0xAC,0xDC,0x78,0xFE,0xB1,0xB3,0xE1,0xA7,0xA6,0x5D};

  THBaseService_openScanner_result(const THBaseService_openScanner_result&);
  THBaseService_openScanner_result& operator=(const THBaseService_openScanner_result&);
  THBaseService_openScanner_result() : success(0) {
  }

  virtual ~THBaseService_openScanner_result() throw();
  int32_t success;
  TIOError io;

  _THBaseService_openScanner_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_openScanner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_openScanner_presult__isset {
  _THBaseService_openScanner_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_openScanner_presult__isset;

class THBaseService_openScanner_presult {
 public:

  static const char* ascii_fingerprint; // = "1868F861797DACDC78FEB1B3E1A7A65D";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x68,0xF8,0x61,0x79,0x7D,0xAC,0xDC,0x78,0xFE,0xB1,0xB3,0xE1,0xA7,0xA6,0x5D};


  virtual ~THBaseService_openScanner_presult() throw();
  int32_t* success;
  TIOError io;

  _THBaseService_openScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_getScannerRows_args__isset {
  _THBaseService_getScannerRows_args__isset() : numRows(true) {}
  bool numRows :1;
} _THBaseService_getScannerRows_args__isset;

class THBaseService_getScannerRows_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  THBaseService_getScannerRows_args(const THBaseService_getScannerRows_args&);
  THBaseService_getScannerRows_args& operator=(const THBaseService_getScannerRows_args&);
  THBaseService_getScannerRows_args() : scannerId(0), numRows(1) {
  }

  virtual ~THBaseService_getScannerRows_args() throw();
  int32_t scannerId;
  int32_t numRows;

  _THBaseService_getScannerRows_args__isset __isset;

  void __set_scannerId(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const THBaseService_getScannerRows_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getScannerRows_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~THBaseService_getScannerRows_pargs() throw();
  const int32_t* scannerId;
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerRows_result__isset {
  _THBaseService_getScannerRows_result__isset() : success(false), io(false), ia(false) {}
  bool success :1;
  bool io :1;
  bool ia :1;
} _THBaseService_getScannerRows_result__isset;

class THBaseService_getScannerRows_result {
 public:

  static const char* ascii_fingerprint; // = "04956E8F6AFEFDF17F32887FADD0388E";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x95,0x6E,0x8F,0x6A,0xFE,0xFD,0xF1,0x7F,0x32,0x88,0x7F,0xAD,0xD0,0x38,0x8E};

  THBaseService_getScannerRows_result(const THBaseService_getScannerRows_result&);
  THBaseService_getScannerRows_result& operator=(const THBaseService_getScannerRows_result&);
  THBaseService_getScannerRows_result() {
  }

  virtual ~THBaseService_getScannerRows_result() throw();
  std::vector<TResult>  success;
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_getScannerRows_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  void __set_ia(const TIllegalArgument& val);

  bool operator == (const THBaseService_getScannerRows_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerRows_presult__isset {
  _THBaseService_getScannerRows_presult__isset() : success(false), io(false), ia(false) {}
  bool success :1;
  bool io :1;
  bool ia :1;
} _THBaseService_getScannerRows_presult__isset;

class THBaseService_getScannerRows_presult {
 public:

  static const char* ascii_fingerprint; // = "04956E8F6AFEFDF17F32887FADD0388E";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x95,0x6E,0x8F,0x6A,0xFE,0xFD,0xF1,0x7F,0x32,0x88,0x7F,0xAD,0xD0,0x38,0x8E};


  virtual ~THBaseService_getScannerRows_presult() throw();
  std::vector<TResult> * success;
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_getScannerRows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_closeScanner_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  THBaseService_closeScanner_args(const THBaseService_closeScanner_args&);
  THBaseService_closeScanner_args& operator=(const THBaseService_closeScanner_args&);
  THBaseService_closeScanner_args() : scannerId(0) {
  }

  virtual ~THBaseService_closeScanner_args() throw();
  int32_t scannerId;

  void __set_scannerId(const int32_t val);

  bool operator == (const THBaseService_closeScanner_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_closeScanner_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~THBaseService_closeScanner_pargs() throw();
  const int32_t* scannerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_closeScanner_result__isset {
  _THBaseService_closeScanner_result__isset() : io(false), ia(false) {}
  bool io :1;
  bool ia :1;
} _THBaseService_closeScanner_result__isset;

class THBaseService_closeScanner_result {
 public:

  static const char* ascii_fingerprint; // = "28A56A54D97A7335DAC12693BC06C14F";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xA5,0x6A,0x54,0xD9,0x7A,0x73,0x35,0xDA,0xC1,0x26,0x93,0xBC,0x06,0xC1,0x4F};

  THBaseService_closeScanner_result(const THBaseService_closeScanner_result&);
  THBaseService_closeScanner_result& operator=(const THBaseService_closeScanner_result&);
  THBaseService_closeScanner_result() {
  }

  virtual ~THBaseService_closeScanner_result() throw();
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_closeScanner_result__isset __isset;

  void __set_io(const TIOError& val);

  void __set_ia(const TIllegalArgument& val);

  bool operator == (const THBaseService_closeScanner_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_closeScanner_presult__isset {
  _THBaseService_closeScanner_presult__isset() : io(false), ia(false) {}
  bool io :1;
  bool ia :1;
} _THBaseService_closeScanner_presult__isset;

class THBaseService_closeScanner_presult {
 public:

  static const char* ascii_fingerprint; // = "28A56A54D97A7335DAC12693BC06C14F";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xA5,0x6A,0x54,0xD9,0x7A,0x73,0x35,0xDA,0xC1,0x26,0x93,0xBC,0x06,0xC1,0x4F};


  virtual ~THBaseService_closeScanner_presult() throw();
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_closeScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_mutateRow_args {
 public:

  static const char* ascii_fingerprint; // = "58BB9C30BE62CB830F5A16EE72B8AF1D";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0xBB,0x9C,0x30,0xBE,0x62,0xCB,0x83,0x0F,0x5A,0x16,0xEE,0x72,0xB8,0xAF,0x1D};

  THBaseService_mutateRow_args(const THBaseService_mutateRow_args&);
  THBaseService_mutateRow_args& operator=(const THBaseService_mutateRow_args&);
  THBaseService_mutateRow_args() : table() {
  }

  virtual ~THBaseService_mutateRow_args() throw();
  std::string table;
  TRowMutations rowMutations;

  void __set_table(const std::string& val);

  void __set_rowMutations(const TRowMutations& val);

  bool operator == (const THBaseService_mutateRow_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(rowMutations == rhs.rowMutations))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_mutateRow_pargs {
 public:

  static const char* ascii_fingerprint; // = "58BB9C30BE62CB830F5A16EE72B8AF1D";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0xBB,0x9C,0x30,0xBE,0x62,0xCB,0x83,0x0F,0x5A,0x16,0xEE,0x72,0xB8,0xAF,0x1D};


  virtual ~THBaseService_mutateRow_pargs() throw();
  const std::string* table;
  const TRowMutations* rowMutations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_mutateRow_result__isset {
  _THBaseService_mutateRow_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_mutateRow_result__isset;

class THBaseService_mutateRow_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  THBaseService_mutateRow_result(const THBaseService_mutateRow_result&);
  THBaseService_mutateRow_result& operator=(const THBaseService_mutateRow_result&);
  THBaseService_mutateRow_result() {
  }

  virtual ~THBaseService_mutateRow_result() throw();
  TIOError io;

  _THBaseService_mutateRow_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_mutateRow_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_mutateRow_presult__isset {
  _THBaseService_mutateRow_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_mutateRow_presult__isset;

class THBaseService_mutateRow_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~THBaseService_mutateRow_presult() throw();
  TIOError io;

  _THBaseService_mutateRow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_getScannerResults_args__isset {
  _THBaseService_getScannerResults_args__isset() : numRows(true) {}
  bool numRows :1;
} _THBaseService_getScannerResults_args__isset;

class THBaseService_getScannerResults_args {
 public:

  static const char* ascii_fingerprint; // = "BBC5D7F8017EC9B4B4D8E512D79872A0";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xC5,0xD7,0xF8,0x01,0x7E,0xC9,0xB4,0xB4,0xD8,0xE5,0x12,0xD7,0x98,0x72,0xA0};

  THBaseService_getScannerResults_args(const THBaseService_getScannerResults_args&);
  THBaseService_getScannerResults_args& operator=(const THBaseService_getScannerResults_args&);
  THBaseService_getScannerResults_args() : table(), numRows(1) {
  }

  virtual ~THBaseService_getScannerResults_args() throw();
  std::string table;
  TScan scan;
  int32_t numRows;

  _THBaseService_getScannerResults_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_scan(const TScan& val);

  void __set_numRows(const int32_t val);

  bool operator == (const THBaseService_getScannerResults_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(scan == rhs.scan))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getScannerResults_pargs {
 public:

  static const char* ascii_fingerprint; // = "BBC5D7F8017EC9B4B4D8E512D79872A0";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xC5,0xD7,0xF8,0x01,0x7E,0xC9,0xB4,0xB4,0xD8,0xE5,0x12,0xD7,0x98,0x72,0xA0};


  virtual ~THBaseService_getScannerResults_pargs() throw();
  const std::string* table;
  const TScan* scan;
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerResults_result__isset {
  _THBaseService_getScannerResults_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getScannerResults_result__isset;

class THBaseService_getScannerResults_result {
 public:

  static const char* ascii_fingerprint; // = "822809B5B600C291C6EE7648F3F09714";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x28,0x09,0xB5,0xB6,0x00,0xC2,0x91,0xC6,0xEE,0x76,0x48,0xF3,0xF0,0x97,0x14};

  THBaseService_getScannerResults_result(const THBaseService_getScannerResults_result&);
  THBaseService_getScannerResults_result& operator=(const THBaseService_getScannerResults_result&);
  THBaseService_getScannerResults_result() {
  }

  virtual ~THBaseService_getScannerResults_result() throw();
  std::vector<TResult>  success;
  TIOError io;

  _THBaseService_getScannerResults_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getScannerResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerResults_presult__isset {
  _THBaseService_getScannerResults_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getScannerResults_presult__isset;

class THBaseService_getScannerResults_presult {
 public:

  static const char* ascii_fingerprint; // = "822809B5B600C291C6EE7648F3F09714";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x28,0x09,0xB5,0xB6,0x00,0xC2,0x91,0xC6,0xEE,0x76,0x48,0xF3,0xF0,0x97,0x14};


  virtual ~THBaseService_getScannerResults_presult() throw();
  std::vector<TResult> * success;
  TIOError io;

  _THBaseService_getScannerResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class THBaseServiceClient : virtual public THBaseServiceIf {
 public:
  THBaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  THBaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool exists(const std::string& table, const TGet& get);
  void send_exists(const std::string& table, const TGet& get);
  bool recv_exists();
  void get(TResult& _return, const std::string& table, const TGet& get);
  void send_get(const std::string& table, const TGet& get);
  void recv_get(TResult& _return);
  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & gets);
  void send_getMultiple(const std::string& table, const std::vector<TGet> & gets);
  void recv_getMultiple(std::vector<TResult> & _return);
  void put(const std::string& table, const TPut& put);
  void send_put(const std::string& table, const TPut& put);
  void recv_put();
  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put);
  void send_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put);
  bool recv_checkAndPut();
  void putMultiple(const std::string& table, const std::vector<TPut> & puts);
  void send_putMultiple(const std::string& table, const std::vector<TPut> & puts);
  void recv_putMultiple();
  void deleteSingle(const std::string& table, const TDelete& deleteSingle);
  void send_deleteSingle(const std::string& table, const TDelete& deleteSingle);
  void recv_deleteSingle();
  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & deletes);
  void send_deleteMultiple(const std::string& table, const std::vector<TDelete> & deletes);
  void recv_deleteMultiple(std::vector<TDelete> & _return);
  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle);
  void send_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle);
  bool recv_checkAndDelete();
  void increment(TResult& _return, const std::string& table, const TIncrement& increment);
  void send_increment(const std::string& table, const TIncrement& increment);
  void recv_increment(TResult& _return);
  void append(TResult& _return, const std::string& table, const TAppend& append);
  void send_append(const std::string& table, const TAppend& append);
  void recv_append(TResult& _return);
  int32_t openScanner(const std::string& table, const TScan& scan);
  void send_openScanner(const std::string& table, const TScan& scan);
  int32_t recv_openScanner();
  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows);
  void send_getScannerRows(const int32_t scannerId, const int32_t numRows);
  void recv_getScannerRows(std::vector<TResult> & _return);
  void closeScanner(const int32_t scannerId);
  void send_closeScanner(const int32_t scannerId);
  void recv_closeScanner();
  void mutateRow(const std::string& table, const TRowMutations& rowMutations);
  void send_mutateRow(const std::string& table, const TRowMutations& rowMutations);
  void recv_mutateRow();
  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& scan, const int32_t numRows);
  void send_getScannerResults(const std::string& table, const TScan& scan, const int32_t numRows);
  void recv_getScannerResults(std::vector<TResult> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class THBaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<THBaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (THBaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSingle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScannerRows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mutateRow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScannerResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  THBaseServiceProcessor(boost::shared_ptr<THBaseServiceIf> iface) :
    iface_(iface) {
    processMap_["exists"] = &THBaseServiceProcessor::process_exists;
    processMap_["get"] = &THBaseServiceProcessor::process_get;
    processMap_["getMultiple"] = &THBaseServiceProcessor::process_getMultiple;
    processMap_["put"] = &THBaseServiceProcessor::process_put;
    processMap_["checkAndPut"] = &THBaseServiceProcessor::process_checkAndPut;
    processMap_["putMultiple"] = &THBaseServiceProcessor::process_putMultiple;
    processMap_["deleteSingle"] = &THBaseServiceProcessor::process_deleteSingle;
    processMap_["deleteMultiple"] = &THBaseServiceProcessor::process_deleteMultiple;
    processMap_["checkAndDelete"] = &THBaseServiceProcessor::process_checkAndDelete;
    processMap_["increment"] = &THBaseServiceProcessor::process_increment;
    processMap_["append"] = &THBaseServiceProcessor::process_append;
    processMap_["openScanner"] = &THBaseServiceProcessor::process_openScanner;
    processMap_["getScannerRows"] = &THBaseServiceProcessor::process_getScannerRows;
    processMap_["closeScanner"] = &THBaseServiceProcessor::process_closeScanner;
    processMap_["mutateRow"] = &THBaseServiceProcessor::process_mutateRow;
    processMap_["getScannerResults"] = &THBaseServiceProcessor::process_getScannerResults;
  }

  virtual ~THBaseServiceProcessor() {}
};

class THBaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  THBaseServiceProcessorFactory(const ::boost::shared_ptr< THBaseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< THBaseServiceIfFactory > handlerFactory_;
};

class THBaseServiceMultiface : virtual public THBaseServiceIf {
 public:
  THBaseServiceMultiface(std::vector<boost::shared_ptr<THBaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~THBaseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<THBaseServiceIf> > ifaces_;
  THBaseServiceMultiface() {}
  void add(boost::shared_ptr<THBaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool exists(const std::string& table, const TGet& get) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exists(table, get);
    }
    return ifaces_[i]->exists(table, get);
  }

  void get(TResult& _return, const std::string& table, const TGet& get) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, table, get);
    }
    ifaces_[i]->get(_return, table, get);
    return;
  }

  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & gets) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMultiple(_return, table, gets);
    }
    ifaces_[i]->getMultiple(_return, table, gets);
    return;
  }

  void put(const std::string& table, const TPut& put) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(table, put);
    }
    ifaces_[i]->put(table, put);
  }

  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndPut(table, row, family, qualifier, value, put);
    }
    return ifaces_[i]->checkAndPut(table, row, family, qualifier, value, put);
  }

  void putMultiple(const std::string& table, const std::vector<TPut> & puts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putMultiple(table, puts);
    }
    ifaces_[i]->putMultiple(table, puts);
  }

  void deleteSingle(const std::string& table, const TDelete& deleteSingle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSingle(table, deleteSingle);
    }
    ifaces_[i]->deleteSingle(table, deleteSingle);
  }

  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & deletes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteMultiple(_return, table, deletes);
    }
    ifaces_[i]->deleteMultiple(_return, table, deletes);
    return;
  }

  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, deleteSingle);
    }
    return ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, deleteSingle);
  }

  void increment(TResult& _return, const std::string& table, const TIncrement& increment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increment(_return, table, increment);
    }
    ifaces_[i]->increment(_return, table, increment);
    return;
  }

  void append(TResult& _return, const std::string& table, const TAppend& append) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append(_return, table, append);
    }
    ifaces_[i]->append(_return, table, append);
    return;
  }

  int32_t openScanner(const std::string& table, const TScan& scan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openScanner(table, scan);
    }
    return ifaces_[i]->openScanner(table, scan);
  }

  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    }
    ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    return;
  }

  void closeScanner(const int32_t scannerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeScanner(scannerId);
    }
    ifaces_[i]->closeScanner(scannerId);
  }

  void mutateRow(const std::string& table, const TRowMutations& rowMutations) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mutateRow(table, rowMutations);
    }
    ifaces_[i]->mutateRow(table, rowMutations);
  }

  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& scan, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScannerResults(_return, table, scan, numRows);
    }
    ifaces_[i]->getScannerResults(_return, table, scan, numRows);
    return;
  }

};

}}}} // namespace

#endif
