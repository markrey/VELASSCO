/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StorageModule_H
#define StorageModule_H

#include <thrift/TDispatchProcessor.h>
#include "storage_module_types.h"

namespace dli {

class StorageModuleIf {
 public:
  virtual ~StorageModuleIf() {}

  /**
   * returns a session if if the user exists with the specified password and the specified role or an empty role.
   * 
   * @param user_name
   * @param role
   * @param password
   */
  virtual void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) = 0;

  /**
   * Stop access to the system by a given session id and release all resources held by that session
   * 
   * @param sessionID
   */
  virtual void UserLogout(std::string& _return, const std::string& sessionID) = 0;

  /**
   * Returns a list of names of data sets that are available from the VELaSSCo platform
   * and - optionally - their properties.
   * 
   * @param sessionID
   * @param groupQualifier
   * @param modelNamePattern
   * @param options
   */
  virtual void GetListOfModels(rvGetListOfModels& _return, const std::string& sessionID, const std::string& groupQualifier, const std::string& modelNamePattern, const std::string& options) = 0;

  /**
   * Returns a model GUID (from now on ModelID). The model host may do housekeeping actions,
   * such as caching, and update its session model accordingly..
   * 
   * @param sessionID
   * @param modelName
   * @param requestedAccess
   */
  virtual void OpenModel(rvOpenModel& _return, const std::string& sessionID, const std::string& modelName, const std::string& requestedAccess) = 0;

  /**
   * Description: Removes the possibility to access a model via a previously assigned
   * GUID (OpenModel). Corresponding housekeeping is wrapped up.
   * 
   * @param sessionID
   * @param modelName
   */
  virtual void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelName) = 0;

  /**
   * Description: Store a new thumbnail of a model
   * 
   * @param sessionID
   * @param modelID
   * @param imageFile
   */
  virtual void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile) = 0;

  /**
   * Description: Return thumbnail of a model.
   * 
   * @param sessionID
   * @param modelID
   */
  virtual void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID) = 0;

  /**
   * For each point in the input parameter points, the method returns data about the element that contains the point.
   * The number of elements in the returned list of elements shall be the same as the number of points in the input parameter.
   * If the method does not find an element for a point it shall return a dummy element with id equal to -1.
   * 
   * @param sessionID
   * @param modelName
   * @param points
   */
  virtual void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points) = 0;

  /**
   * GetBoundaryOfLocalMesh will get the partial tetrahedral elements, calculate and output the unique triangles,
   * i.e. triangles that are not shared between two or more elements.
   * 
   * @param sessionID
   * @param modelID
   * @param meshID
   * @param analysisID
   * @param time_step
   */
  virtual void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step) = 0;

  /**
   * Given a list of vertices id's from the model, vertexIDs, GetResultFromVerticesID will get
   * the result value of a given type (resultID) for each vertex id of the list.
   * 
   * @param sessionID
   * @param modelID
   * @param coordinatesSet
   * @param vertexIDs
   * @param resultID
   * @param time_step
   * @param analysisID
   */
  virtual void GetResultFromVerticesID(rvGetResultFromVerticesID_B& _return, const std::string& sessionID, const std::string& modelID, const std::string& coordinatesSet, const std::vector<int64_t> & vertexIDs, const std::string& resultID, const double time_step, const std::string& analysisID) = 0;

  /**
   * Retrieves the list of time steps for a given model and analysis.
   * 
   * @param sessionID
   * @param modelID
   */
  virtual void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID) = 0;

  /**
   * Retrieves the list of time steps for a given model and analysis.
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   */
  virtual void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID) = 0;

  /**
   * Returns a list of meshes present for the given time-step of that analysis.
   * If analysis == "" and step-value == -1 then the list will be of the 'static' meshes.
   * If analysis != "" and step-value != -1 then the list will be of the 'dynamic' meshes
   * that are present on that step-values of that analysis.
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param timeStep
   */
  virtual void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep) = 0;
};

class StorageModuleIfFactory {
 public:
  typedef StorageModuleIf Handler;

  virtual ~StorageModuleIfFactory() {}

  virtual StorageModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StorageModuleIf* /* handler */) = 0;
};

class StorageModuleIfSingletonFactory : virtual public StorageModuleIfFactory {
 public:
  StorageModuleIfSingletonFactory(const boost::shared_ptr<StorageModuleIf>& iface) : iface_(iface) {}
  virtual ~StorageModuleIfSingletonFactory() {}

  virtual StorageModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StorageModuleIf* /* handler */) {}

 protected:
  boost::shared_ptr<StorageModuleIf> iface_;
};

class StorageModuleNull : virtual public StorageModuleIf {
 public:
  virtual ~StorageModuleNull() {}
  void UserLogin(std::string& /* _return */, const std::string& /* user_name */, const std::string& /* role */, const std::string& /* password */) {
    return;
  }
  void UserLogout(std::string& /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void GetListOfModels(rvGetListOfModels& /* _return */, const std::string& /* sessionID */, const std::string& /* groupQualifier */, const std::string& /* modelNamePattern */, const std::string& /* options */) {
    return;
  }
  void OpenModel(rvOpenModel& /* _return */, const std::string& /* sessionID */, const std::string& /* modelName */, const std::string& /* requestedAccess */) {
    return;
  }
  void CloseModel(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* modelName */) {
    return;
  }
  void SetThumbnailOfAModel(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* imageFile */) {
    return;
  }
  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */) {
    return;
  }
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& /* _return */, const std::string& /* sessionID */, const std::string& /* modelName */, const std::vector<Point> & /* points */) {
    return;
  }
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* meshID */, const std::string& /* analysisID */, const double /* time_step */) {
    return;
  }
  void GetResultFromVerticesID(rvGetResultFromVerticesID_B& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* coordinatesSet */, const std::vector<int64_t> & /* vertexIDs */, const std::string& /* resultID */, const double /* time_step */, const std::string& /* analysisID */) {
    return;
  }
  void GetListOfAnalyses(rvGetListOfAnalyses& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */) {
    return;
  }
  void GetListOfTimeSteps(rvGetListOfTimeSteps& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */) {
    return;
  }
  void GetListOfMeshes(rvGetListOfMeshes& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* timeStep */) {
    return;
  }
};

typedef struct _StorageModule_UserLogin_args__isset {
  _StorageModule_UserLogin_args__isset() : user_name(false), role(false), password(false) {}
  bool user_name :1;
  bool role :1;
  bool password :1;
} _StorageModule_UserLogin_args__isset;

class StorageModule_UserLogin_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  StorageModule_UserLogin_args(const StorageModule_UserLogin_args&);
  StorageModule_UserLogin_args& operator=(const StorageModule_UserLogin_args&);
  StorageModule_UserLogin_args() : user_name(), role(), password() {
  }

  virtual ~StorageModule_UserLogin_args() throw();
  std::string user_name;
  std::string role;
  std::string password;

  _StorageModule_UserLogin_args__isset __isset;

  void __set_user_name(const std::string& val);

  void __set_role(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const StorageModule_UserLogin_args & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const StorageModule_UserLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_UserLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogin_args& obj);
};


class StorageModule_UserLogin_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~StorageModule_UserLogin_pargs() throw();
  const std::string* user_name;
  const std::string* role;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogin_pargs& obj);
};

typedef struct _StorageModule_UserLogin_result__isset {
  _StorageModule_UserLogin_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_UserLogin_result__isset;

class StorageModule_UserLogin_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  StorageModule_UserLogin_result(const StorageModule_UserLogin_result&);
  StorageModule_UserLogin_result& operator=(const StorageModule_UserLogin_result&);
  StorageModule_UserLogin_result() : success() {
  }

  virtual ~StorageModule_UserLogin_result() throw();
  std::string success;

  _StorageModule_UserLogin_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageModule_UserLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_UserLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_UserLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogin_result& obj);
};

typedef struct _StorageModule_UserLogin_presult__isset {
  _StorageModule_UserLogin_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_UserLogin_presult__isset;

class StorageModule_UserLogin_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~StorageModule_UserLogin_presult() throw();
  std::string* success;

  _StorageModule_UserLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogin_presult& obj);
};

typedef struct _StorageModule_UserLogout_args__isset {
  _StorageModule_UserLogout_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _StorageModule_UserLogout_args__isset;

class StorageModule_UserLogout_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  StorageModule_UserLogout_args(const StorageModule_UserLogout_args&);
  StorageModule_UserLogout_args& operator=(const StorageModule_UserLogout_args&);
  StorageModule_UserLogout_args() : sessionID() {
  }

  virtual ~StorageModule_UserLogout_args() throw();
  std::string sessionID;

  _StorageModule_UserLogout_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const StorageModule_UserLogout_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const StorageModule_UserLogout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_UserLogout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogout_args& obj);
};


class StorageModule_UserLogout_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~StorageModule_UserLogout_pargs() throw();
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogout_pargs& obj);
};

typedef struct _StorageModule_UserLogout_result__isset {
  _StorageModule_UserLogout_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_UserLogout_result__isset;

class StorageModule_UserLogout_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  StorageModule_UserLogout_result(const StorageModule_UserLogout_result&);
  StorageModule_UserLogout_result& operator=(const StorageModule_UserLogout_result&);
  StorageModule_UserLogout_result() : success() {
  }

  virtual ~StorageModule_UserLogout_result() throw();
  std::string success;

  _StorageModule_UserLogout_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageModule_UserLogout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_UserLogout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_UserLogout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogout_result& obj);
};

typedef struct _StorageModule_UserLogout_presult__isset {
  _StorageModule_UserLogout_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_UserLogout_presult__isset;

class StorageModule_UserLogout_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~StorageModule_UserLogout_presult() throw();
  std::string* success;

  _StorageModule_UserLogout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_UserLogout_presult& obj);
};

typedef struct _StorageModule_GetListOfModels_args__isset {
  _StorageModule_GetListOfModels_args__isset() : sessionID(false), groupQualifier(false), modelNamePattern(false), options(false) {}
  bool sessionID :1;
  bool groupQualifier :1;
  bool modelNamePattern :1;
  bool options :1;
} _StorageModule_GetListOfModels_args__isset;

class StorageModule_GetListOfModels_args {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  StorageModule_GetListOfModels_args(const StorageModule_GetListOfModels_args&);
  StorageModule_GetListOfModels_args& operator=(const StorageModule_GetListOfModels_args&);
  StorageModule_GetListOfModels_args() : sessionID(), groupQualifier(), modelNamePattern(), options() {
  }

  virtual ~StorageModule_GetListOfModels_args() throw();
  std::string sessionID;
  std::string groupQualifier;
  std::string modelNamePattern;
  std::string options;

  _StorageModule_GetListOfModels_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_groupQualifier(const std::string& val);

  void __set_modelNamePattern(const std::string& val);

  void __set_options(const std::string& val);

  bool operator == (const StorageModule_GetListOfModels_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(groupQualifier == rhs.groupQualifier))
      return false;
    if (!(modelNamePattern == rhs.modelNamePattern))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfModels_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfModels_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfModels_args& obj);
};


class StorageModule_GetListOfModels_pargs {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};


  virtual ~StorageModule_GetListOfModels_pargs() throw();
  const std::string* sessionID;
  const std::string* groupQualifier;
  const std::string* modelNamePattern;
  const std::string* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfModels_pargs& obj);
};

typedef struct _StorageModule_GetListOfModels_result__isset {
  _StorageModule_GetListOfModels_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfModels_result__isset;

class StorageModule_GetListOfModels_result {
 public:

  static const char* ascii_fingerprint; // = "04033E156B45928A866765A4A369D736";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x03,0x3E,0x15,0x6B,0x45,0x92,0x8A,0x86,0x67,0x65,0xA4,0xA3,0x69,0xD7,0x36};

  StorageModule_GetListOfModels_result(const StorageModule_GetListOfModels_result&);
  StorageModule_GetListOfModels_result& operator=(const StorageModule_GetListOfModels_result&);
  StorageModule_GetListOfModels_result() {
  }

  virtual ~StorageModule_GetListOfModels_result() throw();
  rvGetListOfModels success;

  _StorageModule_GetListOfModels_result__isset __isset;

  void __set_success(const rvGetListOfModels& val);

  bool operator == (const StorageModule_GetListOfModels_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfModels_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfModels_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfModels_result& obj);
};

typedef struct _StorageModule_GetListOfModels_presult__isset {
  _StorageModule_GetListOfModels_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfModels_presult__isset;

class StorageModule_GetListOfModels_presult {
 public:

  static const char* ascii_fingerprint; // = "04033E156B45928A866765A4A369D736";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x03,0x3E,0x15,0x6B,0x45,0x92,0x8A,0x86,0x67,0x65,0xA4,0xA3,0x69,0xD7,0x36};


  virtual ~StorageModule_GetListOfModels_presult() throw();
  rvGetListOfModels* success;

  _StorageModule_GetListOfModels_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfModels_presult& obj);
};

typedef struct _StorageModule_OpenModel_args__isset {
  _StorageModule_OpenModel_args__isset() : sessionID(false), modelName(false), requestedAccess(false) {}
  bool sessionID :1;
  bool modelName :1;
  bool requestedAccess :1;
} _StorageModule_OpenModel_args__isset;

class StorageModule_OpenModel_args {
 public:

  static const char* ascii_fingerprint; // = "883C5D9FD6F83F33AE7F9F7AE740558B";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x3C,0x5D,0x9F,0xD6,0xF8,0x3F,0x33,0xAE,0x7F,0x9F,0x7A,0xE7,0x40,0x55,0x8B};

  StorageModule_OpenModel_args(const StorageModule_OpenModel_args&);
  StorageModule_OpenModel_args& operator=(const StorageModule_OpenModel_args&);
  StorageModule_OpenModel_args() : sessionID(), modelName(), requestedAccess() {
  }

  virtual ~StorageModule_OpenModel_args() throw();
  std::string sessionID;
  std::string modelName;
  std::string requestedAccess;

  _StorageModule_OpenModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelName(const std::string& val);

  void __set_requestedAccess(const std::string& val);

  bool operator == (const StorageModule_OpenModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelName == rhs.modelName))
      return false;
    if (!(requestedAccess == rhs.requestedAccess))
      return false;
    return true;
  }
  bool operator != (const StorageModule_OpenModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_OpenModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_OpenModel_args& obj);
};


class StorageModule_OpenModel_pargs {
 public:

  static const char* ascii_fingerprint; // = "883C5D9FD6F83F33AE7F9F7AE740558B";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x3C,0x5D,0x9F,0xD6,0xF8,0x3F,0x33,0xAE,0x7F,0x9F,0x7A,0xE7,0x40,0x55,0x8B};


  virtual ~StorageModule_OpenModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelName;
  const std::string* requestedAccess;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_OpenModel_pargs& obj);
};

typedef struct _StorageModule_OpenModel_result__isset {
  _StorageModule_OpenModel_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_OpenModel_result__isset;

class StorageModule_OpenModel_result {
 public:

  static const char* ascii_fingerprint; // = "376927F9F05AD7BDDE30676F7648F224";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x69,0x27,0xF9,0xF0,0x5A,0xD7,0xBD,0xDE,0x30,0x67,0x6F,0x76,0x48,0xF2,0x24};

  StorageModule_OpenModel_result(const StorageModule_OpenModel_result&);
  StorageModule_OpenModel_result& operator=(const StorageModule_OpenModel_result&);
  StorageModule_OpenModel_result() {
  }

  virtual ~StorageModule_OpenModel_result() throw();
  rvOpenModel success;

  _StorageModule_OpenModel_result__isset __isset;

  void __set_success(const rvOpenModel& val);

  bool operator == (const StorageModule_OpenModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_OpenModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_OpenModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_OpenModel_result& obj);
};

typedef struct _StorageModule_OpenModel_presult__isset {
  _StorageModule_OpenModel_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_OpenModel_presult__isset;

class StorageModule_OpenModel_presult {
 public:

  static const char* ascii_fingerprint; // = "376927F9F05AD7BDDE30676F7648F224";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x69,0x27,0xF9,0xF0,0x5A,0xD7,0xBD,0xDE,0x30,0x67,0x6F,0x76,0x48,0xF2,0x24};


  virtual ~StorageModule_OpenModel_presult() throw();
  rvOpenModel* success;

  _StorageModule_OpenModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_OpenModel_presult& obj);
};

typedef struct _StorageModule_CloseModel_args__isset {
  _StorageModule_CloseModel_args__isset() : sessionID(false), modelName(false) {}
  bool sessionID :1;
  bool modelName :1;
} _StorageModule_CloseModel_args__isset;

class StorageModule_CloseModel_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  StorageModule_CloseModel_args(const StorageModule_CloseModel_args&);
  StorageModule_CloseModel_args& operator=(const StorageModule_CloseModel_args&);
  StorageModule_CloseModel_args() : sessionID(), modelName() {
  }

  virtual ~StorageModule_CloseModel_args() throw();
  std::string sessionID;
  std::string modelName;

  _StorageModule_CloseModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelName(const std::string& val);

  bool operator == (const StorageModule_CloseModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelName == rhs.modelName))
      return false;
    return true;
  }
  bool operator != (const StorageModule_CloseModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_CloseModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_CloseModel_args& obj);
};


class StorageModule_CloseModel_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~StorageModule_CloseModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_CloseModel_pargs& obj);
};

typedef struct _StorageModule_CloseModel_result__isset {
  _StorageModule_CloseModel_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_CloseModel_result__isset;

class StorageModule_CloseModel_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  StorageModule_CloseModel_result(const StorageModule_CloseModel_result&);
  StorageModule_CloseModel_result& operator=(const StorageModule_CloseModel_result&);
  StorageModule_CloseModel_result() : success() {
  }

  virtual ~StorageModule_CloseModel_result() throw();
  std::string success;

  _StorageModule_CloseModel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageModule_CloseModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_CloseModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_CloseModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_CloseModel_result& obj);
};

typedef struct _StorageModule_CloseModel_presult__isset {
  _StorageModule_CloseModel_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_CloseModel_presult__isset;

class StorageModule_CloseModel_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~StorageModule_CloseModel_presult() throw();
  std::string* success;

  _StorageModule_CloseModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_CloseModel_presult& obj);
};

typedef struct _StorageModule_SetThumbnailOfAModel_args__isset {
  _StorageModule_SetThumbnailOfAModel_args__isset() : sessionID(false), modelID(false), imageFile(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool imageFile :1;
} _StorageModule_SetThumbnailOfAModel_args__isset;

class StorageModule_SetThumbnailOfAModel_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  StorageModule_SetThumbnailOfAModel_args(const StorageModule_SetThumbnailOfAModel_args&);
  StorageModule_SetThumbnailOfAModel_args& operator=(const StorageModule_SetThumbnailOfAModel_args&);
  StorageModule_SetThumbnailOfAModel_args() : sessionID(), modelID(), imageFile() {
  }

  virtual ~StorageModule_SetThumbnailOfAModel_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string imageFile;

  _StorageModule_SetThumbnailOfAModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_imageFile(const std::string& val);

  bool operator == (const StorageModule_SetThumbnailOfAModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(imageFile == rhs.imageFile))
      return false;
    return true;
  }
  bool operator != (const StorageModule_SetThumbnailOfAModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_SetThumbnailOfAModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_SetThumbnailOfAModel_args& obj);
};


class StorageModule_SetThumbnailOfAModel_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~StorageModule_SetThumbnailOfAModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* imageFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_SetThumbnailOfAModel_pargs& obj);
};

typedef struct _StorageModule_SetThumbnailOfAModel_result__isset {
  _StorageModule_SetThumbnailOfAModel_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_SetThumbnailOfAModel_result__isset;

class StorageModule_SetThumbnailOfAModel_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  StorageModule_SetThumbnailOfAModel_result(const StorageModule_SetThumbnailOfAModel_result&);
  StorageModule_SetThumbnailOfAModel_result& operator=(const StorageModule_SetThumbnailOfAModel_result&);
  StorageModule_SetThumbnailOfAModel_result() : success() {
  }

  virtual ~StorageModule_SetThumbnailOfAModel_result() throw();
  std::string success;

  _StorageModule_SetThumbnailOfAModel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageModule_SetThumbnailOfAModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_SetThumbnailOfAModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_SetThumbnailOfAModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_SetThumbnailOfAModel_result& obj);
};

typedef struct _StorageModule_SetThumbnailOfAModel_presult__isset {
  _StorageModule_SetThumbnailOfAModel_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_SetThumbnailOfAModel_presult__isset;

class StorageModule_SetThumbnailOfAModel_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~StorageModule_SetThumbnailOfAModel_presult() throw();
  std::string* success;

  _StorageModule_SetThumbnailOfAModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_SetThumbnailOfAModel_presult& obj);
};

typedef struct _StorageModule_GetThumbnailOfAModel_args__isset {
  _StorageModule_GetThumbnailOfAModel_args__isset() : sessionID(false), modelID(false) {}
  bool sessionID :1;
  bool modelID :1;
} _StorageModule_GetThumbnailOfAModel_args__isset;

class StorageModule_GetThumbnailOfAModel_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  StorageModule_GetThumbnailOfAModel_args(const StorageModule_GetThumbnailOfAModel_args&);
  StorageModule_GetThumbnailOfAModel_args& operator=(const StorageModule_GetThumbnailOfAModel_args&);
  StorageModule_GetThumbnailOfAModel_args() : sessionID(), modelID() {
  }

  virtual ~StorageModule_GetThumbnailOfAModel_args() throw();
  std::string sessionID;
  std::string modelID;

  _StorageModule_GetThumbnailOfAModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const StorageModule_GetThumbnailOfAModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetThumbnailOfAModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetThumbnailOfAModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetThumbnailOfAModel_args& obj);
};


class StorageModule_GetThumbnailOfAModel_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~StorageModule_GetThumbnailOfAModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetThumbnailOfAModel_pargs& obj);
};

typedef struct _StorageModule_GetThumbnailOfAModel_result__isset {
  _StorageModule_GetThumbnailOfAModel_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetThumbnailOfAModel_result__isset;

class StorageModule_GetThumbnailOfAModel_result {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};

  StorageModule_GetThumbnailOfAModel_result(const StorageModule_GetThumbnailOfAModel_result&);
  StorageModule_GetThumbnailOfAModel_result& operator=(const StorageModule_GetThumbnailOfAModel_result&);
  StorageModule_GetThumbnailOfAModel_result() {
  }

  virtual ~StorageModule_GetThumbnailOfAModel_result() throw();
  rvGetThumbnailOfAModel success;

  _StorageModule_GetThumbnailOfAModel_result__isset __isset;

  void __set_success(const rvGetThumbnailOfAModel& val);

  bool operator == (const StorageModule_GetThumbnailOfAModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetThumbnailOfAModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetThumbnailOfAModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetThumbnailOfAModel_result& obj);
};

typedef struct _StorageModule_GetThumbnailOfAModel_presult__isset {
  _StorageModule_GetThumbnailOfAModel_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetThumbnailOfAModel_presult__isset;

class StorageModule_GetThumbnailOfAModel_presult {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};


  virtual ~StorageModule_GetThumbnailOfAModel_presult() throw();
  rvGetThumbnailOfAModel* success;

  _StorageModule_GetThumbnailOfAModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetThumbnailOfAModel_presult& obj);
};

typedef struct _StorageModule_GetElementOfPointsInSpace_args__isset {
  _StorageModule_GetElementOfPointsInSpace_args__isset() : sessionID(false), modelName(false), points(false) {}
  bool sessionID :1;
  bool modelName :1;
  bool points :1;
} _StorageModule_GetElementOfPointsInSpace_args__isset;

class StorageModule_GetElementOfPointsInSpace_args {
 public:

  static const char* ascii_fingerprint; // = "70A278E3A0C29BBE8F10CD2C44840788";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xA2,0x78,0xE3,0xA0,0xC2,0x9B,0xBE,0x8F,0x10,0xCD,0x2C,0x44,0x84,0x07,0x88};

  StorageModule_GetElementOfPointsInSpace_args(const StorageModule_GetElementOfPointsInSpace_args&);
  StorageModule_GetElementOfPointsInSpace_args& operator=(const StorageModule_GetElementOfPointsInSpace_args&);
  StorageModule_GetElementOfPointsInSpace_args() : sessionID(), modelName() {
  }

  virtual ~StorageModule_GetElementOfPointsInSpace_args() throw();
  std::string sessionID;
  std::string modelName;
  std::vector<Point>  points;

  _StorageModule_GetElementOfPointsInSpace_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelName(const std::string& val);

  void __set_points(const std::vector<Point> & val);

  bool operator == (const StorageModule_GetElementOfPointsInSpace_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelName == rhs.modelName))
      return false;
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetElementOfPointsInSpace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetElementOfPointsInSpace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetElementOfPointsInSpace_args& obj);
};


class StorageModule_GetElementOfPointsInSpace_pargs {
 public:

  static const char* ascii_fingerprint; // = "70A278E3A0C29BBE8F10CD2C44840788";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xA2,0x78,0xE3,0xA0,0xC2,0x9B,0xBE,0x8F,0x10,0xCD,0x2C,0x44,0x84,0x07,0x88};


  virtual ~StorageModule_GetElementOfPointsInSpace_pargs() throw();
  const std::string* sessionID;
  const std::string* modelName;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetElementOfPointsInSpace_pargs& obj);
};

typedef struct _StorageModule_GetElementOfPointsInSpace_result__isset {
  _StorageModule_GetElementOfPointsInSpace_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetElementOfPointsInSpace_result__isset;

class StorageModule_GetElementOfPointsInSpace_result {
 public:

  static const char* ascii_fingerprint; // = "62DC7BAF14CAAF5CFC2EE086ED18A4E4";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xDC,0x7B,0xAF,0x14,0xCA,0xAF,0x5C,0xFC,0x2E,0xE0,0x86,0xED,0x18,0xA4,0xE4};

  StorageModule_GetElementOfPointsInSpace_result(const StorageModule_GetElementOfPointsInSpace_result&);
  StorageModule_GetElementOfPointsInSpace_result& operator=(const StorageModule_GetElementOfPointsInSpace_result&);
  StorageModule_GetElementOfPointsInSpace_result() {
  }

  virtual ~StorageModule_GetElementOfPointsInSpace_result() throw();
  rvGetElementOfPointsInSpace success;

  _StorageModule_GetElementOfPointsInSpace_result__isset __isset;

  void __set_success(const rvGetElementOfPointsInSpace& val);

  bool operator == (const StorageModule_GetElementOfPointsInSpace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetElementOfPointsInSpace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetElementOfPointsInSpace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetElementOfPointsInSpace_result& obj);
};

typedef struct _StorageModule_GetElementOfPointsInSpace_presult__isset {
  _StorageModule_GetElementOfPointsInSpace_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetElementOfPointsInSpace_presult__isset;

class StorageModule_GetElementOfPointsInSpace_presult {
 public:

  static const char* ascii_fingerprint; // = "62DC7BAF14CAAF5CFC2EE086ED18A4E4";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xDC,0x7B,0xAF,0x14,0xCA,0xAF,0x5C,0xFC,0x2E,0xE0,0x86,0xED,0x18,0xA4,0xE4};


  virtual ~StorageModule_GetElementOfPointsInSpace_presult() throw();
  rvGetElementOfPointsInSpace* success;

  _StorageModule_GetElementOfPointsInSpace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetElementOfPointsInSpace_presult& obj);
};

typedef struct _StorageModule_GetBoundaryOfLocalMesh_args__isset {
  _StorageModule_GetBoundaryOfLocalMesh_args__isset() : sessionID(false), modelID(false), meshID(false), analysisID(false), time_step(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool meshID :1;
  bool analysisID :1;
  bool time_step :1;
} _StorageModule_GetBoundaryOfLocalMesh_args__isset;

class StorageModule_GetBoundaryOfLocalMesh_args {
 public:

  static const char* ascii_fingerprint; // = "57C2D87CBB509D7D24DDCE43C18AD56C";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC2,0xD8,0x7C,0xBB,0x50,0x9D,0x7D,0x24,0xDD,0xCE,0x43,0xC1,0x8A,0xD5,0x6C};

  StorageModule_GetBoundaryOfLocalMesh_args(const StorageModule_GetBoundaryOfLocalMesh_args&);
  StorageModule_GetBoundaryOfLocalMesh_args& operator=(const StorageModule_GetBoundaryOfLocalMesh_args&);
  StorageModule_GetBoundaryOfLocalMesh_args() : sessionID(), modelID(), meshID(), analysisID(), time_step(0) {
  }

  virtual ~StorageModule_GetBoundaryOfLocalMesh_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string meshID;
  std::string analysisID;
  double time_step;

  _StorageModule_GetBoundaryOfLocalMesh_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_meshID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_time_step(const double val);

  bool operator == (const StorageModule_GetBoundaryOfLocalMesh_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(meshID == rhs.meshID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(time_step == rhs.time_step))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetBoundaryOfLocalMesh_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetBoundaryOfLocalMesh_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetBoundaryOfLocalMesh_args& obj);
};


class StorageModule_GetBoundaryOfLocalMesh_pargs {
 public:

  static const char* ascii_fingerprint; // = "57C2D87CBB509D7D24DDCE43C18AD56C";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC2,0xD8,0x7C,0xBB,0x50,0x9D,0x7D,0x24,0xDD,0xCE,0x43,0xC1,0x8A,0xD5,0x6C};


  virtual ~StorageModule_GetBoundaryOfLocalMesh_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* meshID;
  const std::string* analysisID;
  const double* time_step;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetBoundaryOfLocalMesh_pargs& obj);
};

typedef struct _StorageModule_GetBoundaryOfLocalMesh_result__isset {
  _StorageModule_GetBoundaryOfLocalMesh_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetBoundaryOfLocalMesh_result__isset;

class StorageModule_GetBoundaryOfLocalMesh_result {
 public:

  static const char* ascii_fingerprint; // = "0F184494D8DD0267CC4C419EA19128BE";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0x18,0x44,0x94,0xD8,0xDD,0x02,0x67,0xCC,0x4C,0x41,0x9E,0xA1,0x91,0x28,0xBE};

  StorageModule_GetBoundaryOfLocalMesh_result(const StorageModule_GetBoundaryOfLocalMesh_result&);
  StorageModule_GetBoundaryOfLocalMesh_result& operator=(const StorageModule_GetBoundaryOfLocalMesh_result&);
  StorageModule_GetBoundaryOfLocalMesh_result() {
  }

  virtual ~StorageModule_GetBoundaryOfLocalMesh_result() throw();
  rvGetBoundaryOfLocalMesh success;

  _StorageModule_GetBoundaryOfLocalMesh_result__isset __isset;

  void __set_success(const rvGetBoundaryOfLocalMesh& val);

  bool operator == (const StorageModule_GetBoundaryOfLocalMesh_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetBoundaryOfLocalMesh_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetBoundaryOfLocalMesh_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetBoundaryOfLocalMesh_result& obj);
};

typedef struct _StorageModule_GetBoundaryOfLocalMesh_presult__isset {
  _StorageModule_GetBoundaryOfLocalMesh_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetBoundaryOfLocalMesh_presult__isset;

class StorageModule_GetBoundaryOfLocalMesh_presult {
 public:

  static const char* ascii_fingerprint; // = "0F184494D8DD0267CC4C419EA19128BE";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0x18,0x44,0x94,0xD8,0xDD,0x02,0x67,0xCC,0x4C,0x41,0x9E,0xA1,0x91,0x28,0xBE};


  virtual ~StorageModule_GetBoundaryOfLocalMesh_presult() throw();
  rvGetBoundaryOfLocalMesh* success;

  _StorageModule_GetBoundaryOfLocalMesh_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetBoundaryOfLocalMesh_presult& obj);
};

typedef struct _StorageModule_GetResultFromVerticesID_args__isset {
  _StorageModule_GetResultFromVerticesID_args__isset() : sessionID(false), modelID(false), coordinatesSet(false), vertexIDs(false), resultID(false), time_step(false), analysisID(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool coordinatesSet :1;
  bool vertexIDs :1;
  bool resultID :1;
  bool time_step :1;
  bool analysisID :1;
} _StorageModule_GetResultFromVerticesID_args__isset;

class StorageModule_GetResultFromVerticesID_args {
 public:

  static const char* ascii_fingerprint; // = "073D2A9DF99E9B082FD886D443593037";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x3D,0x2A,0x9D,0xF9,0x9E,0x9B,0x08,0x2F,0xD8,0x86,0xD4,0x43,0x59,0x30,0x37};

  StorageModule_GetResultFromVerticesID_args(const StorageModule_GetResultFromVerticesID_args&);
  StorageModule_GetResultFromVerticesID_args& operator=(const StorageModule_GetResultFromVerticesID_args&);
  StorageModule_GetResultFromVerticesID_args() : sessionID(), modelID(), coordinatesSet(), resultID(), time_step(0), analysisID() {
  }

  virtual ~StorageModule_GetResultFromVerticesID_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string coordinatesSet;
  std::vector<int64_t>  vertexIDs;
  std::string resultID;
  double time_step;
  std::string analysisID;

  _StorageModule_GetResultFromVerticesID_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_coordinatesSet(const std::string& val);

  void __set_vertexIDs(const std::vector<int64_t> & val);

  void __set_resultID(const std::string& val);

  void __set_time_step(const double val);

  void __set_analysisID(const std::string& val);

  bool operator == (const StorageModule_GetResultFromVerticesID_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(coordinatesSet == rhs.coordinatesSet))
      return false;
    if (!(vertexIDs == rhs.vertexIDs))
      return false;
    if (!(resultID == rhs.resultID))
      return false;
    if (!(time_step == rhs.time_step))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetResultFromVerticesID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetResultFromVerticesID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetResultFromVerticesID_args& obj);
};


class StorageModule_GetResultFromVerticesID_pargs {
 public:

  static const char* ascii_fingerprint; // = "073D2A9DF99E9B082FD886D443593037";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x3D,0x2A,0x9D,0xF9,0x9E,0x9B,0x08,0x2F,0xD8,0x86,0xD4,0x43,0x59,0x30,0x37};


  virtual ~StorageModule_GetResultFromVerticesID_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* coordinatesSet;
  const std::vector<int64_t> * vertexIDs;
  const std::string* resultID;
  const double* time_step;
  const std::string* analysisID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetResultFromVerticesID_pargs& obj);
};

typedef struct _StorageModule_GetResultFromVerticesID_result__isset {
  _StorageModule_GetResultFromVerticesID_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetResultFromVerticesID_result__isset;

class StorageModule_GetResultFromVerticesID_result {
 public:

  static const char* ascii_fingerprint; // = "F5BFC349DD50E1076F9E344574552FD5";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0xBF,0xC3,0x49,0xDD,0x50,0xE1,0x07,0x6F,0x9E,0x34,0x45,0x74,0x55,0x2F,0xD5};

  StorageModule_GetResultFromVerticesID_result(const StorageModule_GetResultFromVerticesID_result&);
  StorageModule_GetResultFromVerticesID_result& operator=(const StorageModule_GetResultFromVerticesID_result&);
  StorageModule_GetResultFromVerticesID_result() {
  }

  virtual ~StorageModule_GetResultFromVerticesID_result() throw();
  rvGetResultFromVerticesID_B success;

  _StorageModule_GetResultFromVerticesID_result__isset __isset;

  void __set_success(const rvGetResultFromVerticesID_B& val);

  bool operator == (const StorageModule_GetResultFromVerticesID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetResultFromVerticesID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetResultFromVerticesID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetResultFromVerticesID_result& obj);
};

typedef struct _StorageModule_GetResultFromVerticesID_presult__isset {
  _StorageModule_GetResultFromVerticesID_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetResultFromVerticesID_presult__isset;

class StorageModule_GetResultFromVerticesID_presult {
 public:

  static const char* ascii_fingerprint; // = "F5BFC349DD50E1076F9E344574552FD5";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0xBF,0xC3,0x49,0xDD,0x50,0xE1,0x07,0x6F,0x9E,0x34,0x45,0x74,0x55,0x2F,0xD5};


  virtual ~StorageModule_GetResultFromVerticesID_presult() throw();
  rvGetResultFromVerticesID_B* success;

  _StorageModule_GetResultFromVerticesID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetResultFromVerticesID_presult& obj);
};

typedef struct _StorageModule_GetListOfAnalyses_args__isset {
  _StorageModule_GetListOfAnalyses_args__isset() : sessionID(false), modelID(false) {}
  bool sessionID :1;
  bool modelID :1;
} _StorageModule_GetListOfAnalyses_args__isset;

class StorageModule_GetListOfAnalyses_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  StorageModule_GetListOfAnalyses_args(const StorageModule_GetListOfAnalyses_args&);
  StorageModule_GetListOfAnalyses_args& operator=(const StorageModule_GetListOfAnalyses_args&);
  StorageModule_GetListOfAnalyses_args() : sessionID(), modelID() {
  }

  virtual ~StorageModule_GetListOfAnalyses_args() throw();
  std::string sessionID;
  std::string modelID;

  _StorageModule_GetListOfAnalyses_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const StorageModule_GetListOfAnalyses_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfAnalyses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfAnalyses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfAnalyses_args& obj);
};


class StorageModule_GetListOfAnalyses_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~StorageModule_GetListOfAnalyses_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfAnalyses_pargs& obj);
};

typedef struct _StorageModule_GetListOfAnalyses_result__isset {
  _StorageModule_GetListOfAnalyses_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfAnalyses_result__isset;

class StorageModule_GetListOfAnalyses_result {
 public:

  static const char* ascii_fingerprint; // = "1ED1A8ADE129679AE704937C423E8EFD";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xD1,0xA8,0xAD,0xE1,0x29,0x67,0x9A,0xE7,0x04,0x93,0x7C,0x42,0x3E,0x8E,0xFD};

  StorageModule_GetListOfAnalyses_result(const StorageModule_GetListOfAnalyses_result&);
  StorageModule_GetListOfAnalyses_result& operator=(const StorageModule_GetListOfAnalyses_result&);
  StorageModule_GetListOfAnalyses_result() {
  }

  virtual ~StorageModule_GetListOfAnalyses_result() throw();
  rvGetListOfAnalyses success;

  _StorageModule_GetListOfAnalyses_result__isset __isset;

  void __set_success(const rvGetListOfAnalyses& val);

  bool operator == (const StorageModule_GetListOfAnalyses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfAnalyses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfAnalyses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfAnalyses_result& obj);
};

typedef struct _StorageModule_GetListOfAnalyses_presult__isset {
  _StorageModule_GetListOfAnalyses_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfAnalyses_presult__isset;

class StorageModule_GetListOfAnalyses_presult {
 public:

  static const char* ascii_fingerprint; // = "1ED1A8ADE129679AE704937C423E8EFD";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xD1,0xA8,0xAD,0xE1,0x29,0x67,0x9A,0xE7,0x04,0x93,0x7C,0x42,0x3E,0x8E,0xFD};


  virtual ~StorageModule_GetListOfAnalyses_presult() throw();
  rvGetListOfAnalyses* success;

  _StorageModule_GetListOfAnalyses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfAnalyses_presult& obj);
};

typedef struct _StorageModule_GetListOfTimeSteps_args__isset {
  _StorageModule_GetListOfTimeSteps_args__isset() : sessionID(false), modelID(false), analysisID(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
} _StorageModule_GetListOfTimeSteps_args__isset;

class StorageModule_GetListOfTimeSteps_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  StorageModule_GetListOfTimeSteps_args(const StorageModule_GetListOfTimeSteps_args&);
  StorageModule_GetListOfTimeSteps_args& operator=(const StorageModule_GetListOfTimeSteps_args&);
  StorageModule_GetListOfTimeSteps_args() : sessionID(), modelID(), analysisID() {
  }

  virtual ~StorageModule_GetListOfTimeSteps_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;

  _StorageModule_GetListOfTimeSteps_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  bool operator == (const StorageModule_GetListOfTimeSteps_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfTimeSteps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfTimeSteps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfTimeSteps_args& obj);
};


class StorageModule_GetListOfTimeSteps_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~StorageModule_GetListOfTimeSteps_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfTimeSteps_pargs& obj);
};

typedef struct _StorageModule_GetListOfTimeSteps_result__isset {
  _StorageModule_GetListOfTimeSteps_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfTimeSteps_result__isset;

class StorageModule_GetListOfTimeSteps_result {
 public:

  static const char* ascii_fingerprint; // = "10755495700BA035F4498D31CBF0558F";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x75,0x54,0x95,0x70,0x0B,0xA0,0x35,0xF4,0x49,0x8D,0x31,0xCB,0xF0,0x55,0x8F};

  StorageModule_GetListOfTimeSteps_result(const StorageModule_GetListOfTimeSteps_result&);
  StorageModule_GetListOfTimeSteps_result& operator=(const StorageModule_GetListOfTimeSteps_result&);
  StorageModule_GetListOfTimeSteps_result() {
  }

  virtual ~StorageModule_GetListOfTimeSteps_result() throw();
  rvGetListOfTimeSteps success;

  _StorageModule_GetListOfTimeSteps_result__isset __isset;

  void __set_success(const rvGetListOfTimeSteps& val);

  bool operator == (const StorageModule_GetListOfTimeSteps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfTimeSteps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfTimeSteps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfTimeSteps_result& obj);
};

typedef struct _StorageModule_GetListOfTimeSteps_presult__isset {
  _StorageModule_GetListOfTimeSteps_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfTimeSteps_presult__isset;

class StorageModule_GetListOfTimeSteps_presult {
 public:

  static const char* ascii_fingerprint; // = "10755495700BA035F4498D31CBF0558F";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x75,0x54,0x95,0x70,0x0B,0xA0,0x35,0xF4,0x49,0x8D,0x31,0xCB,0xF0,0x55,0x8F};


  virtual ~StorageModule_GetListOfTimeSteps_presult() throw();
  rvGetListOfTimeSteps* success;

  _StorageModule_GetListOfTimeSteps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfTimeSteps_presult& obj);
};

typedef struct _StorageModule_GetListOfMeshes_args__isset {
  _StorageModule_GetListOfMeshes_args__isset() : sessionID(false), modelID(false), analysisID(false), timeStep(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool timeStep :1;
} _StorageModule_GetListOfMeshes_args__isset;

class StorageModule_GetListOfMeshes_args {
 public:

  static const char* ascii_fingerprint; // = "E0F6687719566C4EF140BB1122BC7D86";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xF6,0x68,0x77,0x19,0x56,0x6C,0x4E,0xF1,0x40,0xBB,0x11,0x22,0xBC,0x7D,0x86};

  StorageModule_GetListOfMeshes_args(const StorageModule_GetListOfMeshes_args&);
  StorageModule_GetListOfMeshes_args& operator=(const StorageModule_GetListOfMeshes_args&);
  StorageModule_GetListOfMeshes_args() : sessionID(), modelID(), analysisID(), timeStep(0) {
  }

  virtual ~StorageModule_GetListOfMeshes_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double timeStep;

  _StorageModule_GetListOfMeshes_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_timeStep(const double val);

  bool operator == (const StorageModule_GetListOfMeshes_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(timeStep == rhs.timeStep))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfMeshes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfMeshes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfMeshes_args& obj);
};


class StorageModule_GetListOfMeshes_pargs {
 public:

  static const char* ascii_fingerprint; // = "E0F6687719566C4EF140BB1122BC7D86";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xF6,0x68,0x77,0x19,0x56,0x6C,0x4E,0xF1,0x40,0xBB,0x11,0x22,0xBC,0x7D,0x86};


  virtual ~StorageModule_GetListOfMeshes_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* timeStep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfMeshes_pargs& obj);
};

typedef struct _StorageModule_GetListOfMeshes_result__isset {
  _StorageModule_GetListOfMeshes_result__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfMeshes_result__isset;

class StorageModule_GetListOfMeshes_result {
 public:

  static const char* ascii_fingerprint; // = "47D956DD9E593C9D12A0E45A8C150B2B";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xD9,0x56,0xDD,0x9E,0x59,0x3C,0x9D,0x12,0xA0,0xE4,0x5A,0x8C,0x15,0x0B,0x2B};

  StorageModule_GetListOfMeshes_result(const StorageModule_GetListOfMeshes_result&);
  StorageModule_GetListOfMeshes_result& operator=(const StorageModule_GetListOfMeshes_result&);
  StorageModule_GetListOfMeshes_result() {
  }

  virtual ~StorageModule_GetListOfMeshes_result() throw();
  rvGetListOfMeshes success;

  _StorageModule_GetListOfMeshes_result__isset __isset;

  void __set_success(const rvGetListOfMeshes& val);

  bool operator == (const StorageModule_GetListOfMeshes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageModule_GetListOfMeshes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageModule_GetListOfMeshes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfMeshes_result& obj);
};

typedef struct _StorageModule_GetListOfMeshes_presult__isset {
  _StorageModule_GetListOfMeshes_presult__isset() : success(false) {}
  bool success :1;
} _StorageModule_GetListOfMeshes_presult__isset;

class StorageModule_GetListOfMeshes_presult {
 public:

  static const char* ascii_fingerprint; // = "47D956DD9E593C9D12A0E45A8C150B2B";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xD9,0x56,0xDD,0x9E,0x59,0x3C,0x9D,0x12,0xA0,0xE4,0x5A,0x8C,0x15,0x0B,0x2B};


  virtual ~StorageModule_GetListOfMeshes_presult() throw();
  rvGetListOfMeshes* success;

  _StorageModule_GetListOfMeshes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StorageModule_GetListOfMeshes_presult& obj);
};

class StorageModuleClient : virtual public StorageModuleIf {
 public:
  StorageModuleClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StorageModuleClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password);
  void send_UserLogin(const std::string& user_name, const std::string& role, const std::string& password);
  void recv_UserLogin(std::string& _return);
  void UserLogout(std::string& _return, const std::string& sessionID);
  void send_UserLogout(const std::string& sessionID);
  void recv_UserLogout(std::string& _return);
  void GetListOfModels(rvGetListOfModels& _return, const std::string& sessionID, const std::string& groupQualifier, const std::string& modelNamePattern, const std::string& options);
  void send_GetListOfModels(const std::string& sessionID, const std::string& groupQualifier, const std::string& modelNamePattern, const std::string& options);
  void recv_GetListOfModels(rvGetListOfModels& _return);
  void OpenModel(rvOpenModel& _return, const std::string& sessionID, const std::string& modelName, const std::string& requestedAccess);
  void send_OpenModel(const std::string& sessionID, const std::string& modelName, const std::string& requestedAccess);
  void recv_OpenModel(rvOpenModel& _return);
  void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelName);
  void send_CloseModel(const std::string& sessionID, const std::string& modelName);
  void recv_CloseModel(std::string& _return);
  void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  void send_SetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  void recv_SetThumbnailOfAModel(std::string& _return);
  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID);
  void send_GetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID);
  void recv_GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return);
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  void send_GetElementOfPointsInSpace(const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  void recv_GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return);
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  void send_GetBoundaryOfLocalMesh(const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  void recv_GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return);
  void GetResultFromVerticesID(rvGetResultFromVerticesID_B& _return, const std::string& sessionID, const std::string& modelID, const std::string& coordinatesSet, const std::vector<int64_t> & vertexIDs, const std::string& resultID, const double time_step, const std::string& analysisID);
  void send_GetResultFromVerticesID(const std::string& sessionID, const std::string& modelID, const std::string& coordinatesSet, const std::vector<int64_t> & vertexIDs, const std::string& resultID, const double time_step, const std::string& analysisID);
  void recv_GetResultFromVerticesID(rvGetResultFromVerticesID_B& _return);
  void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID);
  void send_GetListOfAnalyses(const std::string& sessionID, const std::string& modelID);
  void recv_GetListOfAnalyses(rvGetListOfAnalyses& _return);
  void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  void send_GetListOfTimeSteps(const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  void recv_GetListOfTimeSteps(rvGetListOfTimeSteps& _return);
  void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep);
  void send_GetListOfMeshes(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep);
  void recv_GetListOfMeshes(rvGetListOfMeshes& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StorageModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<StorageModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StorageModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UserLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UserLogout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfModels(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OpenModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetThumbnailOfAModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetThumbnailOfAModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetElementOfPointsInSpace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBoundaryOfLocalMesh(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResultFromVerticesID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfAnalyses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfTimeSteps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfMeshes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StorageModuleProcessor(boost::shared_ptr<StorageModuleIf> iface) :
    iface_(iface) {
    processMap_["UserLogin"] = &StorageModuleProcessor::process_UserLogin;
    processMap_["UserLogout"] = &StorageModuleProcessor::process_UserLogout;
    processMap_["GetListOfModels"] = &StorageModuleProcessor::process_GetListOfModels;
    processMap_["OpenModel"] = &StorageModuleProcessor::process_OpenModel;
    processMap_["CloseModel"] = &StorageModuleProcessor::process_CloseModel;
    processMap_["SetThumbnailOfAModel"] = &StorageModuleProcessor::process_SetThumbnailOfAModel;
    processMap_["GetThumbnailOfAModel"] = &StorageModuleProcessor::process_GetThumbnailOfAModel;
    processMap_["GetElementOfPointsInSpace"] = &StorageModuleProcessor::process_GetElementOfPointsInSpace;
    processMap_["GetBoundaryOfLocalMesh"] = &StorageModuleProcessor::process_GetBoundaryOfLocalMesh;
    processMap_["GetResultFromVerticesID"] = &StorageModuleProcessor::process_GetResultFromVerticesID;
    processMap_["GetListOfAnalyses"] = &StorageModuleProcessor::process_GetListOfAnalyses;
    processMap_["GetListOfTimeSteps"] = &StorageModuleProcessor::process_GetListOfTimeSteps;
    processMap_["GetListOfMeshes"] = &StorageModuleProcessor::process_GetListOfMeshes;
  }

  virtual ~StorageModuleProcessor() {}
};

class StorageModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StorageModuleProcessorFactory(const ::boost::shared_ptr< StorageModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StorageModuleIfFactory > handlerFactory_;
};

class StorageModuleMultiface : virtual public StorageModuleIf {
 public:
  StorageModuleMultiface(std::vector<boost::shared_ptr<StorageModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StorageModuleMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StorageModuleIf> > ifaces_;
  StorageModuleMultiface() {}
  void add(boost::shared_ptr<StorageModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogin(_return, user_name, role, password);
    }
    ifaces_[i]->UserLogin(_return, user_name, role, password);
    return;
  }

  void UserLogout(std::string& _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogout(_return, sessionID);
    }
    ifaces_[i]->UserLogout(_return, sessionID);
    return;
  }

  void GetListOfModels(rvGetListOfModels& _return, const std::string& sessionID, const std::string& groupQualifier, const std::string& modelNamePattern, const std::string& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfModels(_return, sessionID, groupQualifier, modelNamePattern, options);
    }
    ifaces_[i]->GetListOfModels(_return, sessionID, groupQualifier, modelNamePattern, options);
    return;
  }

  void OpenModel(rvOpenModel& _return, const std::string& sessionID, const std::string& modelName, const std::string& requestedAccess) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OpenModel(_return, sessionID, modelName, requestedAccess);
    }
    ifaces_[i]->OpenModel(_return, sessionID, modelName, requestedAccess);
    return;
  }

  void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseModel(_return, sessionID, modelName);
    }
    ifaces_[i]->CloseModel(_return, sessionID, modelName);
    return;
  }

  void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetThumbnailOfAModel(_return, sessionID, modelID, imageFile);
    }
    ifaces_[i]->SetThumbnailOfAModel(_return, sessionID, modelID, imageFile);
    return;
  }

  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetThumbnailOfAModel(_return, sessionID, modelID);
    }
    ifaces_[i]->GetThumbnailOfAModel(_return, sessionID, modelID);
    return;
  }

  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetElementOfPointsInSpace(_return, sessionID, modelName, points);
    }
    ifaces_[i]->GetElementOfPointsInSpace(_return, sessionID, modelName, points);
    return;
  }

  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBoundaryOfLocalMesh(_return, sessionID, modelID, meshID, analysisID, time_step);
    }
    ifaces_[i]->GetBoundaryOfLocalMesh(_return, sessionID, modelID, meshID, analysisID, time_step);
    return;
  }

  void GetResultFromVerticesID(rvGetResultFromVerticesID_B& _return, const std::string& sessionID, const std::string& modelID, const std::string& coordinatesSet, const std::vector<int64_t> & vertexIDs, const std::string& resultID, const double time_step, const std::string& analysisID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResultFromVerticesID(_return, sessionID, modelID, coordinatesSet, vertexIDs, resultID, time_step, analysisID);
    }
    ifaces_[i]->GetResultFromVerticesID(_return, sessionID, modelID, coordinatesSet, vertexIDs, resultID, time_step, analysisID);
    return;
  }

  void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfAnalyses(_return, sessionID, modelID);
    }
    ifaces_[i]->GetListOfAnalyses(_return, sessionID, modelID);
    return;
  }

  void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfTimeSteps(_return, sessionID, modelID, analysisID);
    }
    ifaces_[i]->GetListOfTimeSteps(_return, sessionID, modelID, analysisID);
    return;
  }

  void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfMeshes(_return, sessionID, modelID, analysisID, timeStep);
    }
    ifaces_[i]->GetListOfMeshes(_return, sessionID, modelID, analysisID, timeStep);
    return;
  }

};

} // namespace

#endif
