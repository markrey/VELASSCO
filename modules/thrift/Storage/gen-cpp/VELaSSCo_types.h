/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VELaSSCo_TYPES_H
#define VELaSSCo_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class FullyQualifiedModelName;

class rvGetListOfModels;

class rvOpenModel;

typedef struct _FullyQualifiedModelName__isset {
  _FullyQualifiedModelName__isset() : name(false), full_path(false), modelID(false) {}
  bool name :1;
  bool full_path :1;
  bool modelID :1;
} _FullyQualifiedModelName__isset;

class FullyQualifiedModelName {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  FullyQualifiedModelName(const FullyQualifiedModelName&);
  FullyQualifiedModelName& operator=(const FullyQualifiedModelName&);
  FullyQualifiedModelName() : name(), full_path(), modelID() {
  }

  virtual ~FullyQualifiedModelName() throw();
  std::string name;
  std::string full_path;
  std::string modelID;

  _FullyQualifiedModelName__isset __isset;

  void __set_name(const std::string& val);

  void __set_full_path(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const FullyQualifiedModelName & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(full_path == rhs.full_path))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const FullyQualifiedModelName &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FullyQualifiedModelName & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FullyQualifiedModelName& obj);
};

void swap(FullyQualifiedModelName &a, FullyQualifiedModelName &b);

typedef struct _rvGetListOfModels__isset {
  _rvGetListOfModels__isset() : status(false), report(false), models(false) {}
  bool status :1;
  bool report :1;
  bool models :1;
} _rvGetListOfModels__isset;

class rvGetListOfModels {
 public:

  static const char* ascii_fingerprint; // = "979D51C4D7C36D568BA276F63093B227";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x9D,0x51,0xC4,0xD7,0xC3,0x6D,0x56,0x8B,0xA2,0x76,0xF6,0x30,0x93,0xB2,0x27};

  rvGetListOfModels(const rvGetListOfModels&);
  rvGetListOfModels& operator=(const rvGetListOfModels&);
  rvGetListOfModels() : status(), report() {
  }

  virtual ~rvGetListOfModels() throw();
  std::string status;
  std::string report;
  std::vector<FullyQualifiedModelName>  models;

  _rvGetListOfModels__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_models(const std::vector<FullyQualifiedModelName> & val);

  bool operator == (const rvGetListOfModels & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(models == rhs.models))
      return false;
    return true;
  }
  bool operator != (const rvGetListOfModels &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetListOfModels & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const rvGetListOfModels& obj);
};

void swap(rvGetListOfModels &a, rvGetListOfModels &b);

typedef struct _rvOpenModel__isset {
  _rvOpenModel__isset() : status(false), report(false), modelID(false) {}
  bool status :1;
  bool report :1;
  bool modelID :1;
} _rvOpenModel__isset;

class rvOpenModel {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  rvOpenModel(const rvOpenModel&);
  rvOpenModel& operator=(const rvOpenModel&);
  rvOpenModel() : status(), report(), modelID() {
  }

  virtual ~rvOpenModel() throw();
  std::string status;
  std::string report;
  std::string modelID;

  _rvOpenModel__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const rvOpenModel & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const rvOpenModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvOpenModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const rvOpenModel& obj);
};

void swap(rvOpenModel &a, rvOpenModel &b);



#endif
