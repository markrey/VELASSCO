/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VELaSSCoSM_TYPES_H
#define VELaSSCoSM_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace VELaSSCoSM {

struct ElementShapeType {
  enum type {
    UnknownElement = 0,
    PointElement = 1,
    LineElement = 2,
    TriangleElement = 3,
    QuadrilateralElement = 4,
    TetrahedraElement = 5,
    HexahedraElement = 6,
    PrismElement = 7,
    PyramidElement = 8,
    SphereElement = 9,
    CircleElement = 10,
    ComplexParticleElement = 11
  };
};

extern const std::map<int, const char*> _ElementShapeType_VALUES_TO_NAMES;

typedef int64_t NodeID;

class ElementType;

class Point;

class Vertex;

class Element;

class ElementAttrib;

class ElementGroup;

class MeshInfo;

class Mesh;

class ResultInfo;

class ResultOnVertex;

class Triangle;

class rvGetElementOfPointsInSpace;

class rvGetBoundaryOfLocalMesh;

class rvGetResultFromVerticesID_A;

class VertexResult;

class rvGetResultFromVerticesID_B;

class ModelInfo;

class FullyQualifiedModelName;

class rvGetListOfModels;

class rvGetThumbnailOfAModel;

class rvOpenModel;

class rvGetListOfAnalyses;

class rvGetListOfTimeSteps;

class rvGetListOfMeshes;

class rvGetListOfResults;

class rvGetListOfVerticesFromMesh;

class rvGetResultFromVerticesID;

class rvGetCoordinatesAndElementsFromMesh;

typedef struct _ElementType__isset {
  _ElementType__isset() : shape(false), num_nodes(false) {}
  bool shape :1;
  bool num_nodes :1;
} _ElementType__isset;

class ElementType {
 public:

  ElementType(const ElementType&);
  ElementType& operator=(const ElementType&);
  ElementType() : shape((ElementShapeType::type)0), num_nodes(0) {
  }

  virtual ~ElementType() throw();
  ElementShapeType::type shape;
  int32_t num_nodes;

  _ElementType__isset __isset;

  void __set_shape(const ElementShapeType::type val);

  void __set_num_nodes(const int32_t val);

  bool operator == (const ElementType & rhs) const
  {
    if (!(shape == rhs.shape))
      return false;
    if (!(num_nodes == rhs.num_nodes))
      return false;
    return true;
  }
  bool operator != (const ElementType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElementType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ElementType &a, ElementType &b);

inline std::ostream& operator<<(std::ostream& out, const ElementType& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Point__isset {
  _Point__isset() : x(false), y(false), z(false) {}
  bool x :1;
  bool y :1;
  bool z :1;
} _Point__isset;

class Point {
 public:

  Point(const Point&);
  Point& operator=(const Point&);
  Point() : x(0), y(0), z(0) {
  }

  virtual ~Point() throw();
  double x;
  double y;
  double z;

  _Point__isset __isset;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const Point & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Point &a, Point &b);

inline std::ostream& operator<<(std::ostream& out, const Point& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Vertex__isset {
  _Vertex__isset() : id(false), x(false), y(false), z(false) {}
  bool id :1;
  bool x :1;
  bool y :1;
  bool z :1;
} _Vertex__isset;

class Vertex {
 public:

  Vertex(const Vertex&);
  Vertex& operator=(const Vertex&);
  Vertex() : id(0), x(0), y(0), z(0) {
  }

  virtual ~Vertex() throw();
  NodeID id;
  double x;
  double y;
  double z;

  _Vertex__isset __isset;

  void __set_id(const NodeID val);

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const Vertex & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Vertex &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Vertex & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Vertex &a, Vertex &b);

inline std::ostream& operator<<(std::ostream& out, const Vertex& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Element__isset {
  _Element__isset() : id(false), nodes_ids(false) {}
  bool id :1;
  bool nodes_ids :1;
} _Element__isset;

class Element {
 public:

  Element(const Element&);
  Element& operator=(const Element&);
  Element() : id(0) {
  }

  virtual ~Element() throw();
  int64_t id;
  std::vector<NodeID>  nodes_ids;

  _Element__isset __isset;

  void __set_id(const int64_t val);

  void __set_nodes_ids(const std::vector<NodeID> & val);

  bool operator == (const Element & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(nodes_ids == rhs.nodes_ids))
      return false;
    return true;
  }
  bool operator != (const Element &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Element & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Element &a, Element &b);

inline std::ostream& operator<<(std::ostream& out, const Element& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ElementAttrib__isset {
  _ElementAttrib__isset() : id(false), name(false), value(false) {}
  bool id :1;
  bool name :1;
  bool value :1;
} _ElementAttrib__isset;

class ElementAttrib {
 public:

  ElementAttrib(const ElementAttrib&);
  ElementAttrib& operator=(const ElementAttrib&);
  ElementAttrib() : id(0), name() {
  }

  virtual ~ElementAttrib() throw();
  int64_t id;
  std::string name;
  std::vector<double>  value;

  _ElementAttrib__isset __isset;

  void __set_id(const int64_t val);

  void __set_name(const std::string& val);

  void __set_value(const std::vector<double> & val);

  bool operator == (const ElementAttrib & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ElementAttrib &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElementAttrib & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ElementAttrib &a, ElementAttrib &b);

inline std::ostream& operator<<(std::ostream& out, const ElementAttrib& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ElementGroup__isset {
  _ElementGroup__isset() : id(false), group_id(false) {}
  bool id :1;
  bool group_id :1;
} _ElementGroup__isset;

class ElementGroup {
 public:

  ElementGroup(const ElementGroup&);
  ElementGroup& operator=(const ElementGroup&);
  ElementGroup() : id(0), group_id(0) {
  }

  virtual ~ElementGroup() throw();
  int64_t id;
  int64_t group_id;

  _ElementGroup__isset __isset;

  void __set_id(const int64_t val);

  void __set_group_id(const int64_t val);

  bool operator == (const ElementGroup & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(group_id == rhs.group_id))
      return false;
    return true;
  }
  bool operator != (const ElementGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElementGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ElementGroup &a, ElementGroup &b);

inline std::ostream& operator<<(std::ostream& out, const ElementGroup& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MeshInfo__isset {
  _MeshInfo__isset() : name(false), elementType(false), nVertices(false), nElements(false), meshUnits(false), meshColor(false), meshNumber(false), coordsName(false) {}
  bool name :1;
  bool elementType :1;
  bool nVertices :1;
  bool nElements :1;
  bool meshUnits :1;
  bool meshColor :1;
  bool meshNumber :1;
  bool coordsName :1;
} _MeshInfo__isset;

class MeshInfo {
 public:

  MeshInfo(const MeshInfo&);
  MeshInfo& operator=(const MeshInfo&);
  MeshInfo() : name(), nVertices(0), nElements(0), meshUnits(), meshColor(), meshNumber(0), coordsName() {
  }

  virtual ~MeshInfo() throw();
  std::string name;
  ElementType elementType;
  int64_t nVertices;
  int64_t nElements;
  std::string meshUnits;
  std::string meshColor;
  int32_t meshNumber;
  std::string coordsName;

  _MeshInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_elementType(const ElementType& val);

  void __set_nVertices(const int64_t val);

  void __set_nElements(const int64_t val);

  void __set_meshUnits(const std::string& val);

  void __set_meshColor(const std::string& val);

  void __set_meshNumber(const int32_t val);

  void __set_coordsName(const std::string& val);

  bool operator == (const MeshInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(elementType == rhs.elementType))
      return false;
    if (!(nVertices == rhs.nVertices))
      return false;
    if (!(nElements == rhs.nElements))
      return false;
    if (!(meshUnits == rhs.meshUnits))
      return false;
    if (!(meshColor == rhs.meshColor))
      return false;
    if (!(meshNumber == rhs.meshNumber))
      return false;
    if (!(coordsName == rhs.coordsName))
      return false;
    return true;
  }
  bool operator != (const MeshInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeshInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MeshInfo &a, MeshInfo &b);

inline std::ostream& operator<<(std::ostream& out, const MeshInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Mesh__isset {
  _Mesh__isset() : name(false), numberOfVertices(false), dimension(false), type(false), nodes(false), elements(false) {}
  bool name :1;
  bool numberOfVertices :1;
  bool dimension :1;
  bool type :1;
  bool nodes :1;
  bool elements :1;
} _Mesh__isset;

class Mesh {
 public:

  Mesh(const Mesh&);
  Mesh& operator=(const Mesh&);
  Mesh() : name(), numberOfVertices(0), dimension(0) {
  }

  virtual ~Mesh() throw();
  std::string name;
  int64_t numberOfVertices;
  int64_t dimension;
  ElementType type;
  std::vector<Vertex>  nodes;
  std::vector<Element>  elements;

  _Mesh__isset __isset;

  void __set_name(const std::string& val);

  void __set_numberOfVertices(const int64_t val);

  void __set_dimension(const int64_t val);

  void __set_type(const ElementType& val);

  void __set_nodes(const std::vector<Vertex> & val);

  void __set_elements(const std::vector<Element> & val);

  bool operator == (const Mesh & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(numberOfVertices == rhs.numberOfVertices))
      return false;
    if (!(dimension == rhs.dimension))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(nodes == rhs.nodes))
      return false;
    if (!(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const Mesh &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mesh & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Mesh &a, Mesh &b);

inline std::ostream& operator<<(std::ostream& out, const Mesh& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ResultInfo__isset {
  _ResultInfo__isset() : name(false), type(false), numberOfComponents(false), componentNames(false), location(false), gaussPointName(false), coordinatesName(false), units(false), resultNumber(false) {}
  bool name :1;
  bool type :1;
  bool numberOfComponents :1;
  bool componentNames :1;
  bool location :1;
  bool gaussPointName :1;
  bool coordinatesName :1;
  bool units :1;
  bool resultNumber :1;
} _ResultInfo__isset;

class ResultInfo {
 public:

  ResultInfo(const ResultInfo&);
  ResultInfo& operator=(const ResultInfo&);
  ResultInfo() : name(), type(), numberOfComponents(0), location(), gaussPointName(), coordinatesName(), units(), resultNumber(0) {
  }

  virtual ~ResultInfo() throw();
  std::string name;
  std::string type;
  int32_t numberOfComponents;
  std::vector<std::string>  componentNames;
  std::string location;
  std::string gaussPointName;
  std::string coordinatesName;
  std::string units;
  int32_t resultNumber;

  _ResultInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  void __set_numberOfComponents(const int32_t val);

  void __set_componentNames(const std::vector<std::string> & val);

  void __set_location(const std::string& val);

  void __set_gaussPointName(const std::string& val);

  void __set_coordinatesName(const std::string& val);

  void __set_units(const std::string& val);

  void __set_resultNumber(const int32_t val);

  bool operator == (const ResultInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(numberOfComponents == rhs.numberOfComponents))
      return false;
    if (!(componentNames == rhs.componentNames))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(gaussPointName == rhs.gaussPointName))
      return false;
    if (!(coordinatesName == rhs.coordinatesName))
      return false;
    if (!(units == rhs.units))
      return false;
    if (!(resultNumber == rhs.resultNumber))
      return false;
    return true;
  }
  bool operator != (const ResultInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResultInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResultInfo &a, ResultInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ResultInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ResultOnVertex__isset {
  _ResultOnVertex__isset() : id(false), value(false), bvalue(false) {}
  bool id :1;
  bool value :1;
  bool bvalue :1;
} _ResultOnVertex__isset;

class ResultOnVertex {
 public:

  ResultOnVertex(const ResultOnVertex&);
  ResultOnVertex& operator=(const ResultOnVertex&);
  ResultOnVertex() : id(0), bvalue() {
  }

  virtual ~ResultOnVertex() throw();
  int64_t id;
  std::vector<double>  value;
  std::string bvalue;

  _ResultOnVertex__isset __isset;

  void __set_id(const int64_t val);

  void __set_value(const std::vector<double> & val);

  void __set_bvalue(const std::string& val);

  bool operator == (const ResultOnVertex & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(bvalue == rhs.bvalue))
      return false;
    return true;
  }
  bool operator != (const ResultOnVertex &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResultOnVertex & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResultOnVertex &a, ResultOnVertex &b);

inline std::ostream& operator<<(std::ostream& out, const ResultOnVertex& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Triangle__isset {
  _Triangle__isset() : nodes(false) {}
  bool nodes :1;
} _Triangle__isset;

class Triangle {
 public:

  Triangle(const Triangle&);
  Triangle& operator=(const Triangle&);
  Triangle() {
  }

  virtual ~Triangle() throw();
  std::vector<NodeID>  nodes;

  _Triangle__isset __isset;

  void __set_nodes(const std::vector<NodeID> & val);

  bool operator == (const Triangle & rhs) const
  {
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const Triangle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Triangle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Triangle &a, Triangle &b);

inline std::ostream& operator<<(std::ostream& out, const Triangle& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetElementOfPointsInSpace__isset {
  _rvGetElementOfPointsInSpace__isset() : status(false), report(false), elements(false) {}
  bool status :1;
  bool report :1;
  bool elements :1;
} _rvGetElementOfPointsInSpace__isset;

class rvGetElementOfPointsInSpace {
 public:

  rvGetElementOfPointsInSpace(const rvGetElementOfPointsInSpace&);
  rvGetElementOfPointsInSpace& operator=(const rvGetElementOfPointsInSpace&);
  rvGetElementOfPointsInSpace() : status(), report() {
  }

  virtual ~rvGetElementOfPointsInSpace() throw();
  std::string status;
  std::string report;
  std::vector<Element>  elements;

  _rvGetElementOfPointsInSpace__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_elements(const std::vector<Element> & val);

  bool operator == (const rvGetElementOfPointsInSpace & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const rvGetElementOfPointsInSpace &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetElementOfPointsInSpace & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetElementOfPointsInSpace &a, rvGetElementOfPointsInSpace &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetElementOfPointsInSpace& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetBoundaryOfLocalMesh__isset {
  _rvGetBoundaryOfLocalMesh__isset() : status(false), report(false), elements(false) {}
  bool status :1;
  bool report :1;
  bool elements :1;
} _rvGetBoundaryOfLocalMesh__isset;

class rvGetBoundaryOfLocalMesh {
 public:

  rvGetBoundaryOfLocalMesh(const rvGetBoundaryOfLocalMesh&);
  rvGetBoundaryOfLocalMesh& operator=(const rvGetBoundaryOfLocalMesh&);
  rvGetBoundaryOfLocalMesh() : status(), report() {
  }

  virtual ~rvGetBoundaryOfLocalMesh() throw();
  std::string status;
  std::string report;
  std::vector<Triangle>  elements;

  _rvGetBoundaryOfLocalMesh__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_elements(const std::vector<Triangle> & val);

  bool operator == (const rvGetBoundaryOfLocalMesh & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const rvGetBoundaryOfLocalMesh &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetBoundaryOfLocalMesh & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetBoundaryOfLocalMesh &a, rvGetBoundaryOfLocalMesh &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetBoundaryOfLocalMesh& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetResultFromVerticesID_A__isset {
  _rvGetResultFromVerticesID_A__isset() : status(false), report(false), nVertices(false), nValuesPrVertex(false), vertexIDs(false), resultValues(false) {}
  bool status :1;
  bool report :1;
  bool nVertices :1;
  bool nValuesPrVertex :1;
  bool vertexIDs :1;
  bool resultValues :1;
} _rvGetResultFromVerticesID_A__isset;

class rvGetResultFromVerticesID_A {
 public:

  rvGetResultFromVerticesID_A(const rvGetResultFromVerticesID_A&);
  rvGetResultFromVerticesID_A& operator=(const rvGetResultFromVerticesID_A&);
  rvGetResultFromVerticesID_A() : status(), report(), nVertices(0), nValuesPrVertex(0) {
  }

  virtual ~rvGetResultFromVerticesID_A() throw();
  std::string status;
  std::string report;
  int64_t nVertices;
  int64_t nValuesPrVertex;
  std::vector<int64_t>  vertexIDs;
  std::vector<double>  resultValues;

  _rvGetResultFromVerticesID_A__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_nVertices(const int64_t val);

  void __set_nValuesPrVertex(const int64_t val);

  void __set_vertexIDs(const std::vector<int64_t> & val);

  void __set_resultValues(const std::vector<double> & val);

  bool operator == (const rvGetResultFromVerticesID_A & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(nVertices == rhs.nVertices))
      return false;
    if (!(nValuesPrVertex == rhs.nValuesPrVertex))
      return false;
    if (!(vertexIDs == rhs.vertexIDs))
      return false;
    if (!(resultValues == rhs.resultValues))
      return false;
    return true;
  }
  bool operator != (const rvGetResultFromVerticesID_A &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetResultFromVerticesID_A & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetResultFromVerticesID_A &a, rvGetResultFromVerticesID_A &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_A& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _VertexResult__isset {
  _VertexResult__isset() : vertexID(false), resuls(false) {}
  bool vertexID :1;
  bool resuls :1;
} _VertexResult__isset;

class VertexResult {
 public:

  VertexResult(const VertexResult&);
  VertexResult& operator=(const VertexResult&);
  VertexResult() : vertexID(0) {
  }

  virtual ~VertexResult() throw();
  int64_t vertexID;
  std::vector<double>  resuls;

  _VertexResult__isset __isset;

  void __set_vertexID(const int64_t val);

  void __set_resuls(const std::vector<double> & val);

  bool operator == (const VertexResult & rhs) const
  {
    if (!(vertexID == rhs.vertexID))
      return false;
    if (!(resuls == rhs.resuls))
      return false;
    return true;
  }
  bool operator != (const VertexResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VertexResult &a, VertexResult &b);

inline std::ostream& operator<<(std::ostream& out, const VertexResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetResultFromVerticesID_B__isset {
  _rvGetResultFromVerticesID_B__isset() : status(false), report(false), vertexResults(false) {}
  bool status :1;
  bool report :1;
  bool vertexResults :1;
} _rvGetResultFromVerticesID_B__isset;

class rvGetResultFromVerticesID_B {
 public:

  rvGetResultFromVerticesID_B(const rvGetResultFromVerticesID_B&);
  rvGetResultFromVerticesID_B& operator=(const rvGetResultFromVerticesID_B&);
  rvGetResultFromVerticesID_B() : status(), report() {
  }

  virtual ~rvGetResultFromVerticesID_B() throw();
  std::string status;
  std::string report;
  std::vector<VertexResult>  vertexResults;

  _rvGetResultFromVerticesID_B__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_vertexResults(const std::vector<VertexResult> & val);

  bool operator == (const rvGetResultFromVerticesID_B & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(vertexResults == rhs.vertexResults))
      return false;
    return true;
  }
  bool operator != (const rvGetResultFromVerticesID_B &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetResultFromVerticesID_B & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetResultFromVerticesID_B &a, rvGetResultFromVerticesID_B &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_B& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ModelInfo__isset {
  _ModelInfo__isset() : name(false), repository(false), owner(false), created(false), accessRights(false), administrators(false), underlyingSchema(false), nObjectsInModel(false), dataSize(false), stringEncoding(false), options(false) {}
  bool name :1;
  bool repository :1;
  bool owner :1;
  bool created :1;
  bool accessRights :1;
  bool administrators :1;
  bool underlyingSchema :1;
  bool nObjectsInModel :1;
  bool dataSize :1;
  bool stringEncoding :1;
  bool options :1;
} _ModelInfo__isset;

class ModelInfo {
 public:

  ModelInfo(const ModelInfo&);
  ModelInfo& operator=(const ModelInfo&);
  ModelInfo() : name(), repository(), owner(), created(), accessRights(), administrators(), underlyingSchema(), nObjectsInModel(0), dataSize(0), stringEncoding(), options() {
  }

  virtual ~ModelInfo() throw();
  std::string name;
  std::string repository;
  std::string owner;
  std::string created;
  std::string accessRights;
  std::string administrators;
  std::string underlyingSchema;
  int64_t nObjectsInModel;
  int64_t dataSize;
  std::string stringEncoding;
  std::string options;

  _ModelInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_repository(const std::string& val);

  void __set_owner(const std::string& val);

  void __set_created(const std::string& val);

  void __set_accessRights(const std::string& val);

  void __set_administrators(const std::string& val);

  void __set_underlyingSchema(const std::string& val);

  void __set_nObjectsInModel(const int64_t val);

  void __set_dataSize(const int64_t val);

  void __set_stringEncoding(const std::string& val);

  void __set_options(const std::string& val);

  bool operator == (const ModelInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(repository == rhs.repository))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(created == rhs.created))
      return false;
    if (!(accessRights == rhs.accessRights))
      return false;
    if (!(administrators == rhs.administrators))
      return false;
    if (!(underlyingSchema == rhs.underlyingSchema))
      return false;
    if (!(nObjectsInModel == rhs.nObjectsInModel))
      return false;
    if (!(dataSize == rhs.dataSize))
      return false;
    if (!(stringEncoding == rhs.stringEncoding))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const ModelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ModelInfo &a, ModelInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ModelInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FullyQualifiedModelName__isset {
  _FullyQualifiedModelName__isset() : name(false), full_path(false), modelID(false), location(false) {}
  bool name :1;
  bool full_path :1;
  bool modelID :1;
  bool location :1;
} _FullyQualifiedModelName__isset;

class FullyQualifiedModelName {
 public:

  FullyQualifiedModelName(const FullyQualifiedModelName&);
  FullyQualifiedModelName& operator=(const FullyQualifiedModelName&);
  FullyQualifiedModelName() : name(), full_path(), modelID(), location() {
  }

  virtual ~FullyQualifiedModelName() throw();
  std::string name;
  std::string full_path;
  std::string modelID;
  std::string location;

  _FullyQualifiedModelName__isset __isset;

  void __set_name(const std::string& val);

  void __set_full_path(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_location(const std::string& val);

  bool operator == (const FullyQualifiedModelName & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(full_path == rhs.full_path))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const FullyQualifiedModelName &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FullyQualifiedModelName & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FullyQualifiedModelName &a, FullyQualifiedModelName &b);

inline std::ostream& operator<<(std::ostream& out, const FullyQualifiedModelName& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetListOfModels__isset {
  _rvGetListOfModels__isset() : status(false), report(false), models(false) {}
  bool status :1;
  bool report :1;
  bool models :1;
} _rvGetListOfModels__isset;

class rvGetListOfModels {
 public:

  rvGetListOfModels(const rvGetListOfModels&);
  rvGetListOfModels& operator=(const rvGetListOfModels&);
  rvGetListOfModels() : status(), report() {
  }

  virtual ~rvGetListOfModels() throw();
  std::string status;
  std::string report;
  std::vector<FullyQualifiedModelName>  models;

  _rvGetListOfModels__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_models(const std::vector<FullyQualifiedModelName> & val);

  bool operator == (const rvGetListOfModels & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(models == rhs.models))
      return false;
    return true;
  }
  bool operator != (const rvGetListOfModels &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetListOfModels & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetListOfModels &a, rvGetListOfModels &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetListOfModels& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetThumbnailOfAModel__isset {
  _rvGetThumbnailOfAModel__isset() : status(false), report(false), imageFile(false) {}
  bool status :1;
  bool report :1;
  bool imageFile :1;
} _rvGetThumbnailOfAModel__isset;

class rvGetThumbnailOfAModel {
 public:

  rvGetThumbnailOfAModel(const rvGetThumbnailOfAModel&);
  rvGetThumbnailOfAModel& operator=(const rvGetThumbnailOfAModel&);
  rvGetThumbnailOfAModel() : status(), report(), imageFile() {
  }

  virtual ~rvGetThumbnailOfAModel() throw();
  std::string status;
  std::string report;
  std::string imageFile;

  _rvGetThumbnailOfAModel__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_imageFile(const std::string& val);

  bool operator == (const rvGetThumbnailOfAModel & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(imageFile == rhs.imageFile))
      return false;
    return true;
  }
  bool operator != (const rvGetThumbnailOfAModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetThumbnailOfAModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetThumbnailOfAModel &a, rvGetThumbnailOfAModel &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetThumbnailOfAModel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvOpenModel__isset {
  _rvOpenModel__isset() : status(false), report(false), modelID(false), model_info(false) {}
  bool status :1;
  bool report :1;
  bool modelID :1;
  bool model_info :1;
} _rvOpenModel__isset;

class rvOpenModel {
 public:

  rvOpenModel(const rvOpenModel&);
  rvOpenModel& operator=(const rvOpenModel&);
  rvOpenModel() : status(), report(), modelID() {
  }

  virtual ~rvOpenModel() throw();
  std::string status;
  std::string report;
  std::string modelID;
  FullyQualifiedModelName model_info;

  _rvOpenModel__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_model_info(const FullyQualifiedModelName& val);

  bool operator == (const rvOpenModel & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(model_info == rhs.model_info))
      return false;
    return true;
  }
  bool operator != (const rvOpenModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvOpenModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvOpenModel &a, rvOpenModel &b);

inline std::ostream& operator<<(std::ostream& out, const rvOpenModel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetListOfAnalyses__isset {
  _rvGetListOfAnalyses__isset() : status(false), report(false), analyses(false) {}
  bool status :1;
  bool report :1;
  bool analyses :1;
} _rvGetListOfAnalyses__isset;

class rvGetListOfAnalyses {
 public:

  rvGetListOfAnalyses(const rvGetListOfAnalyses&);
  rvGetListOfAnalyses& operator=(const rvGetListOfAnalyses&);
  rvGetListOfAnalyses() : status(), report() {
  }

  virtual ~rvGetListOfAnalyses() throw();
  std::string status;
  std::string report;
  std::vector<std::string>  analyses;

  _rvGetListOfAnalyses__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_analyses(const std::vector<std::string> & val);

  bool operator == (const rvGetListOfAnalyses & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(analyses == rhs.analyses))
      return false;
    return true;
  }
  bool operator != (const rvGetListOfAnalyses &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetListOfAnalyses & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetListOfAnalyses &a, rvGetListOfAnalyses &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetListOfAnalyses& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetListOfTimeSteps__isset {
  _rvGetListOfTimeSteps__isset() : status(false), report(false), time_steps(false) {}
  bool status :1;
  bool report :1;
  bool time_steps :1;
} _rvGetListOfTimeSteps__isset;

class rvGetListOfTimeSteps {
 public:

  rvGetListOfTimeSteps(const rvGetListOfTimeSteps&);
  rvGetListOfTimeSteps& operator=(const rvGetListOfTimeSteps&);
  rvGetListOfTimeSteps() : status(), report() {
  }

  virtual ~rvGetListOfTimeSteps() throw();
  std::string status;
  std::string report;
  std::vector<double>  time_steps;

  _rvGetListOfTimeSteps__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_time_steps(const std::vector<double> & val);

  bool operator == (const rvGetListOfTimeSteps & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(time_steps == rhs.time_steps))
      return false;
    return true;
  }
  bool operator != (const rvGetListOfTimeSteps &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetListOfTimeSteps & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetListOfTimeSteps &a, rvGetListOfTimeSteps &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetListOfTimeSteps& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetListOfMeshes__isset {
  _rvGetListOfMeshes__isset() : status(false), report(false), meshInfos(false) {}
  bool status :1;
  bool report :1;
  bool meshInfos :1;
} _rvGetListOfMeshes__isset;

class rvGetListOfMeshes {
 public:

  rvGetListOfMeshes(const rvGetListOfMeshes&);
  rvGetListOfMeshes& operator=(const rvGetListOfMeshes&);
  rvGetListOfMeshes() : status(), report() {
  }

  virtual ~rvGetListOfMeshes() throw();
  std::string status;
  std::string report;
  std::vector<MeshInfo>  meshInfos;

  _rvGetListOfMeshes__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_meshInfos(const std::vector<MeshInfo> & val);

  bool operator == (const rvGetListOfMeshes & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(meshInfos == rhs.meshInfos))
      return false;
    return true;
  }
  bool operator != (const rvGetListOfMeshes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetListOfMeshes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetListOfMeshes &a, rvGetListOfMeshes &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetListOfMeshes& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetListOfResults__isset {
  _rvGetListOfResults__isset() : status(false), report(false), result_list(false) {}
  bool status :1;
  bool report :1;
  bool result_list :1;
} _rvGetListOfResults__isset;

class rvGetListOfResults {
 public:

  rvGetListOfResults(const rvGetListOfResults&);
  rvGetListOfResults& operator=(const rvGetListOfResults&);
  rvGetListOfResults() : status(), report() {
  }

  virtual ~rvGetListOfResults() throw();
  std::string status;
  std::string report;
  std::vector<ResultInfo>  result_list;

  _rvGetListOfResults__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_result_list(const std::vector<ResultInfo> & val);

  bool operator == (const rvGetListOfResults & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(result_list == rhs.result_list))
      return false;
    return true;
  }
  bool operator != (const rvGetListOfResults &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetListOfResults & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetListOfResults &a, rvGetListOfResults &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetListOfResults& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetListOfVerticesFromMesh__isset {
  _rvGetListOfVerticesFromMesh__isset() : status(false), report(false), vertex_list(false) {}
  bool status :1;
  bool report :1;
  bool vertex_list :1;
} _rvGetListOfVerticesFromMesh__isset;

class rvGetListOfVerticesFromMesh {
 public:

  rvGetListOfVerticesFromMesh(const rvGetListOfVerticesFromMesh&);
  rvGetListOfVerticesFromMesh& operator=(const rvGetListOfVerticesFromMesh&);
  rvGetListOfVerticesFromMesh() : status(), report() {
  }

  virtual ~rvGetListOfVerticesFromMesh() throw();
  std::string status;
  std::string report;
  std::vector<Vertex>  vertex_list;

  _rvGetListOfVerticesFromMesh__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_vertex_list(const std::vector<Vertex> & val);

  bool operator == (const rvGetListOfVerticesFromMesh & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(vertex_list == rhs.vertex_list))
      return false;
    return true;
  }
  bool operator != (const rvGetListOfVerticesFromMesh &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetListOfVerticesFromMesh & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetListOfVerticesFromMesh &a, rvGetListOfVerticesFromMesh &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetListOfVerticesFromMesh& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetResultFromVerticesID__isset {
  _rvGetResultFromVerticesID__isset() : status(false), report(false), result_list(false) {}
  bool status :1;
  bool report :1;
  bool result_list :1;
} _rvGetResultFromVerticesID__isset;

class rvGetResultFromVerticesID {
 public:

  rvGetResultFromVerticesID(const rvGetResultFromVerticesID&);
  rvGetResultFromVerticesID& operator=(const rvGetResultFromVerticesID&);
  rvGetResultFromVerticesID() : status(), report() {
  }

  virtual ~rvGetResultFromVerticesID() throw();
  std::string status;
  std::string report;
  std::vector<ResultOnVertex>  result_list;

  _rvGetResultFromVerticesID__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_result_list(const std::vector<ResultOnVertex> & val);

  bool operator == (const rvGetResultFromVerticesID & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(result_list == rhs.result_list))
      return false;
    return true;
  }
  bool operator != (const rvGetResultFromVerticesID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetResultFromVerticesID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetResultFromVerticesID &a, rvGetResultFromVerticesID &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _rvGetCoordinatesAndElementsFromMesh__isset {
  _rvGetCoordinatesAndElementsFromMesh__isset() : status(false), report(false), vertex_list(false), element_list(false), element_attrib_list(false), element_group_info_list(false) {}
  bool status :1;
  bool report :1;
  bool vertex_list :1;
  bool element_list :1;
  bool element_attrib_list :1;
  bool element_group_info_list :1;
} _rvGetCoordinatesAndElementsFromMesh__isset;

class rvGetCoordinatesAndElementsFromMesh {
 public:

  rvGetCoordinatesAndElementsFromMesh(const rvGetCoordinatesAndElementsFromMesh&);
  rvGetCoordinatesAndElementsFromMesh& operator=(const rvGetCoordinatesAndElementsFromMesh&);
  rvGetCoordinatesAndElementsFromMesh() : status(), report() {
  }

  virtual ~rvGetCoordinatesAndElementsFromMesh() throw();
  std::string status;
  std::string report;
  std::vector<Vertex>  vertex_list;
  std::vector<Element>  element_list;
  std::vector<ElementAttrib>  element_attrib_list;
  std::vector<ElementGroup>  element_group_info_list;

  _rvGetCoordinatesAndElementsFromMesh__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_vertex_list(const std::vector<Vertex> & val);

  void __set_element_list(const std::vector<Element> & val);

  void __set_element_attrib_list(const std::vector<ElementAttrib> & val);

  void __set_element_group_info_list(const std::vector<ElementGroup> & val);

  bool operator == (const rvGetCoordinatesAndElementsFromMesh & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(vertex_list == rhs.vertex_list))
      return false;
    if (!(element_list == rhs.element_list))
      return false;
    if (!(element_attrib_list == rhs.element_attrib_list))
      return false;
    if (!(element_group_info_list == rhs.element_group_info_list))
      return false;
    return true;
  }
  bool operator != (const rvGetCoordinatesAndElementsFromMesh &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetCoordinatesAndElementsFromMesh & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rvGetCoordinatesAndElementsFromMesh &a, rvGetCoordinatesAndElementsFromMesh &b);

inline std::ostream& operator<<(std::ostream& out, const rvGetCoordinatesAndElementsFromMesh& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
