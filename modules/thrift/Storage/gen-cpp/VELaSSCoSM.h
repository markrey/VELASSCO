/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VELaSSCoSM_H
#define VELaSSCoSM_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "VELaSSCoSM_types.h"

namespace VELaSSCoSM {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class VELaSSCoSMIf {
 public:
  virtual ~VELaSSCoSMIf() {}

  /**
   * Return the status of the different services
   * which run on the Data Layer.
   */
  virtual void statusDL(std::string& _return) = 0;

  /**
   * Data Query operations
   * 
   * @param sessionID
   * @param model_group_qualifier
   * @param model_name_pattern
   */
  virtual void GetListOfModelNames(rvGetListOfModels& _return, const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern) = 0;
  virtual void FindModel(rvOpenModel& _return, const std::string& sessionID, const std::string& unique_model_name_pattern, const std::string& requested_access) = 0;

  /**
   * Return the status of the different services
   * which run on the Data Layer.
   * @return string - returns a structured list of avialbe vertices,
   * with the attached list of double
   * if errors occur the contect is also returned here?
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param timeStep
   * @param resultID
   * @param listOfVertices
   */
  virtual void GetResultFromVerticesID(rvGetResultFromVerticesID& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::vector<int64_t> & listOfVertices) = 0;

  /**
   * Return the coordinates and elements of a model's mesh.
   * @return string - returns a structured list of vertices and elements of a model's mesh.
   * if errors occur the contect is also returned here?
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param timeStep
   * @param meshInfo
   */
  virtual void GetCoordinatesAndElementsFromMesh(rvGetCoordinatesAndElementsFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const MeshInfo& meshInfo) = 0;

  /**
   * Stop Data Layer
   */
  virtual void stopAll() = 0;

  /**
   * as of OP-22.117
   * Returns a list of meshes present for the given time-step of that analysis.
   * If analysis == "" and step-value == -1 then the list will be of the 'static' meshes.
   * If analysis != "" and step-value != -1 then the list will be of the 'dynamic' meshes
   * that are present on that step-values of that analysis.
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param stepValue
   */
  virtual void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue) = 0;

  /**
   * as of OP-22.112
   * Retrieves the list of time steps for a given model and analysis.
   * 
   * @param sessionID
   * @param modelID
   */
  virtual void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID) = 0;

  /**
   * Retrieves the list of time steps for a given model and analysis.
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   */
  virtual void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID) = 0;

  /**
   * Retrieves the list of results for a given model, analysis and step-value
   * as of OP-22.115
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param stepValue
   */
  virtual void GetListOfResultsFromTimeStepAndAnalysis(rvGetListOfResults& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue) = 0;

  /**
   * Extract a list of vertices from the open model and the selected meshID
   * as of OP-22.116
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param stepValue
   * @param meshID
   */
  virtual void GetListOfVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID) = 0;
  virtual void GetListOfSelectedVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID, const std::vector<int64_t> & listOfVerticesID) = 0;

  /**
   * returns a session if if the user exists with the specified password and the specified role or an empty role.
   * 
   * @param user_name
   * @param role
   * @param password
   */
  virtual void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) = 0;

  /**
   * Stop access to the system by a given session id and release all resources held by that session
   * 
   * @param sessionID
   */
  virtual void UserLogout(std::string& _return, const std::string& sessionID) = 0;

  /**
   * Description: Removes the possibility to access a model via a previously assigned
   * GUID (OpenModel). Corresponding housekeeping is wrapped up.
   * 
   * @param sessionID
   * @param modelID
   */
  virtual void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelID) = 0;

  /**
   * Description: Store a new thumbnail of a model
   * 
   * @param sessionID
   * @param modelID
   * @param imageFile
   */
  virtual void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile) = 0;

  /**
   * Description: Return thumbnail of a model.
   * 
   * @param sessionID
   * @param modelID
   */
  virtual void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID) = 0;

  /**
   * For each point in the input parameter points, the method returns data about the element that contains the point.
   * The number of elements in the returned list of elements shall be the same as the number of points in the input parameter.
   * If the method does not find an element for a point it shall return a dummy element with id equal to -1.
   * 
   * @param sessionID
   * @param modelName
   * @param points
   */
  virtual void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points) = 0;

  /**
   * GetBoundaryOfLocalMesh will get the partial tetrahedral elements, calculate and output the unique triangles,
   * i.e. triangles that are not shared between two or more elements.
   * 
   * @param sessionID
   * @param modelID
   * @param meshID
   * @param analysisID
   * @param time_step
   */
  virtual void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step) = 0;
};

class VELaSSCoSMIfFactory {
 public:
  typedef VELaSSCoSMIf Handler;

  virtual ~VELaSSCoSMIfFactory() {}

  virtual VELaSSCoSMIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VELaSSCoSMIf* /* handler */) = 0;
};

class VELaSSCoSMIfSingletonFactory : virtual public VELaSSCoSMIfFactory {
 public:
  VELaSSCoSMIfSingletonFactory(const boost::shared_ptr<VELaSSCoSMIf>& iface) : iface_(iface) {}
  virtual ~VELaSSCoSMIfSingletonFactory() {}

  virtual VELaSSCoSMIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VELaSSCoSMIf* /* handler */) {}

 protected:
  boost::shared_ptr<VELaSSCoSMIf> iface_;
};

class VELaSSCoSMNull : virtual public VELaSSCoSMIf {
 public:
  virtual ~VELaSSCoSMNull() {}
  void statusDL(std::string& /* _return */) {
    return;
  }
  void GetListOfModelNames(rvGetListOfModels& /* _return */, const std::string& /* sessionID */, const std::string& /* model_group_qualifier */, const std::string& /* model_name_pattern */) {
    return;
  }
  void FindModel(rvOpenModel& /* _return */, const std::string& /* sessionID */, const std::string& /* unique_model_name_pattern */, const std::string& /* requested_access */) {
    return;
  }
  void GetResultFromVerticesID(rvGetResultFromVerticesID& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* timeStep */, const std::string& /* resultID */, const std::vector<int64_t> & /* listOfVertices */) {
    return;
  }
  void GetCoordinatesAndElementsFromMesh(rvGetCoordinatesAndElementsFromMesh& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* timeStep */, const MeshInfo& /* meshInfo */) {
    return;
  }
  void stopAll() {
    return;
  }
  void GetListOfMeshes(rvGetListOfMeshes& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* stepValue */) {
    return;
  }
  void GetListOfAnalyses(rvGetListOfAnalyses& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */) {
    return;
  }
  void GetListOfTimeSteps(rvGetListOfTimeSteps& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */) {
    return;
  }
  void GetListOfResultsFromTimeStepAndAnalysis(rvGetListOfResults& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* stepValue */) {
    return;
  }
  void GetListOfVerticesFromMesh(rvGetListOfVerticesFromMesh& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* stepValue */, const int32_t /* meshID */) {
    return;
  }
  void GetListOfSelectedVerticesFromMesh(rvGetListOfVerticesFromMesh& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* stepValue */, const int32_t /* meshID */, const std::vector<int64_t> & /* listOfVerticesID */) {
    return;
  }
  void UserLogin(std::string& /* _return */, const std::string& /* user_name */, const std::string& /* role */, const std::string& /* password */) {
    return;
  }
  void UserLogout(std::string& /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void CloseModel(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */) {
    return;
  }
  void SetThumbnailOfAModel(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* imageFile */) {
    return;
  }
  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */) {
    return;
  }
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& /* _return */, const std::string& /* sessionID */, const std::string& /* modelName */, const std::vector<Point> & /* points */) {
    return;
  }
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* meshID */, const std::string& /* analysisID */, const double /* time_step */) {
    return;
  }
};


class VELaSSCoSM_statusDL_args {
 public:

  VELaSSCoSM_statusDL_args(const VELaSSCoSM_statusDL_args&);
  VELaSSCoSM_statusDL_args& operator=(const VELaSSCoSM_statusDL_args&);
  VELaSSCoSM_statusDL_args() {
  }

  virtual ~VELaSSCoSM_statusDL_args() throw();

  bool operator == (const VELaSSCoSM_statusDL_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VELaSSCoSM_statusDL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_statusDL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_statusDL_pargs {
 public:


  virtual ~VELaSSCoSM_statusDL_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_statusDL_result__isset {
  _VELaSSCoSM_statusDL_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_statusDL_result__isset;

class VELaSSCoSM_statusDL_result {
 public:

  VELaSSCoSM_statusDL_result(const VELaSSCoSM_statusDL_result&);
  VELaSSCoSM_statusDL_result& operator=(const VELaSSCoSM_statusDL_result&);
  VELaSSCoSM_statusDL_result() : success() {
  }

  virtual ~VELaSSCoSM_statusDL_result() throw();
  std::string success;

  _VELaSSCoSM_statusDL_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_statusDL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_statusDL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_statusDL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_statusDL_presult__isset {
  _VELaSSCoSM_statusDL_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_statusDL_presult__isset;

class VELaSSCoSM_statusDL_presult {
 public:


  virtual ~VELaSSCoSM_statusDL_presult() throw();
  std::string* success;

  _VELaSSCoSM_statusDL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetListOfModelNames_args__isset {
  _VELaSSCoSM_GetListOfModelNames_args__isset() : sessionID(false), model_group_qualifier(false), model_name_pattern(false) {}
  bool sessionID :1;
  bool model_group_qualifier :1;
  bool model_name_pattern :1;
} _VELaSSCoSM_GetListOfModelNames_args__isset;

class VELaSSCoSM_GetListOfModelNames_args {
 public:

  VELaSSCoSM_GetListOfModelNames_args(const VELaSSCoSM_GetListOfModelNames_args&);
  VELaSSCoSM_GetListOfModelNames_args& operator=(const VELaSSCoSM_GetListOfModelNames_args&);
  VELaSSCoSM_GetListOfModelNames_args() : sessionID(), model_group_qualifier(), model_name_pattern() {
  }

  virtual ~VELaSSCoSM_GetListOfModelNames_args() throw();
  std::string sessionID;
  std::string model_group_qualifier;
  std::string model_name_pattern;

  _VELaSSCoSM_GetListOfModelNames_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_model_group_qualifier(const std::string& val);

  void __set_model_name_pattern(const std::string& val);

  bool operator == (const VELaSSCoSM_GetListOfModelNames_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(model_group_qualifier == rhs.model_group_qualifier))
      return false;
    if (!(model_name_pattern == rhs.model_name_pattern))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfModelNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfModelNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetListOfModelNames_pargs {
 public:


  virtual ~VELaSSCoSM_GetListOfModelNames_pargs() throw();
  const std::string* sessionID;
  const std::string* model_group_qualifier;
  const std::string* model_name_pattern;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfModelNames_result__isset {
  _VELaSSCoSM_GetListOfModelNames_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfModelNames_result__isset;

class VELaSSCoSM_GetListOfModelNames_result {
 public:

  VELaSSCoSM_GetListOfModelNames_result(const VELaSSCoSM_GetListOfModelNames_result&);
  VELaSSCoSM_GetListOfModelNames_result& operator=(const VELaSSCoSM_GetListOfModelNames_result&);
  VELaSSCoSM_GetListOfModelNames_result() {
  }

  virtual ~VELaSSCoSM_GetListOfModelNames_result() throw();
  rvGetListOfModels success;

  _VELaSSCoSM_GetListOfModelNames_result__isset __isset;

  void __set_success(const rvGetListOfModels& val);

  bool operator == (const VELaSSCoSM_GetListOfModelNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfModelNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfModelNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfModelNames_presult__isset {
  _VELaSSCoSM_GetListOfModelNames_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfModelNames_presult__isset;

class VELaSSCoSM_GetListOfModelNames_presult {
 public:


  virtual ~VELaSSCoSM_GetListOfModelNames_presult() throw();
  rvGetListOfModels* success;

  _VELaSSCoSM_GetListOfModelNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_FindModel_args__isset {
  _VELaSSCoSM_FindModel_args__isset() : sessionID(false), unique_model_name_pattern(false), requested_access(false) {}
  bool sessionID :1;
  bool unique_model_name_pattern :1;
  bool requested_access :1;
} _VELaSSCoSM_FindModel_args__isset;

class VELaSSCoSM_FindModel_args {
 public:

  VELaSSCoSM_FindModel_args(const VELaSSCoSM_FindModel_args&);
  VELaSSCoSM_FindModel_args& operator=(const VELaSSCoSM_FindModel_args&);
  VELaSSCoSM_FindModel_args() : sessionID(), unique_model_name_pattern(), requested_access() {
  }

  virtual ~VELaSSCoSM_FindModel_args() throw();
  std::string sessionID;
  std::string unique_model_name_pattern;
  std::string requested_access;

  _VELaSSCoSM_FindModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_unique_model_name_pattern(const std::string& val);

  void __set_requested_access(const std::string& val);

  bool operator == (const VELaSSCoSM_FindModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(unique_model_name_pattern == rhs.unique_model_name_pattern))
      return false;
    if (!(requested_access == rhs.requested_access))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_FindModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_FindModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_FindModel_pargs {
 public:


  virtual ~VELaSSCoSM_FindModel_pargs() throw();
  const std::string* sessionID;
  const std::string* unique_model_name_pattern;
  const std::string* requested_access;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_FindModel_result__isset {
  _VELaSSCoSM_FindModel_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_FindModel_result__isset;

class VELaSSCoSM_FindModel_result {
 public:

  VELaSSCoSM_FindModel_result(const VELaSSCoSM_FindModel_result&);
  VELaSSCoSM_FindModel_result& operator=(const VELaSSCoSM_FindModel_result&);
  VELaSSCoSM_FindModel_result() {
  }

  virtual ~VELaSSCoSM_FindModel_result() throw();
  rvOpenModel success;

  _VELaSSCoSM_FindModel_result__isset __isset;

  void __set_success(const rvOpenModel& val);

  bool operator == (const VELaSSCoSM_FindModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_FindModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_FindModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_FindModel_presult__isset {
  _VELaSSCoSM_FindModel_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_FindModel_presult__isset;

class VELaSSCoSM_FindModel_presult {
 public:


  virtual ~VELaSSCoSM_FindModel_presult() throw();
  rvOpenModel* success;

  _VELaSSCoSM_FindModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetResultFromVerticesID_args__isset {
  _VELaSSCoSM_GetResultFromVerticesID_args__isset() : sessionID(false), modelID(false), analysisID(false), timeStep(false), resultID(false), listOfVertices(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool timeStep :1;
  bool resultID :1;
  bool listOfVertices :1;
} _VELaSSCoSM_GetResultFromVerticesID_args__isset;

class VELaSSCoSM_GetResultFromVerticesID_args {
 public:

  VELaSSCoSM_GetResultFromVerticesID_args(const VELaSSCoSM_GetResultFromVerticesID_args&);
  VELaSSCoSM_GetResultFromVerticesID_args& operator=(const VELaSSCoSM_GetResultFromVerticesID_args&);
  VELaSSCoSM_GetResultFromVerticesID_args() : sessionID(), modelID(), analysisID(), timeStep(0), resultID() {
  }

  virtual ~VELaSSCoSM_GetResultFromVerticesID_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double timeStep;
  std::string resultID;
  std::vector<int64_t>  listOfVertices;

  _VELaSSCoSM_GetResultFromVerticesID_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_timeStep(const double val);

  void __set_resultID(const std::string& val);

  void __set_listOfVertices(const std::vector<int64_t> & val);

  bool operator == (const VELaSSCoSM_GetResultFromVerticesID_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(timeStep == rhs.timeStep))
      return false;
    if (!(resultID == rhs.resultID))
      return false;
    if (!(listOfVertices == rhs.listOfVertices))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetResultFromVerticesID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetResultFromVerticesID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetResultFromVerticesID_pargs {
 public:


  virtual ~VELaSSCoSM_GetResultFromVerticesID_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* timeStep;
  const std::string* resultID;
  const std::vector<int64_t> * listOfVertices;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetResultFromVerticesID_result__isset {
  _VELaSSCoSM_GetResultFromVerticesID_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetResultFromVerticesID_result__isset;

class VELaSSCoSM_GetResultFromVerticesID_result {
 public:

  VELaSSCoSM_GetResultFromVerticesID_result(const VELaSSCoSM_GetResultFromVerticesID_result&);
  VELaSSCoSM_GetResultFromVerticesID_result& operator=(const VELaSSCoSM_GetResultFromVerticesID_result&);
  VELaSSCoSM_GetResultFromVerticesID_result() {
  }

  virtual ~VELaSSCoSM_GetResultFromVerticesID_result() throw();
  rvGetResultFromVerticesID success;

  _VELaSSCoSM_GetResultFromVerticesID_result__isset __isset;

  void __set_success(const rvGetResultFromVerticesID& val);

  bool operator == (const VELaSSCoSM_GetResultFromVerticesID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetResultFromVerticesID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetResultFromVerticesID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetResultFromVerticesID_presult__isset {
  _VELaSSCoSM_GetResultFromVerticesID_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetResultFromVerticesID_presult__isset;

class VELaSSCoSM_GetResultFromVerticesID_presult {
 public:


  virtual ~VELaSSCoSM_GetResultFromVerticesID_presult() throw();
  rvGetResultFromVerticesID* success;

  _VELaSSCoSM_GetResultFromVerticesID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args__isset {
  _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args__isset() : sessionID(false), modelID(false), analysisID(false), timeStep(false), meshInfo(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool timeStep :1;
  bool meshInfo :1;
} _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args__isset;

class VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args {
 public:

  VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args(const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args&);
  VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args& operator=(const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args&);
  VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args() : sessionID(), modelID(), analysisID(), timeStep(0) {
  }

  virtual ~VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double timeStep;
  MeshInfo meshInfo;

  _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_timeStep(const double val);

  void __set_meshInfo(const MeshInfo& val);

  bool operator == (const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(timeStep == rhs.timeStep))
      return false;
    if (!(meshInfo == rhs.meshInfo))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetCoordinatesAndElementsFromMesh_pargs {
 public:


  virtual ~VELaSSCoSM_GetCoordinatesAndElementsFromMesh_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* timeStep;
  const MeshInfo* meshInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result__isset {
  _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result__isset;

class VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result {
 public:

  VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result(const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result&);
  VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result& operator=(const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result&);
  VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result() {
  }

  virtual ~VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result() throw();
  rvGetCoordinatesAndElementsFromMesh success;

  _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result__isset __isset;

  void __set_success(const rvGetCoordinatesAndElementsFromMesh& val);

  bool operator == (const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetCoordinatesAndElementsFromMesh_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_presult__isset {
  _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_presult__isset;

class VELaSSCoSM_GetCoordinatesAndElementsFromMesh_presult {
 public:


  virtual ~VELaSSCoSM_GetCoordinatesAndElementsFromMesh_presult() throw();
  rvGetCoordinatesAndElementsFromMesh* success;

  _VELaSSCoSM_GetCoordinatesAndElementsFromMesh_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VELaSSCoSM_stopAll_args {
 public:

  VELaSSCoSM_stopAll_args(const VELaSSCoSM_stopAll_args&);
  VELaSSCoSM_stopAll_args& operator=(const VELaSSCoSM_stopAll_args&);
  VELaSSCoSM_stopAll_args() {
  }

  virtual ~VELaSSCoSM_stopAll_args() throw();

  bool operator == (const VELaSSCoSM_stopAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VELaSSCoSM_stopAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_stopAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_stopAll_pargs {
 public:


  virtual ~VELaSSCoSM_stopAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_stopAll_result {
 public:

  VELaSSCoSM_stopAll_result(const VELaSSCoSM_stopAll_result&);
  VELaSSCoSM_stopAll_result& operator=(const VELaSSCoSM_stopAll_result&);
  VELaSSCoSM_stopAll_result() {
  }

  virtual ~VELaSSCoSM_stopAll_result() throw();

  bool operator == (const VELaSSCoSM_stopAll_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VELaSSCoSM_stopAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_stopAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_stopAll_presult {
 public:


  virtual ~VELaSSCoSM_stopAll_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetListOfMeshes_args__isset {
  _VELaSSCoSM_GetListOfMeshes_args__isset() : sessionID(false), modelID(false), analysisID(false), stepValue(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool stepValue :1;
} _VELaSSCoSM_GetListOfMeshes_args__isset;

class VELaSSCoSM_GetListOfMeshes_args {
 public:

  VELaSSCoSM_GetListOfMeshes_args(const VELaSSCoSM_GetListOfMeshes_args&);
  VELaSSCoSM_GetListOfMeshes_args& operator=(const VELaSSCoSM_GetListOfMeshes_args&);
  VELaSSCoSM_GetListOfMeshes_args() : sessionID(), modelID(), analysisID(), stepValue(0) {
  }

  virtual ~VELaSSCoSM_GetListOfMeshes_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double stepValue;

  _VELaSSCoSM_GetListOfMeshes_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_stepValue(const double val);

  bool operator == (const VELaSSCoSM_GetListOfMeshes_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(stepValue == rhs.stepValue))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfMeshes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfMeshes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetListOfMeshes_pargs {
 public:


  virtual ~VELaSSCoSM_GetListOfMeshes_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* stepValue;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfMeshes_result__isset {
  _VELaSSCoSM_GetListOfMeshes_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfMeshes_result__isset;

class VELaSSCoSM_GetListOfMeshes_result {
 public:

  VELaSSCoSM_GetListOfMeshes_result(const VELaSSCoSM_GetListOfMeshes_result&);
  VELaSSCoSM_GetListOfMeshes_result& operator=(const VELaSSCoSM_GetListOfMeshes_result&);
  VELaSSCoSM_GetListOfMeshes_result() {
  }

  virtual ~VELaSSCoSM_GetListOfMeshes_result() throw();
  rvGetListOfMeshes success;

  _VELaSSCoSM_GetListOfMeshes_result__isset __isset;

  void __set_success(const rvGetListOfMeshes& val);

  bool operator == (const VELaSSCoSM_GetListOfMeshes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfMeshes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfMeshes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfMeshes_presult__isset {
  _VELaSSCoSM_GetListOfMeshes_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfMeshes_presult__isset;

class VELaSSCoSM_GetListOfMeshes_presult {
 public:


  virtual ~VELaSSCoSM_GetListOfMeshes_presult() throw();
  rvGetListOfMeshes* success;

  _VELaSSCoSM_GetListOfMeshes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetListOfAnalyses_args__isset {
  _VELaSSCoSM_GetListOfAnalyses_args__isset() : sessionID(false), modelID(false) {}
  bool sessionID :1;
  bool modelID :1;
} _VELaSSCoSM_GetListOfAnalyses_args__isset;

class VELaSSCoSM_GetListOfAnalyses_args {
 public:

  VELaSSCoSM_GetListOfAnalyses_args(const VELaSSCoSM_GetListOfAnalyses_args&);
  VELaSSCoSM_GetListOfAnalyses_args& operator=(const VELaSSCoSM_GetListOfAnalyses_args&);
  VELaSSCoSM_GetListOfAnalyses_args() : sessionID(), modelID() {
  }

  virtual ~VELaSSCoSM_GetListOfAnalyses_args() throw();
  std::string sessionID;
  std::string modelID;

  _VELaSSCoSM_GetListOfAnalyses_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const VELaSSCoSM_GetListOfAnalyses_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfAnalyses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfAnalyses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetListOfAnalyses_pargs {
 public:


  virtual ~VELaSSCoSM_GetListOfAnalyses_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfAnalyses_result__isset {
  _VELaSSCoSM_GetListOfAnalyses_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfAnalyses_result__isset;

class VELaSSCoSM_GetListOfAnalyses_result {
 public:

  VELaSSCoSM_GetListOfAnalyses_result(const VELaSSCoSM_GetListOfAnalyses_result&);
  VELaSSCoSM_GetListOfAnalyses_result& operator=(const VELaSSCoSM_GetListOfAnalyses_result&);
  VELaSSCoSM_GetListOfAnalyses_result() {
  }

  virtual ~VELaSSCoSM_GetListOfAnalyses_result() throw();
  rvGetListOfAnalyses success;

  _VELaSSCoSM_GetListOfAnalyses_result__isset __isset;

  void __set_success(const rvGetListOfAnalyses& val);

  bool operator == (const VELaSSCoSM_GetListOfAnalyses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfAnalyses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfAnalyses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfAnalyses_presult__isset {
  _VELaSSCoSM_GetListOfAnalyses_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfAnalyses_presult__isset;

class VELaSSCoSM_GetListOfAnalyses_presult {
 public:


  virtual ~VELaSSCoSM_GetListOfAnalyses_presult() throw();
  rvGetListOfAnalyses* success;

  _VELaSSCoSM_GetListOfAnalyses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetListOfTimeSteps_args__isset {
  _VELaSSCoSM_GetListOfTimeSteps_args__isset() : sessionID(false), modelID(false), analysisID(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
} _VELaSSCoSM_GetListOfTimeSteps_args__isset;

class VELaSSCoSM_GetListOfTimeSteps_args {
 public:

  VELaSSCoSM_GetListOfTimeSteps_args(const VELaSSCoSM_GetListOfTimeSteps_args&);
  VELaSSCoSM_GetListOfTimeSteps_args& operator=(const VELaSSCoSM_GetListOfTimeSteps_args&);
  VELaSSCoSM_GetListOfTimeSteps_args() : sessionID(), modelID(), analysisID() {
  }

  virtual ~VELaSSCoSM_GetListOfTimeSteps_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;

  _VELaSSCoSM_GetListOfTimeSteps_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  bool operator == (const VELaSSCoSM_GetListOfTimeSteps_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfTimeSteps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfTimeSteps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetListOfTimeSteps_pargs {
 public:


  virtual ~VELaSSCoSM_GetListOfTimeSteps_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfTimeSteps_result__isset {
  _VELaSSCoSM_GetListOfTimeSteps_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfTimeSteps_result__isset;

class VELaSSCoSM_GetListOfTimeSteps_result {
 public:

  VELaSSCoSM_GetListOfTimeSteps_result(const VELaSSCoSM_GetListOfTimeSteps_result&);
  VELaSSCoSM_GetListOfTimeSteps_result& operator=(const VELaSSCoSM_GetListOfTimeSteps_result&);
  VELaSSCoSM_GetListOfTimeSteps_result() {
  }

  virtual ~VELaSSCoSM_GetListOfTimeSteps_result() throw();
  rvGetListOfTimeSteps success;

  _VELaSSCoSM_GetListOfTimeSteps_result__isset __isset;

  void __set_success(const rvGetListOfTimeSteps& val);

  bool operator == (const VELaSSCoSM_GetListOfTimeSteps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfTimeSteps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfTimeSteps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfTimeSteps_presult__isset {
  _VELaSSCoSM_GetListOfTimeSteps_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfTimeSteps_presult__isset;

class VELaSSCoSM_GetListOfTimeSteps_presult {
 public:


  virtual ~VELaSSCoSM_GetListOfTimeSteps_presult() throw();
  rvGetListOfTimeSteps* success;

  _VELaSSCoSM_GetListOfTimeSteps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args__isset {
  _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args__isset() : sessionID(false), modelID(false), analysisID(false), stepValue(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool stepValue :1;
} _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args__isset;

class VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args {
 public:

  VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args(const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args&);
  VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args& operator=(const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args&);
  VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args() : sessionID(), modelID(), analysisID(), stepValue(0) {
  }

  virtual ~VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double stepValue;

  _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_stepValue(const double val);

  bool operator == (const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(stepValue == rhs.stepValue))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_pargs {
 public:


  virtual ~VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* stepValue;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result__isset {
  _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result__isset;

class VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result {
 public:

  VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result(const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result&);
  VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result& operator=(const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result&);
  VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result() {
  }

  virtual ~VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result() throw();
  rvGetListOfResults success;

  _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result__isset __isset;

  void __set_success(const rvGetListOfResults& val);

  bool operator == (const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_presult__isset {
  _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_presult__isset;

class VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_presult {
 public:


  virtual ~VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_presult() throw();
  rvGetListOfResults* success;

  _VELaSSCoSM_GetListOfResultsFromTimeStepAndAnalysis_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetListOfVerticesFromMesh_args__isset {
  _VELaSSCoSM_GetListOfVerticesFromMesh_args__isset() : sessionID(false), modelID(false), analysisID(false), stepValue(false), meshID(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool stepValue :1;
  bool meshID :1;
} _VELaSSCoSM_GetListOfVerticesFromMesh_args__isset;

class VELaSSCoSM_GetListOfVerticesFromMesh_args {
 public:

  VELaSSCoSM_GetListOfVerticesFromMesh_args(const VELaSSCoSM_GetListOfVerticesFromMesh_args&);
  VELaSSCoSM_GetListOfVerticesFromMesh_args& operator=(const VELaSSCoSM_GetListOfVerticesFromMesh_args&);
  VELaSSCoSM_GetListOfVerticesFromMesh_args() : sessionID(), modelID(), analysisID(), stepValue(0), meshID(0) {
  }

  virtual ~VELaSSCoSM_GetListOfVerticesFromMesh_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double stepValue;
  int32_t meshID;

  _VELaSSCoSM_GetListOfVerticesFromMesh_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_stepValue(const double val);

  void __set_meshID(const int32_t val);

  bool operator == (const VELaSSCoSM_GetListOfVerticesFromMesh_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(stepValue == rhs.stepValue))
      return false;
    if (!(meshID == rhs.meshID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfVerticesFromMesh_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfVerticesFromMesh_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetListOfVerticesFromMesh_pargs {
 public:


  virtual ~VELaSSCoSM_GetListOfVerticesFromMesh_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* stepValue;
  const int32_t* meshID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfVerticesFromMesh_result__isset {
  _VELaSSCoSM_GetListOfVerticesFromMesh_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfVerticesFromMesh_result__isset;

class VELaSSCoSM_GetListOfVerticesFromMesh_result {
 public:

  VELaSSCoSM_GetListOfVerticesFromMesh_result(const VELaSSCoSM_GetListOfVerticesFromMesh_result&);
  VELaSSCoSM_GetListOfVerticesFromMesh_result& operator=(const VELaSSCoSM_GetListOfVerticesFromMesh_result&);
  VELaSSCoSM_GetListOfVerticesFromMesh_result() {
  }

  virtual ~VELaSSCoSM_GetListOfVerticesFromMesh_result() throw();
  rvGetListOfVerticesFromMesh success;

  _VELaSSCoSM_GetListOfVerticesFromMesh_result__isset __isset;

  void __set_success(const rvGetListOfVerticesFromMesh& val);

  bool operator == (const VELaSSCoSM_GetListOfVerticesFromMesh_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfVerticesFromMesh_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfVerticesFromMesh_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfVerticesFromMesh_presult__isset {
  _VELaSSCoSM_GetListOfVerticesFromMesh_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfVerticesFromMesh_presult__isset;

class VELaSSCoSM_GetListOfVerticesFromMesh_presult {
 public:


  virtual ~VELaSSCoSM_GetListOfVerticesFromMesh_presult() throw();
  rvGetListOfVerticesFromMesh* success;

  _VELaSSCoSM_GetListOfVerticesFromMesh_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args__isset {
  _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args__isset() : sessionID(false), modelID(false), analysisID(false), stepValue(false), meshID(false), listOfVerticesID(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool stepValue :1;
  bool meshID :1;
  bool listOfVerticesID :1;
} _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args__isset;

class VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args {
 public:

  VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args(const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args&);
  VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args& operator=(const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args&);
  VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args() : sessionID(), modelID(), analysisID(), stepValue(0), meshID(0) {
  }

  virtual ~VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double stepValue;
  int32_t meshID;
  std::vector<int64_t>  listOfVerticesID;

  _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_stepValue(const double val);

  void __set_meshID(const int32_t val);

  void __set_listOfVerticesID(const std::vector<int64_t> & val);

  bool operator == (const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(stepValue == rhs.stepValue))
      return false;
    if (!(meshID == rhs.meshID))
      return false;
    if (!(listOfVerticesID == rhs.listOfVerticesID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetListOfSelectedVerticesFromMesh_pargs {
 public:


  virtual ~VELaSSCoSM_GetListOfSelectedVerticesFromMesh_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* stepValue;
  const int32_t* meshID;
  const std::vector<int64_t> * listOfVerticesID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result__isset {
  _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result__isset;

class VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result {
 public:

  VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result(const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result&);
  VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result& operator=(const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result&);
  VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result() {
  }

  virtual ~VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result() throw();
  rvGetListOfVerticesFromMesh success;

  _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result__isset __isset;

  void __set_success(const rvGetListOfVerticesFromMesh& val);

  bool operator == (const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfSelectedVerticesFromMesh_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_presult__isset {
  _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_presult__isset;

class VELaSSCoSM_GetListOfSelectedVerticesFromMesh_presult {
 public:


  virtual ~VELaSSCoSM_GetListOfSelectedVerticesFromMesh_presult() throw();
  rvGetListOfVerticesFromMesh* success;

  _VELaSSCoSM_GetListOfSelectedVerticesFromMesh_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_UserLogin_args__isset {
  _VELaSSCoSM_UserLogin_args__isset() : user_name(false), role(false), password(false) {}
  bool user_name :1;
  bool role :1;
  bool password :1;
} _VELaSSCoSM_UserLogin_args__isset;

class VELaSSCoSM_UserLogin_args {
 public:

  VELaSSCoSM_UserLogin_args(const VELaSSCoSM_UserLogin_args&);
  VELaSSCoSM_UserLogin_args& operator=(const VELaSSCoSM_UserLogin_args&);
  VELaSSCoSM_UserLogin_args() : user_name(), role(), password() {
  }

  virtual ~VELaSSCoSM_UserLogin_args() throw();
  std::string user_name;
  std::string role;
  std::string password;

  _VELaSSCoSM_UserLogin_args__isset __isset;

  void __set_user_name(const std::string& val);

  void __set_role(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogin_args & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_UserLogin_pargs {
 public:


  virtual ~VELaSSCoSM_UserLogin_pargs() throw();
  const std::string* user_name;
  const std::string* role;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_UserLogin_result__isset {
  _VELaSSCoSM_UserLogin_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogin_result__isset;

class VELaSSCoSM_UserLogin_result {
 public:

  VELaSSCoSM_UserLogin_result(const VELaSSCoSM_UserLogin_result&);
  VELaSSCoSM_UserLogin_result& operator=(const VELaSSCoSM_UserLogin_result&);
  VELaSSCoSM_UserLogin_result() : success() {
  }

  virtual ~VELaSSCoSM_UserLogin_result() throw();
  std::string success;

  _VELaSSCoSM_UserLogin_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_UserLogin_presult__isset {
  _VELaSSCoSM_UserLogin_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogin_presult__isset;

class VELaSSCoSM_UserLogin_presult {
 public:


  virtual ~VELaSSCoSM_UserLogin_presult() throw();
  std::string* success;

  _VELaSSCoSM_UserLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_UserLogout_args__isset {
  _VELaSSCoSM_UserLogout_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _VELaSSCoSM_UserLogout_args__isset;

class VELaSSCoSM_UserLogout_args {
 public:

  VELaSSCoSM_UserLogout_args(const VELaSSCoSM_UserLogout_args&);
  VELaSSCoSM_UserLogout_args& operator=(const VELaSSCoSM_UserLogout_args&);
  VELaSSCoSM_UserLogout_args() : sessionID() {
  }

  virtual ~VELaSSCoSM_UserLogout_args() throw();
  std::string sessionID;

  _VELaSSCoSM_UserLogout_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogout_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_UserLogout_pargs {
 public:


  virtual ~VELaSSCoSM_UserLogout_pargs() throw();
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_UserLogout_result__isset {
  _VELaSSCoSM_UserLogout_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogout_result__isset;

class VELaSSCoSM_UserLogout_result {
 public:

  VELaSSCoSM_UserLogout_result(const VELaSSCoSM_UserLogout_result&);
  VELaSSCoSM_UserLogout_result& operator=(const VELaSSCoSM_UserLogout_result&);
  VELaSSCoSM_UserLogout_result() : success() {
  }

  virtual ~VELaSSCoSM_UserLogout_result() throw();
  std::string success;

  _VELaSSCoSM_UserLogout_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_UserLogout_presult__isset {
  _VELaSSCoSM_UserLogout_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogout_presult__isset;

class VELaSSCoSM_UserLogout_presult {
 public:


  virtual ~VELaSSCoSM_UserLogout_presult() throw();
  std::string* success;

  _VELaSSCoSM_UserLogout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_CloseModel_args__isset {
  _VELaSSCoSM_CloseModel_args__isset() : sessionID(false), modelID(false) {}
  bool sessionID :1;
  bool modelID :1;
} _VELaSSCoSM_CloseModel_args__isset;

class VELaSSCoSM_CloseModel_args {
 public:

  VELaSSCoSM_CloseModel_args(const VELaSSCoSM_CloseModel_args&);
  VELaSSCoSM_CloseModel_args& operator=(const VELaSSCoSM_CloseModel_args&);
  VELaSSCoSM_CloseModel_args() : sessionID(), modelID() {
  }

  virtual ~VELaSSCoSM_CloseModel_args() throw();
  std::string sessionID;
  std::string modelID;

  _VELaSSCoSM_CloseModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const VELaSSCoSM_CloseModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_CloseModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_CloseModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_CloseModel_pargs {
 public:


  virtual ~VELaSSCoSM_CloseModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_CloseModel_result__isset {
  _VELaSSCoSM_CloseModel_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_CloseModel_result__isset;

class VELaSSCoSM_CloseModel_result {
 public:

  VELaSSCoSM_CloseModel_result(const VELaSSCoSM_CloseModel_result&);
  VELaSSCoSM_CloseModel_result& operator=(const VELaSSCoSM_CloseModel_result&);
  VELaSSCoSM_CloseModel_result() : success() {
  }

  virtual ~VELaSSCoSM_CloseModel_result() throw();
  std::string success;

  _VELaSSCoSM_CloseModel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_CloseModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_CloseModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_CloseModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_CloseModel_presult__isset {
  _VELaSSCoSM_CloseModel_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_CloseModel_presult__isset;

class VELaSSCoSM_CloseModel_presult {
 public:


  virtual ~VELaSSCoSM_CloseModel_presult() throw();
  std::string* success;

  _VELaSSCoSM_CloseModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_SetThumbnailOfAModel_args__isset {
  _VELaSSCoSM_SetThumbnailOfAModel_args__isset() : sessionID(false), modelID(false), imageFile(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool imageFile :1;
} _VELaSSCoSM_SetThumbnailOfAModel_args__isset;

class VELaSSCoSM_SetThumbnailOfAModel_args {
 public:

  VELaSSCoSM_SetThumbnailOfAModel_args(const VELaSSCoSM_SetThumbnailOfAModel_args&);
  VELaSSCoSM_SetThumbnailOfAModel_args& operator=(const VELaSSCoSM_SetThumbnailOfAModel_args&);
  VELaSSCoSM_SetThumbnailOfAModel_args() : sessionID(), modelID(), imageFile() {
  }

  virtual ~VELaSSCoSM_SetThumbnailOfAModel_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string imageFile;

  _VELaSSCoSM_SetThumbnailOfAModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_imageFile(const std::string& val);

  bool operator == (const VELaSSCoSM_SetThumbnailOfAModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(imageFile == rhs.imageFile))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_SetThumbnailOfAModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_SetThumbnailOfAModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_SetThumbnailOfAModel_pargs {
 public:


  virtual ~VELaSSCoSM_SetThumbnailOfAModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* imageFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_SetThumbnailOfAModel_result__isset {
  _VELaSSCoSM_SetThumbnailOfAModel_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_SetThumbnailOfAModel_result__isset;

class VELaSSCoSM_SetThumbnailOfAModel_result {
 public:

  VELaSSCoSM_SetThumbnailOfAModel_result(const VELaSSCoSM_SetThumbnailOfAModel_result&);
  VELaSSCoSM_SetThumbnailOfAModel_result& operator=(const VELaSSCoSM_SetThumbnailOfAModel_result&);
  VELaSSCoSM_SetThumbnailOfAModel_result() : success() {
  }

  virtual ~VELaSSCoSM_SetThumbnailOfAModel_result() throw();
  std::string success;

  _VELaSSCoSM_SetThumbnailOfAModel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_SetThumbnailOfAModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_SetThumbnailOfAModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_SetThumbnailOfAModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_SetThumbnailOfAModel_presult__isset {
  _VELaSSCoSM_SetThumbnailOfAModel_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_SetThumbnailOfAModel_presult__isset;

class VELaSSCoSM_SetThumbnailOfAModel_presult {
 public:


  virtual ~VELaSSCoSM_SetThumbnailOfAModel_presult() throw();
  std::string* success;

  _VELaSSCoSM_SetThumbnailOfAModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetThumbnailOfAModel_args__isset {
  _VELaSSCoSM_GetThumbnailOfAModel_args__isset() : sessionID(false), modelID(false) {}
  bool sessionID :1;
  bool modelID :1;
} _VELaSSCoSM_GetThumbnailOfAModel_args__isset;

class VELaSSCoSM_GetThumbnailOfAModel_args {
 public:

  VELaSSCoSM_GetThumbnailOfAModel_args(const VELaSSCoSM_GetThumbnailOfAModel_args&);
  VELaSSCoSM_GetThumbnailOfAModel_args& operator=(const VELaSSCoSM_GetThumbnailOfAModel_args&);
  VELaSSCoSM_GetThumbnailOfAModel_args() : sessionID(), modelID() {
  }

  virtual ~VELaSSCoSM_GetThumbnailOfAModel_args() throw();
  std::string sessionID;
  std::string modelID;

  _VELaSSCoSM_GetThumbnailOfAModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const VELaSSCoSM_GetThumbnailOfAModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetThumbnailOfAModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetThumbnailOfAModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetThumbnailOfAModel_pargs {
 public:


  virtual ~VELaSSCoSM_GetThumbnailOfAModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetThumbnailOfAModel_result__isset {
  _VELaSSCoSM_GetThumbnailOfAModel_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetThumbnailOfAModel_result__isset;

class VELaSSCoSM_GetThumbnailOfAModel_result {
 public:

  VELaSSCoSM_GetThumbnailOfAModel_result(const VELaSSCoSM_GetThumbnailOfAModel_result&);
  VELaSSCoSM_GetThumbnailOfAModel_result& operator=(const VELaSSCoSM_GetThumbnailOfAModel_result&);
  VELaSSCoSM_GetThumbnailOfAModel_result() {
  }

  virtual ~VELaSSCoSM_GetThumbnailOfAModel_result() throw();
  rvGetThumbnailOfAModel success;

  _VELaSSCoSM_GetThumbnailOfAModel_result__isset __isset;

  void __set_success(const rvGetThumbnailOfAModel& val);

  bool operator == (const VELaSSCoSM_GetThumbnailOfAModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetThumbnailOfAModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetThumbnailOfAModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetThumbnailOfAModel_presult__isset {
  _VELaSSCoSM_GetThumbnailOfAModel_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetThumbnailOfAModel_presult__isset;

class VELaSSCoSM_GetThumbnailOfAModel_presult {
 public:


  virtual ~VELaSSCoSM_GetThumbnailOfAModel_presult() throw();
  rvGetThumbnailOfAModel* success;

  _VELaSSCoSM_GetThumbnailOfAModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetElementOfPointsInSpace_args__isset {
  _VELaSSCoSM_GetElementOfPointsInSpace_args__isset() : sessionID(false), modelName(false), points(false) {}
  bool sessionID :1;
  bool modelName :1;
  bool points :1;
} _VELaSSCoSM_GetElementOfPointsInSpace_args__isset;

class VELaSSCoSM_GetElementOfPointsInSpace_args {
 public:

  VELaSSCoSM_GetElementOfPointsInSpace_args(const VELaSSCoSM_GetElementOfPointsInSpace_args&);
  VELaSSCoSM_GetElementOfPointsInSpace_args& operator=(const VELaSSCoSM_GetElementOfPointsInSpace_args&);
  VELaSSCoSM_GetElementOfPointsInSpace_args() : sessionID(), modelName() {
  }

  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_args() throw();
  std::string sessionID;
  std::string modelName;
  std::vector<Point>  points;

  _VELaSSCoSM_GetElementOfPointsInSpace_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelName(const std::string& val);

  void __set_points(const std::vector<Point> & val);

  bool operator == (const VELaSSCoSM_GetElementOfPointsInSpace_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelName == rhs.modelName))
      return false;
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetElementOfPointsInSpace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetElementOfPointsInSpace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetElementOfPointsInSpace_pargs {
 public:


  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_pargs() throw();
  const std::string* sessionID;
  const std::string* modelName;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetElementOfPointsInSpace_result__isset {
  _VELaSSCoSM_GetElementOfPointsInSpace_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetElementOfPointsInSpace_result__isset;

class VELaSSCoSM_GetElementOfPointsInSpace_result {
 public:

  VELaSSCoSM_GetElementOfPointsInSpace_result(const VELaSSCoSM_GetElementOfPointsInSpace_result&);
  VELaSSCoSM_GetElementOfPointsInSpace_result& operator=(const VELaSSCoSM_GetElementOfPointsInSpace_result&);
  VELaSSCoSM_GetElementOfPointsInSpace_result() {
  }

  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_result() throw();
  rvGetElementOfPointsInSpace success;

  _VELaSSCoSM_GetElementOfPointsInSpace_result__isset __isset;

  void __set_success(const rvGetElementOfPointsInSpace& val);

  bool operator == (const VELaSSCoSM_GetElementOfPointsInSpace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetElementOfPointsInSpace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetElementOfPointsInSpace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset {
  _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset;

class VELaSSCoSM_GetElementOfPointsInSpace_presult {
 public:


  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_presult() throw();
  rvGetElementOfPointsInSpace* success;

  _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset {
  _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset() : sessionID(false), modelID(false), meshID(false), analysisID(false), time_step(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool meshID :1;
  bool analysisID :1;
  bool time_step :1;
} _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset;

class VELaSSCoSM_GetBoundaryOfLocalMesh_args {
 public:

  VELaSSCoSM_GetBoundaryOfLocalMesh_args(const VELaSSCoSM_GetBoundaryOfLocalMesh_args&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_args& operator=(const VELaSSCoSM_GetBoundaryOfLocalMesh_args&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_args() : sessionID(), modelID(), meshID(), analysisID(), time_step(0) {
  }

  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string meshID;
  std::string analysisID;
  double time_step;

  _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_meshID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_time_step(const double val);

  bool operator == (const VELaSSCoSM_GetBoundaryOfLocalMesh_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(meshID == rhs.meshID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(time_step == rhs.time_step))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetBoundaryOfLocalMesh_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetBoundaryOfLocalMesh_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VELaSSCoSM_GetBoundaryOfLocalMesh_pargs {
 public:


  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* meshID;
  const std::string* analysisID;
  const double* time_step;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset {
  _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset;

class VELaSSCoSM_GetBoundaryOfLocalMesh_result {
 public:

  VELaSSCoSM_GetBoundaryOfLocalMesh_result(const VELaSSCoSM_GetBoundaryOfLocalMesh_result&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_result& operator=(const VELaSSCoSM_GetBoundaryOfLocalMesh_result&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_result() {
  }

  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_result() throw();
  rvGetBoundaryOfLocalMesh success;

  _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset __isset;

  void __set_success(const rvGetBoundaryOfLocalMesh& val);

  bool operator == (const VELaSSCoSM_GetBoundaryOfLocalMesh_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetBoundaryOfLocalMesh_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetBoundaryOfLocalMesh_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset {
  _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset;

class VELaSSCoSM_GetBoundaryOfLocalMesh_presult {
 public:


  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_presult() throw();
  rvGetBoundaryOfLocalMesh* success;

  _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VELaSSCoSMClient : virtual public VELaSSCoSMIf {
 public:
  VELaSSCoSMClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VELaSSCoSMClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void statusDL(std::string& _return);
  void send_statusDL();
  void recv_statusDL(std::string& _return);
  void GetListOfModelNames(rvGetListOfModels& _return, const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern);
  void send_GetListOfModelNames(const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern);
  void recv_GetListOfModelNames(rvGetListOfModels& _return);
  void FindModel(rvOpenModel& _return, const std::string& sessionID, const std::string& unique_model_name_pattern, const std::string& requested_access);
  void send_FindModel(const std::string& sessionID, const std::string& unique_model_name_pattern, const std::string& requested_access);
  void recv_FindModel(rvOpenModel& _return);
  void GetResultFromVerticesID(rvGetResultFromVerticesID& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::vector<int64_t> & listOfVertices);
  void send_GetResultFromVerticesID(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::vector<int64_t> & listOfVertices);
  void recv_GetResultFromVerticesID(rvGetResultFromVerticesID& _return);
  void GetCoordinatesAndElementsFromMesh(rvGetCoordinatesAndElementsFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const MeshInfo& meshInfo);
  void send_GetCoordinatesAndElementsFromMesh(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const MeshInfo& meshInfo);
  void recv_GetCoordinatesAndElementsFromMesh(rvGetCoordinatesAndElementsFromMesh& _return);
  void stopAll();
  void send_stopAll();
  void recv_stopAll();
  void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  void send_GetListOfMeshes(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  void recv_GetListOfMeshes(rvGetListOfMeshes& _return);
  void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID);
  void send_GetListOfAnalyses(const std::string& sessionID, const std::string& modelID);
  void recv_GetListOfAnalyses(rvGetListOfAnalyses& _return);
  void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  void send_GetListOfTimeSteps(const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  void recv_GetListOfTimeSteps(rvGetListOfTimeSteps& _return);
  void GetListOfResultsFromTimeStepAndAnalysis(rvGetListOfResults& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  void send_GetListOfResultsFromTimeStepAndAnalysis(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  void recv_GetListOfResultsFromTimeStepAndAnalysis(rvGetListOfResults& _return);
  void GetListOfVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID);
  void send_GetListOfVerticesFromMesh(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID);
  void recv_GetListOfVerticesFromMesh(rvGetListOfVerticesFromMesh& _return);
  void GetListOfSelectedVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID, const std::vector<int64_t> & listOfVerticesID);
  void send_GetListOfSelectedVerticesFromMesh(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID, const std::vector<int64_t> & listOfVerticesID);
  void recv_GetListOfSelectedVerticesFromMesh(rvGetListOfVerticesFromMesh& _return);
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password);
  void send_UserLogin(const std::string& user_name, const std::string& role, const std::string& password);
  void recv_UserLogin(std::string& _return);
  void UserLogout(std::string& _return, const std::string& sessionID);
  void send_UserLogout(const std::string& sessionID);
  void recv_UserLogout(std::string& _return);
  void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelID);
  void send_CloseModel(const std::string& sessionID, const std::string& modelID);
  void recv_CloseModel(std::string& _return);
  void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  void send_SetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  void recv_SetThumbnailOfAModel(std::string& _return);
  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID);
  void send_GetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID);
  void recv_GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return);
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  void send_GetElementOfPointsInSpace(const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  void recv_GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return);
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  void send_GetBoundaryOfLocalMesh(const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  void recv_GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VELaSSCoSMProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VELaSSCoSMIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VELaSSCoSMProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_statusDL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfModelNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResultFromVerticesID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoordinatesAndElementsFromMesh(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfMeshes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfAnalyses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfTimeSteps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfResultsFromTimeStepAndAnalysis(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfVerticesFromMesh(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfSelectedVerticesFromMesh(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UserLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UserLogout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetThumbnailOfAModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetThumbnailOfAModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetElementOfPointsInSpace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBoundaryOfLocalMesh(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VELaSSCoSMProcessor(boost::shared_ptr<VELaSSCoSMIf> iface) :
    iface_(iface) {
    processMap_["statusDL"] = &VELaSSCoSMProcessor::process_statusDL;
    processMap_["GetListOfModelNames"] = &VELaSSCoSMProcessor::process_GetListOfModelNames;
    processMap_["FindModel"] = &VELaSSCoSMProcessor::process_FindModel;
    processMap_["GetResultFromVerticesID"] = &VELaSSCoSMProcessor::process_GetResultFromVerticesID;
    processMap_["GetCoordinatesAndElementsFromMesh"] = &VELaSSCoSMProcessor::process_GetCoordinatesAndElementsFromMesh;
    processMap_["stopAll"] = &VELaSSCoSMProcessor::process_stopAll;
    processMap_["GetListOfMeshes"] = &VELaSSCoSMProcessor::process_GetListOfMeshes;
    processMap_["GetListOfAnalyses"] = &VELaSSCoSMProcessor::process_GetListOfAnalyses;
    processMap_["GetListOfTimeSteps"] = &VELaSSCoSMProcessor::process_GetListOfTimeSteps;
    processMap_["GetListOfResultsFromTimeStepAndAnalysis"] = &VELaSSCoSMProcessor::process_GetListOfResultsFromTimeStepAndAnalysis;
    processMap_["GetListOfVerticesFromMesh"] = &VELaSSCoSMProcessor::process_GetListOfVerticesFromMesh;
    processMap_["GetListOfSelectedVerticesFromMesh"] = &VELaSSCoSMProcessor::process_GetListOfSelectedVerticesFromMesh;
    processMap_["UserLogin"] = &VELaSSCoSMProcessor::process_UserLogin;
    processMap_["UserLogout"] = &VELaSSCoSMProcessor::process_UserLogout;
    processMap_["CloseModel"] = &VELaSSCoSMProcessor::process_CloseModel;
    processMap_["SetThumbnailOfAModel"] = &VELaSSCoSMProcessor::process_SetThumbnailOfAModel;
    processMap_["GetThumbnailOfAModel"] = &VELaSSCoSMProcessor::process_GetThumbnailOfAModel;
    processMap_["GetElementOfPointsInSpace"] = &VELaSSCoSMProcessor::process_GetElementOfPointsInSpace;
    processMap_["GetBoundaryOfLocalMesh"] = &VELaSSCoSMProcessor::process_GetBoundaryOfLocalMesh;
  }

  virtual ~VELaSSCoSMProcessor() {}
};

class VELaSSCoSMProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VELaSSCoSMProcessorFactory(const ::boost::shared_ptr< VELaSSCoSMIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VELaSSCoSMIfFactory > handlerFactory_;
};

class VELaSSCoSMMultiface : virtual public VELaSSCoSMIf {
 public:
  VELaSSCoSMMultiface(std::vector<boost::shared_ptr<VELaSSCoSMIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VELaSSCoSMMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VELaSSCoSMIf> > ifaces_;
  VELaSSCoSMMultiface() {}
  void add(boost::shared_ptr<VELaSSCoSMIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void statusDL(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->statusDL(_return);
    }
    ifaces_[i]->statusDL(_return);
    return;
  }

  void GetListOfModelNames(rvGetListOfModels& _return, const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfModelNames(_return, sessionID, model_group_qualifier, model_name_pattern);
    }
    ifaces_[i]->GetListOfModelNames(_return, sessionID, model_group_qualifier, model_name_pattern);
    return;
  }

  void FindModel(rvOpenModel& _return, const std::string& sessionID, const std::string& unique_model_name_pattern, const std::string& requested_access) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindModel(_return, sessionID, unique_model_name_pattern, requested_access);
    }
    ifaces_[i]->FindModel(_return, sessionID, unique_model_name_pattern, requested_access);
    return;
  }

  void GetResultFromVerticesID(rvGetResultFromVerticesID& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::vector<int64_t> & listOfVertices) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResultFromVerticesID(_return, sessionID, modelID, analysisID, timeStep, resultID, listOfVertices);
    }
    ifaces_[i]->GetResultFromVerticesID(_return, sessionID, modelID, analysisID, timeStep, resultID, listOfVertices);
    return;
  }

  void GetCoordinatesAndElementsFromMesh(rvGetCoordinatesAndElementsFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const MeshInfo& meshInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoordinatesAndElementsFromMesh(_return, sessionID, modelID, analysisID, timeStep, meshInfo);
    }
    ifaces_[i]->GetCoordinatesAndElementsFromMesh(_return, sessionID, modelID, analysisID, timeStep, meshInfo);
    return;
  }

  void stopAll() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopAll();
    }
    ifaces_[i]->stopAll();
  }

  void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfMeshes(_return, sessionID, modelID, analysisID, stepValue);
    }
    ifaces_[i]->GetListOfMeshes(_return, sessionID, modelID, analysisID, stepValue);
    return;
  }

  void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfAnalyses(_return, sessionID, modelID);
    }
    ifaces_[i]->GetListOfAnalyses(_return, sessionID, modelID);
    return;
  }

  void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfTimeSteps(_return, sessionID, modelID, analysisID);
    }
    ifaces_[i]->GetListOfTimeSteps(_return, sessionID, modelID, analysisID);
    return;
  }

  void GetListOfResultsFromTimeStepAndAnalysis(rvGetListOfResults& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfResultsFromTimeStepAndAnalysis(_return, sessionID, modelID, analysisID, stepValue);
    }
    ifaces_[i]->GetListOfResultsFromTimeStepAndAnalysis(_return, sessionID, modelID, analysisID, stepValue);
    return;
  }

  void GetListOfVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfVerticesFromMesh(_return, sessionID, modelID, analysisID, stepValue, meshID);
    }
    ifaces_[i]->GetListOfVerticesFromMesh(_return, sessionID, modelID, analysisID, stepValue, meshID);
    return;
  }

  void GetListOfSelectedVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID, const std::vector<int64_t> & listOfVerticesID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfSelectedVerticesFromMesh(_return, sessionID, modelID, analysisID, stepValue, meshID, listOfVerticesID);
    }
    ifaces_[i]->GetListOfSelectedVerticesFromMesh(_return, sessionID, modelID, analysisID, stepValue, meshID, listOfVerticesID);
    return;
  }

  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogin(_return, user_name, role, password);
    }
    ifaces_[i]->UserLogin(_return, user_name, role, password);
    return;
  }

  void UserLogout(std::string& _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogout(_return, sessionID);
    }
    ifaces_[i]->UserLogout(_return, sessionID);
    return;
  }

  void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseModel(_return, sessionID, modelID);
    }
    ifaces_[i]->CloseModel(_return, sessionID, modelID);
    return;
  }

  void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetThumbnailOfAModel(_return, sessionID, modelID, imageFile);
    }
    ifaces_[i]->SetThumbnailOfAModel(_return, sessionID, modelID, imageFile);
    return;
  }

  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetThumbnailOfAModel(_return, sessionID, modelID);
    }
    ifaces_[i]->GetThumbnailOfAModel(_return, sessionID, modelID);
    return;
  }

  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetElementOfPointsInSpace(_return, sessionID, modelName, points);
    }
    ifaces_[i]->GetElementOfPointsInSpace(_return, sessionID, modelName, points);
    return;
  }

  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBoundaryOfLocalMesh(_return, sessionID, modelID, meshID, analysisID, time_step);
    }
    ifaces_[i]->GetBoundaryOfLocalMesh(_return, sessionID, modelID, meshID, analysisID, time_step);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class VELaSSCoSMConcurrentClient : virtual public VELaSSCoSMIf {
 public:
  VELaSSCoSMConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VELaSSCoSMConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void statusDL(std::string& _return);
  int32_t send_statusDL();
  void recv_statusDL(std::string& _return, const int32_t seqid);
  void GetListOfModelNames(rvGetListOfModels& _return, const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern);
  int32_t send_GetListOfModelNames(const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern);
  void recv_GetListOfModelNames(rvGetListOfModels& _return, const int32_t seqid);
  void FindModel(rvOpenModel& _return, const std::string& sessionID, const std::string& unique_model_name_pattern, const std::string& requested_access);
  int32_t send_FindModel(const std::string& sessionID, const std::string& unique_model_name_pattern, const std::string& requested_access);
  void recv_FindModel(rvOpenModel& _return, const int32_t seqid);
  void GetResultFromVerticesID(rvGetResultFromVerticesID& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::vector<int64_t> & listOfVertices);
  int32_t send_GetResultFromVerticesID(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::vector<int64_t> & listOfVertices);
  void recv_GetResultFromVerticesID(rvGetResultFromVerticesID& _return, const int32_t seqid);
  void GetCoordinatesAndElementsFromMesh(rvGetCoordinatesAndElementsFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const MeshInfo& meshInfo);
  int32_t send_GetCoordinatesAndElementsFromMesh(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const MeshInfo& meshInfo);
  void recv_GetCoordinatesAndElementsFromMesh(rvGetCoordinatesAndElementsFromMesh& _return, const int32_t seqid);
  void stopAll();
  int32_t send_stopAll();
  void recv_stopAll(const int32_t seqid);
  void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  int32_t send_GetListOfMeshes(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  void recv_GetListOfMeshes(rvGetListOfMeshes& _return, const int32_t seqid);
  void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID);
  int32_t send_GetListOfAnalyses(const std::string& sessionID, const std::string& modelID);
  void recv_GetListOfAnalyses(rvGetListOfAnalyses& _return, const int32_t seqid);
  void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  int32_t send_GetListOfTimeSteps(const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  void recv_GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const int32_t seqid);
  void GetListOfResultsFromTimeStepAndAnalysis(rvGetListOfResults& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  int32_t send_GetListOfResultsFromTimeStepAndAnalysis(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue);
  void recv_GetListOfResultsFromTimeStepAndAnalysis(rvGetListOfResults& _return, const int32_t seqid);
  void GetListOfVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID);
  int32_t send_GetListOfVerticesFromMesh(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID);
  void recv_GetListOfVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const int32_t seqid);
  void GetListOfSelectedVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID, const std::vector<int64_t> & listOfVerticesID);
  int32_t send_GetListOfSelectedVerticesFromMesh(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double stepValue, const int32_t meshID, const std::vector<int64_t> & listOfVerticesID);
  void recv_GetListOfSelectedVerticesFromMesh(rvGetListOfVerticesFromMesh& _return, const int32_t seqid);
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password);
  int32_t send_UserLogin(const std::string& user_name, const std::string& role, const std::string& password);
  void recv_UserLogin(std::string& _return, const int32_t seqid);
  void UserLogout(std::string& _return, const std::string& sessionID);
  int32_t send_UserLogout(const std::string& sessionID);
  void recv_UserLogout(std::string& _return, const int32_t seqid);
  void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelID);
  int32_t send_CloseModel(const std::string& sessionID, const std::string& modelID);
  void recv_CloseModel(std::string& _return, const int32_t seqid);
  void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  int32_t send_SetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  void recv_SetThumbnailOfAModel(std::string& _return, const int32_t seqid);
  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID);
  int32_t send_GetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID);
  void recv_GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const int32_t seqid);
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  int32_t send_GetElementOfPointsInSpace(const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  void recv_GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const int32_t seqid);
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  int32_t send_GetBoundaryOfLocalMesh(const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  void recv_GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
