/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VELaSSCoSM_H
#define VELaSSCoSM_H

#include <thrift/TDispatchProcessor.h>
#include "VELaSSCoSM_types.h"



class VELaSSCoSMIf {
 public:
  virtual ~VELaSSCoSMIf() {}

  /**
   * Return the status of the different services
   * which run on the Data Layer.
   */
  virtual void statusDL(std::string& _return) = 0;

  /**
   * Data Query operations
   * 
   * @param sessionID
   * @param model_group_qualifier
   * @param model_name_pattern
   */
  virtual void GetListOfModelNames(rvGetListOfModels& _return, const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern) = 0;
  virtual void FindModelFS(rvOpenModel& _return, const std::string& sessionID, const std::string& unique_model_name_pattern) = 0;

  /**
   * Return the status of the different services
   * which run on the Data Layer.
   * @return string - returns a structured list of avialbe vertices,
   * with the attached list of double
   * if errors occur the contect is also returned here?
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param timeStep
   * @param resultID
   * @param listOfVertices
   */
  virtual void GetResultFromVerticesID(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::string& listOfVertices) = 0;

  /**
   * Stop Data Layer
   */
  virtual void stopAll() = 0;

  /**
   * returns a session if if the user exists with the specified password and the specified role or an empty role.
   * 
   * @param user_name
   * @param role
   * @param password
   */
  virtual void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) = 0;

  /**
   * Stop access to the system by a given session id and release all resources held by that session
   * 
   * @param sessionID
   */
  virtual void UserLogout(std::string& _return, const std::string& sessionID) = 0;

  /**
   * Description: Removes the possibility to access a model via a previously assigned
   * GUID (OpenModel). Corresponding housekeeping is wrapped up.
   * 
   * @param sessionID
   * @param modelName
   */
  virtual void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelName) = 0;

  /**
   * Description: Store a new thumbnail of a model
   * 
   * @param sessionID
   * @param modelID
   * @param imageFile
   */
  virtual void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile) = 0;

  /**
   * Description: Return thumbnail of a model.
   * 
   * @param sessionID
   * @param modelID
   */
  virtual void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID) = 0;

  /**
   * For each point in the input parameter points, the method returns data about the element that contains the point.
   * The number of elements in the returned list of elements shall be the same as the number of points in the input parameter.
   * If the method does not find an element for a point it shall return a dummy element with id equal to -1.
   * 
   * @param sessionID
   * @param modelName
   * @param points
   */
  virtual void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points) = 0;

  /**
   * GetBoundaryOfLocalMesh will get the partial tetrahedral elements, calculate and output the unique triangles,
   * i.e. triangles that are not shared between two or more elements.
   * 
   * @param sessionID
   * @param modelID
   * @param meshID
   * @param analysisID
   * @param time_step
   */
  virtual void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step) = 0;

  /**
   * Retrieves the list of time steps for a given model and analysis.
   * 
   * @param sessionID
   * @param modelID
   */
  virtual void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID) = 0;

  /**
   * Retrieves the list of time steps for a given model and analysis.
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   */
  virtual void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID) = 0;

  /**
   * Returns a list of meshes present for the given time-step of that analysis.
   * If analysis == "" and step-value == -1 then the list will be of the 'static' meshes.
   * If analysis != "" and step-value != -1 then the list will be of the 'dynamic' meshes
   * that are present on that step-values of that analysis.
   * 
   * @param sessionID
   * @param modelID
   * @param analysisID
   * @param timeStep
   */
  virtual void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep) = 0;
};

class VELaSSCoSMIfFactory {
 public:
  typedef VELaSSCoSMIf Handler;

  virtual ~VELaSSCoSMIfFactory() {}

  virtual VELaSSCoSMIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VELaSSCoSMIf* /* handler */) = 0;
};

class VELaSSCoSMIfSingletonFactory : virtual public VELaSSCoSMIfFactory {
 public:
  VELaSSCoSMIfSingletonFactory(const boost::shared_ptr<VELaSSCoSMIf>& iface) : iface_(iface) {}
  virtual ~VELaSSCoSMIfSingletonFactory() {}

  virtual VELaSSCoSMIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VELaSSCoSMIf* /* handler */) {}

 protected:
  boost::shared_ptr<VELaSSCoSMIf> iface_;
};

class VELaSSCoSMNull : virtual public VELaSSCoSMIf {
 public:
  virtual ~VELaSSCoSMNull() {}
  void statusDL(std::string& /* _return */) {
    return;
  }
  void GetListOfModelNames(rvGetListOfModels& /* _return */, const std::string& /* sessionID */, const std::string& /* model_group_qualifier */, const std::string& /* model_name_pattern */) {
    return;
  }
  void FindModelFS(rvOpenModel& /* _return */, const std::string& /* sessionID */, const std::string& /* unique_model_name_pattern */) {
    return;
  }
  void GetResultFromVerticesID(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* timeStep */, const std::string& /* resultID */, const std::string& /* listOfVertices */) {
    return;
  }
  void stopAll() {
    return;
  }
  void UserLogin(std::string& /* _return */, const std::string& /* user_name */, const std::string& /* role */, const std::string& /* password */) {
    return;
  }
  void UserLogout(std::string& /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void CloseModel(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* modelName */) {
    return;
  }
  void SetThumbnailOfAModel(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* imageFile */) {
    return;
  }
  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */) {
    return;
  }
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& /* _return */, const std::string& /* sessionID */, const std::string& /* modelName */, const std::vector<Point> & /* points */) {
    return;
  }
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* meshID */, const std::string& /* analysisID */, const double /* time_step */) {
    return;
  }
  void GetListOfAnalyses(rvGetListOfAnalyses& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */) {
    return;
  }
  void GetListOfTimeSteps(rvGetListOfTimeSteps& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */) {
    return;
  }
  void GetListOfMeshes(rvGetListOfMeshes& /* _return */, const std::string& /* sessionID */, const std::string& /* modelID */, const std::string& /* analysisID */, const double /* timeStep */) {
    return;
  }
};


class VELaSSCoSM_statusDL_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VELaSSCoSM_statusDL_args(const VELaSSCoSM_statusDL_args&);
  VELaSSCoSM_statusDL_args& operator=(const VELaSSCoSM_statusDL_args&);
  VELaSSCoSM_statusDL_args() {
  }

  virtual ~VELaSSCoSM_statusDL_args() throw();

  bool operator == (const VELaSSCoSM_statusDL_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VELaSSCoSM_statusDL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_statusDL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_statusDL_args& obj);
};


class VELaSSCoSM_statusDL_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VELaSSCoSM_statusDL_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_statusDL_pargs& obj);
};

typedef struct _VELaSSCoSM_statusDL_result__isset {
  _VELaSSCoSM_statusDL_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_statusDL_result__isset;

class VELaSSCoSM_statusDL_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VELaSSCoSM_statusDL_result(const VELaSSCoSM_statusDL_result&);
  VELaSSCoSM_statusDL_result& operator=(const VELaSSCoSM_statusDL_result&);
  VELaSSCoSM_statusDL_result() : success() {
  }

  virtual ~VELaSSCoSM_statusDL_result() throw();
  std::string success;

  _VELaSSCoSM_statusDL_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_statusDL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_statusDL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_statusDL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_statusDL_result& obj);
};

typedef struct _VELaSSCoSM_statusDL_presult__isset {
  _VELaSSCoSM_statusDL_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_statusDL_presult__isset;

class VELaSSCoSM_statusDL_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VELaSSCoSM_statusDL_presult() throw();
  std::string* success;

  _VELaSSCoSM_statusDL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_statusDL_presult& obj);
};

typedef struct _VELaSSCoSM_GetListOfModelNames_args__isset {
  _VELaSSCoSM_GetListOfModelNames_args__isset() : sessionID(false), model_group_qualifier(false), model_name_pattern(false) {}
  bool sessionID :1;
  bool model_group_qualifier :1;
  bool model_name_pattern :1;
} _VELaSSCoSM_GetListOfModelNames_args__isset;

class VELaSSCoSM_GetListOfModelNames_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  VELaSSCoSM_GetListOfModelNames_args(const VELaSSCoSM_GetListOfModelNames_args&);
  VELaSSCoSM_GetListOfModelNames_args& operator=(const VELaSSCoSM_GetListOfModelNames_args&);
  VELaSSCoSM_GetListOfModelNames_args() : sessionID(), model_group_qualifier(), model_name_pattern() {
  }

  virtual ~VELaSSCoSM_GetListOfModelNames_args() throw();
  std::string sessionID;
  std::string model_group_qualifier;
  std::string model_name_pattern;

  _VELaSSCoSM_GetListOfModelNames_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_model_group_qualifier(const std::string& val);

  void __set_model_name_pattern(const std::string& val);

  bool operator == (const VELaSSCoSM_GetListOfModelNames_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(model_group_qualifier == rhs.model_group_qualifier))
      return false;
    if (!(model_name_pattern == rhs.model_name_pattern))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfModelNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfModelNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfModelNames_args& obj);
};


class VELaSSCoSM_GetListOfModelNames_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~VELaSSCoSM_GetListOfModelNames_pargs() throw();
  const std::string* sessionID;
  const std::string* model_group_qualifier;
  const std::string* model_name_pattern;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfModelNames_pargs& obj);
};

typedef struct _VELaSSCoSM_GetListOfModelNames_result__isset {
  _VELaSSCoSM_GetListOfModelNames_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfModelNames_result__isset;

class VELaSSCoSM_GetListOfModelNames_result {
 public:

  static const char* ascii_fingerprint; // = "9FF622309718E2479AE3E37AADE5C533";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xF6,0x22,0x30,0x97,0x18,0xE2,0x47,0x9A,0xE3,0xE3,0x7A,0xAD,0xE5,0xC5,0x33};

  VELaSSCoSM_GetListOfModelNames_result(const VELaSSCoSM_GetListOfModelNames_result&);
  VELaSSCoSM_GetListOfModelNames_result& operator=(const VELaSSCoSM_GetListOfModelNames_result&);
  VELaSSCoSM_GetListOfModelNames_result() {
  }

  virtual ~VELaSSCoSM_GetListOfModelNames_result() throw();
  rvGetListOfModels success;

  _VELaSSCoSM_GetListOfModelNames_result__isset __isset;

  void __set_success(const rvGetListOfModels& val);

  bool operator == (const VELaSSCoSM_GetListOfModelNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfModelNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfModelNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfModelNames_result& obj);
};

typedef struct _VELaSSCoSM_GetListOfModelNames_presult__isset {
  _VELaSSCoSM_GetListOfModelNames_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfModelNames_presult__isset;

class VELaSSCoSM_GetListOfModelNames_presult {
 public:

  static const char* ascii_fingerprint; // = "9FF622309718E2479AE3E37AADE5C533";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xF6,0x22,0x30,0x97,0x18,0xE2,0x47,0x9A,0xE3,0xE3,0x7A,0xAD,0xE5,0xC5,0x33};


  virtual ~VELaSSCoSM_GetListOfModelNames_presult() throw();
  rvGetListOfModels* success;

  _VELaSSCoSM_GetListOfModelNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfModelNames_presult& obj);
};

typedef struct _VELaSSCoSM_FindModelFS_args__isset {
  _VELaSSCoSM_FindModelFS_args__isset() : sessionID(false), unique_model_name_pattern(false) {}
  bool sessionID :1;
  bool unique_model_name_pattern :1;
} _VELaSSCoSM_FindModelFS_args__isset;

class VELaSSCoSM_FindModelFS_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  VELaSSCoSM_FindModelFS_args(const VELaSSCoSM_FindModelFS_args&);
  VELaSSCoSM_FindModelFS_args& operator=(const VELaSSCoSM_FindModelFS_args&);
  VELaSSCoSM_FindModelFS_args() : sessionID(), unique_model_name_pattern() {
  }

  virtual ~VELaSSCoSM_FindModelFS_args() throw();
  std::string sessionID;
  std::string unique_model_name_pattern;

  _VELaSSCoSM_FindModelFS_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_unique_model_name_pattern(const std::string& val);

  bool operator == (const VELaSSCoSM_FindModelFS_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(unique_model_name_pattern == rhs.unique_model_name_pattern))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_FindModelFS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_FindModelFS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_FindModelFS_args& obj);
};


class VELaSSCoSM_FindModelFS_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~VELaSSCoSM_FindModelFS_pargs() throw();
  const std::string* sessionID;
  const std::string* unique_model_name_pattern;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_FindModelFS_pargs& obj);
};

typedef struct _VELaSSCoSM_FindModelFS_result__isset {
  _VELaSSCoSM_FindModelFS_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_FindModelFS_result__isset;

class VELaSSCoSM_FindModelFS_result {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};

  VELaSSCoSM_FindModelFS_result(const VELaSSCoSM_FindModelFS_result&);
  VELaSSCoSM_FindModelFS_result& operator=(const VELaSSCoSM_FindModelFS_result&);
  VELaSSCoSM_FindModelFS_result() {
  }

  virtual ~VELaSSCoSM_FindModelFS_result() throw();
  rvOpenModel success;

  _VELaSSCoSM_FindModelFS_result__isset __isset;

  void __set_success(const rvOpenModel& val);

  bool operator == (const VELaSSCoSM_FindModelFS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_FindModelFS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_FindModelFS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_FindModelFS_result& obj);
};

typedef struct _VELaSSCoSM_FindModelFS_presult__isset {
  _VELaSSCoSM_FindModelFS_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_FindModelFS_presult__isset;

class VELaSSCoSM_FindModelFS_presult {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};


  virtual ~VELaSSCoSM_FindModelFS_presult() throw();
  rvOpenModel* success;

  _VELaSSCoSM_FindModelFS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_FindModelFS_presult& obj);
};

typedef struct _VELaSSCoSM_GetResultFromVerticesID_args__isset {
  _VELaSSCoSM_GetResultFromVerticesID_args__isset() : sessionID(false), modelID(false), analysisID(false), timeStep(false), resultID(false), listOfVertices(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool timeStep :1;
  bool resultID :1;
  bool listOfVertices :1;
} _VELaSSCoSM_GetResultFromVerticesID_args__isset;

class VELaSSCoSM_GetResultFromVerticesID_args {
 public:

  static const char* ascii_fingerprint; // = "028F20434CE844656C7FFE290B942938";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x8F,0x20,0x43,0x4C,0xE8,0x44,0x65,0x6C,0x7F,0xFE,0x29,0x0B,0x94,0x29,0x38};

  VELaSSCoSM_GetResultFromVerticesID_args(const VELaSSCoSM_GetResultFromVerticesID_args&);
  VELaSSCoSM_GetResultFromVerticesID_args& operator=(const VELaSSCoSM_GetResultFromVerticesID_args&);
  VELaSSCoSM_GetResultFromVerticesID_args() : sessionID(), modelID(), analysisID(), timeStep(0), resultID(), listOfVertices() {
  }

  virtual ~VELaSSCoSM_GetResultFromVerticesID_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double timeStep;
  std::string resultID;
  std::string listOfVertices;

  _VELaSSCoSM_GetResultFromVerticesID_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_timeStep(const double val);

  void __set_resultID(const std::string& val);

  void __set_listOfVertices(const std::string& val);

  bool operator == (const VELaSSCoSM_GetResultFromVerticesID_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(timeStep == rhs.timeStep))
      return false;
    if (!(resultID == rhs.resultID))
      return false;
    if (!(listOfVertices == rhs.listOfVertices))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetResultFromVerticesID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetResultFromVerticesID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetResultFromVerticesID_args& obj);
};


class VELaSSCoSM_GetResultFromVerticesID_pargs {
 public:

  static const char* ascii_fingerprint; // = "028F20434CE844656C7FFE290B942938";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x8F,0x20,0x43,0x4C,0xE8,0x44,0x65,0x6C,0x7F,0xFE,0x29,0x0B,0x94,0x29,0x38};


  virtual ~VELaSSCoSM_GetResultFromVerticesID_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* timeStep;
  const std::string* resultID;
  const std::string* listOfVertices;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetResultFromVerticesID_pargs& obj);
};

typedef struct _VELaSSCoSM_GetResultFromVerticesID_result__isset {
  _VELaSSCoSM_GetResultFromVerticesID_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetResultFromVerticesID_result__isset;

class VELaSSCoSM_GetResultFromVerticesID_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VELaSSCoSM_GetResultFromVerticesID_result(const VELaSSCoSM_GetResultFromVerticesID_result&);
  VELaSSCoSM_GetResultFromVerticesID_result& operator=(const VELaSSCoSM_GetResultFromVerticesID_result&);
  VELaSSCoSM_GetResultFromVerticesID_result() : success() {
  }

  virtual ~VELaSSCoSM_GetResultFromVerticesID_result() throw();
  std::string success;

  _VELaSSCoSM_GetResultFromVerticesID_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_GetResultFromVerticesID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetResultFromVerticesID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetResultFromVerticesID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetResultFromVerticesID_result& obj);
};

typedef struct _VELaSSCoSM_GetResultFromVerticesID_presult__isset {
  _VELaSSCoSM_GetResultFromVerticesID_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetResultFromVerticesID_presult__isset;

class VELaSSCoSM_GetResultFromVerticesID_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VELaSSCoSM_GetResultFromVerticesID_presult() throw();
  std::string* success;

  _VELaSSCoSM_GetResultFromVerticesID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetResultFromVerticesID_presult& obj);
};


class VELaSSCoSM_stopAll_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VELaSSCoSM_stopAll_args(const VELaSSCoSM_stopAll_args&);
  VELaSSCoSM_stopAll_args& operator=(const VELaSSCoSM_stopAll_args&);
  VELaSSCoSM_stopAll_args() {
  }

  virtual ~VELaSSCoSM_stopAll_args() throw();

  bool operator == (const VELaSSCoSM_stopAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VELaSSCoSM_stopAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_stopAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_stopAll_args& obj);
};


class VELaSSCoSM_stopAll_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VELaSSCoSM_stopAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_stopAll_pargs& obj);
};


class VELaSSCoSM_stopAll_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VELaSSCoSM_stopAll_result(const VELaSSCoSM_stopAll_result&);
  VELaSSCoSM_stopAll_result& operator=(const VELaSSCoSM_stopAll_result&);
  VELaSSCoSM_stopAll_result() {
  }

  virtual ~VELaSSCoSM_stopAll_result() throw();

  bool operator == (const VELaSSCoSM_stopAll_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VELaSSCoSM_stopAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_stopAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_stopAll_result& obj);
};


class VELaSSCoSM_stopAll_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VELaSSCoSM_stopAll_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_stopAll_presult& obj);
};

typedef struct _VELaSSCoSM_UserLogin_args__isset {
  _VELaSSCoSM_UserLogin_args__isset() : user_name(false), role(false), password(false) {}
  bool user_name :1;
  bool role :1;
  bool password :1;
} _VELaSSCoSM_UserLogin_args__isset;

class VELaSSCoSM_UserLogin_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  VELaSSCoSM_UserLogin_args(const VELaSSCoSM_UserLogin_args&);
  VELaSSCoSM_UserLogin_args& operator=(const VELaSSCoSM_UserLogin_args&);
  VELaSSCoSM_UserLogin_args() : user_name(), role(), password() {
  }

  virtual ~VELaSSCoSM_UserLogin_args() throw();
  std::string user_name;
  std::string role;
  std::string password;

  _VELaSSCoSM_UserLogin_args__isset __isset;

  void __set_user_name(const std::string& val);

  void __set_role(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogin_args & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogin_args& obj);
};


class VELaSSCoSM_UserLogin_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~VELaSSCoSM_UserLogin_pargs() throw();
  const std::string* user_name;
  const std::string* role;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogin_pargs& obj);
};

typedef struct _VELaSSCoSM_UserLogin_result__isset {
  _VELaSSCoSM_UserLogin_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogin_result__isset;

class VELaSSCoSM_UserLogin_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VELaSSCoSM_UserLogin_result(const VELaSSCoSM_UserLogin_result&);
  VELaSSCoSM_UserLogin_result& operator=(const VELaSSCoSM_UserLogin_result&);
  VELaSSCoSM_UserLogin_result() : success() {
  }

  virtual ~VELaSSCoSM_UserLogin_result() throw();
  std::string success;

  _VELaSSCoSM_UserLogin_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogin_result& obj);
};

typedef struct _VELaSSCoSM_UserLogin_presult__isset {
  _VELaSSCoSM_UserLogin_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogin_presult__isset;

class VELaSSCoSM_UserLogin_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VELaSSCoSM_UserLogin_presult() throw();
  std::string* success;

  _VELaSSCoSM_UserLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogin_presult& obj);
};

typedef struct _VELaSSCoSM_UserLogout_args__isset {
  _VELaSSCoSM_UserLogout_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _VELaSSCoSM_UserLogout_args__isset;

class VELaSSCoSM_UserLogout_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VELaSSCoSM_UserLogout_args(const VELaSSCoSM_UserLogout_args&);
  VELaSSCoSM_UserLogout_args& operator=(const VELaSSCoSM_UserLogout_args&);
  VELaSSCoSM_UserLogout_args() : sessionID() {
  }

  virtual ~VELaSSCoSM_UserLogout_args() throw();
  std::string sessionID;

  _VELaSSCoSM_UserLogout_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogout_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogout_args& obj);
};


class VELaSSCoSM_UserLogout_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~VELaSSCoSM_UserLogout_pargs() throw();
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogout_pargs& obj);
};

typedef struct _VELaSSCoSM_UserLogout_result__isset {
  _VELaSSCoSM_UserLogout_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogout_result__isset;

class VELaSSCoSM_UserLogout_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VELaSSCoSM_UserLogout_result(const VELaSSCoSM_UserLogout_result&);
  VELaSSCoSM_UserLogout_result& operator=(const VELaSSCoSM_UserLogout_result&);
  VELaSSCoSM_UserLogout_result() : success() {
  }

  virtual ~VELaSSCoSM_UserLogout_result() throw();
  std::string success;

  _VELaSSCoSM_UserLogout_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_UserLogout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_UserLogout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_UserLogout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogout_result& obj);
};

typedef struct _VELaSSCoSM_UserLogout_presult__isset {
  _VELaSSCoSM_UserLogout_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_UserLogout_presult__isset;

class VELaSSCoSM_UserLogout_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VELaSSCoSM_UserLogout_presult() throw();
  std::string* success;

  _VELaSSCoSM_UserLogout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_UserLogout_presult& obj);
};

typedef struct _VELaSSCoSM_CloseModel_args__isset {
  _VELaSSCoSM_CloseModel_args__isset() : sessionID(false), modelName(false) {}
  bool sessionID :1;
  bool modelName :1;
} _VELaSSCoSM_CloseModel_args__isset;

class VELaSSCoSM_CloseModel_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  VELaSSCoSM_CloseModel_args(const VELaSSCoSM_CloseModel_args&);
  VELaSSCoSM_CloseModel_args& operator=(const VELaSSCoSM_CloseModel_args&);
  VELaSSCoSM_CloseModel_args() : sessionID(), modelName() {
  }

  virtual ~VELaSSCoSM_CloseModel_args() throw();
  std::string sessionID;
  std::string modelName;

  _VELaSSCoSM_CloseModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelName(const std::string& val);

  bool operator == (const VELaSSCoSM_CloseModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelName == rhs.modelName))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_CloseModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_CloseModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_CloseModel_args& obj);
};


class VELaSSCoSM_CloseModel_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~VELaSSCoSM_CloseModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_CloseModel_pargs& obj);
};

typedef struct _VELaSSCoSM_CloseModel_result__isset {
  _VELaSSCoSM_CloseModel_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_CloseModel_result__isset;

class VELaSSCoSM_CloseModel_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VELaSSCoSM_CloseModel_result(const VELaSSCoSM_CloseModel_result&);
  VELaSSCoSM_CloseModel_result& operator=(const VELaSSCoSM_CloseModel_result&);
  VELaSSCoSM_CloseModel_result() : success() {
  }

  virtual ~VELaSSCoSM_CloseModel_result() throw();
  std::string success;

  _VELaSSCoSM_CloseModel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_CloseModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_CloseModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_CloseModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_CloseModel_result& obj);
};

typedef struct _VELaSSCoSM_CloseModel_presult__isset {
  _VELaSSCoSM_CloseModel_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_CloseModel_presult__isset;

class VELaSSCoSM_CloseModel_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VELaSSCoSM_CloseModel_presult() throw();
  std::string* success;

  _VELaSSCoSM_CloseModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_CloseModel_presult& obj);
};

typedef struct _VELaSSCoSM_SetThumbnailOfAModel_args__isset {
  _VELaSSCoSM_SetThumbnailOfAModel_args__isset() : sessionID(false), modelID(false), imageFile(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool imageFile :1;
} _VELaSSCoSM_SetThumbnailOfAModel_args__isset;

class VELaSSCoSM_SetThumbnailOfAModel_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  VELaSSCoSM_SetThumbnailOfAModel_args(const VELaSSCoSM_SetThumbnailOfAModel_args&);
  VELaSSCoSM_SetThumbnailOfAModel_args& operator=(const VELaSSCoSM_SetThumbnailOfAModel_args&);
  VELaSSCoSM_SetThumbnailOfAModel_args() : sessionID(), modelID(), imageFile() {
  }

  virtual ~VELaSSCoSM_SetThumbnailOfAModel_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string imageFile;

  _VELaSSCoSM_SetThumbnailOfAModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_imageFile(const std::string& val);

  bool operator == (const VELaSSCoSM_SetThumbnailOfAModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(imageFile == rhs.imageFile))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_SetThumbnailOfAModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_SetThumbnailOfAModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_SetThumbnailOfAModel_args& obj);
};


class VELaSSCoSM_SetThumbnailOfAModel_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~VELaSSCoSM_SetThumbnailOfAModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* imageFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_SetThumbnailOfAModel_pargs& obj);
};

typedef struct _VELaSSCoSM_SetThumbnailOfAModel_result__isset {
  _VELaSSCoSM_SetThumbnailOfAModel_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_SetThumbnailOfAModel_result__isset;

class VELaSSCoSM_SetThumbnailOfAModel_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VELaSSCoSM_SetThumbnailOfAModel_result(const VELaSSCoSM_SetThumbnailOfAModel_result&);
  VELaSSCoSM_SetThumbnailOfAModel_result& operator=(const VELaSSCoSM_SetThumbnailOfAModel_result&);
  VELaSSCoSM_SetThumbnailOfAModel_result() : success() {
  }

  virtual ~VELaSSCoSM_SetThumbnailOfAModel_result() throw();
  std::string success;

  _VELaSSCoSM_SetThumbnailOfAModel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VELaSSCoSM_SetThumbnailOfAModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_SetThumbnailOfAModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_SetThumbnailOfAModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_SetThumbnailOfAModel_result& obj);
};

typedef struct _VELaSSCoSM_SetThumbnailOfAModel_presult__isset {
  _VELaSSCoSM_SetThumbnailOfAModel_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_SetThumbnailOfAModel_presult__isset;

class VELaSSCoSM_SetThumbnailOfAModel_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VELaSSCoSM_SetThumbnailOfAModel_presult() throw();
  std::string* success;

  _VELaSSCoSM_SetThumbnailOfAModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_SetThumbnailOfAModel_presult& obj);
};

typedef struct _VELaSSCoSM_GetThumbnailOfAModel_args__isset {
  _VELaSSCoSM_GetThumbnailOfAModel_args__isset() : sessionID(false), modelID(false) {}
  bool sessionID :1;
  bool modelID :1;
} _VELaSSCoSM_GetThumbnailOfAModel_args__isset;

class VELaSSCoSM_GetThumbnailOfAModel_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  VELaSSCoSM_GetThumbnailOfAModel_args(const VELaSSCoSM_GetThumbnailOfAModel_args&);
  VELaSSCoSM_GetThumbnailOfAModel_args& operator=(const VELaSSCoSM_GetThumbnailOfAModel_args&);
  VELaSSCoSM_GetThumbnailOfAModel_args() : sessionID(), modelID() {
  }

  virtual ~VELaSSCoSM_GetThumbnailOfAModel_args() throw();
  std::string sessionID;
  std::string modelID;

  _VELaSSCoSM_GetThumbnailOfAModel_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const VELaSSCoSM_GetThumbnailOfAModel_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetThumbnailOfAModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetThumbnailOfAModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetThumbnailOfAModel_args& obj);
};


class VELaSSCoSM_GetThumbnailOfAModel_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~VELaSSCoSM_GetThumbnailOfAModel_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetThumbnailOfAModel_pargs& obj);
};

typedef struct _VELaSSCoSM_GetThumbnailOfAModel_result__isset {
  _VELaSSCoSM_GetThumbnailOfAModel_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetThumbnailOfAModel_result__isset;

class VELaSSCoSM_GetThumbnailOfAModel_result {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};

  VELaSSCoSM_GetThumbnailOfAModel_result(const VELaSSCoSM_GetThumbnailOfAModel_result&);
  VELaSSCoSM_GetThumbnailOfAModel_result& operator=(const VELaSSCoSM_GetThumbnailOfAModel_result&);
  VELaSSCoSM_GetThumbnailOfAModel_result() {
  }

  virtual ~VELaSSCoSM_GetThumbnailOfAModel_result() throw();
  rvGetThumbnailOfAModel success;

  _VELaSSCoSM_GetThumbnailOfAModel_result__isset __isset;

  void __set_success(const rvGetThumbnailOfAModel& val);

  bool operator == (const VELaSSCoSM_GetThumbnailOfAModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetThumbnailOfAModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetThumbnailOfAModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetThumbnailOfAModel_result& obj);
};

typedef struct _VELaSSCoSM_GetThumbnailOfAModel_presult__isset {
  _VELaSSCoSM_GetThumbnailOfAModel_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetThumbnailOfAModel_presult__isset;

class VELaSSCoSM_GetThumbnailOfAModel_presult {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};


  virtual ~VELaSSCoSM_GetThumbnailOfAModel_presult() throw();
  rvGetThumbnailOfAModel* success;

  _VELaSSCoSM_GetThumbnailOfAModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetThumbnailOfAModel_presult& obj);
};

typedef struct _VELaSSCoSM_GetElementOfPointsInSpace_args__isset {
  _VELaSSCoSM_GetElementOfPointsInSpace_args__isset() : sessionID(false), modelName(false), points(false) {}
  bool sessionID :1;
  bool modelName :1;
  bool points :1;
} _VELaSSCoSM_GetElementOfPointsInSpace_args__isset;

class VELaSSCoSM_GetElementOfPointsInSpace_args {
 public:

  static const char* ascii_fingerprint; // = "70A278E3A0C29BBE8F10CD2C44840788";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xA2,0x78,0xE3,0xA0,0xC2,0x9B,0xBE,0x8F,0x10,0xCD,0x2C,0x44,0x84,0x07,0x88};

  VELaSSCoSM_GetElementOfPointsInSpace_args(const VELaSSCoSM_GetElementOfPointsInSpace_args&);
  VELaSSCoSM_GetElementOfPointsInSpace_args& operator=(const VELaSSCoSM_GetElementOfPointsInSpace_args&);
  VELaSSCoSM_GetElementOfPointsInSpace_args() : sessionID(), modelName() {
  }

  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_args() throw();
  std::string sessionID;
  std::string modelName;
  std::vector<Point>  points;

  _VELaSSCoSM_GetElementOfPointsInSpace_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelName(const std::string& val);

  void __set_points(const std::vector<Point> & val);

  bool operator == (const VELaSSCoSM_GetElementOfPointsInSpace_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelName == rhs.modelName))
      return false;
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetElementOfPointsInSpace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetElementOfPointsInSpace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetElementOfPointsInSpace_args& obj);
};


class VELaSSCoSM_GetElementOfPointsInSpace_pargs {
 public:

  static const char* ascii_fingerprint; // = "70A278E3A0C29BBE8F10CD2C44840788";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xA2,0x78,0xE3,0xA0,0xC2,0x9B,0xBE,0x8F,0x10,0xCD,0x2C,0x44,0x84,0x07,0x88};


  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_pargs() throw();
  const std::string* sessionID;
  const std::string* modelName;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetElementOfPointsInSpace_pargs& obj);
};

typedef struct _VELaSSCoSM_GetElementOfPointsInSpace_result__isset {
  _VELaSSCoSM_GetElementOfPointsInSpace_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetElementOfPointsInSpace_result__isset;

class VELaSSCoSM_GetElementOfPointsInSpace_result {
 public:

  static const char* ascii_fingerprint; // = "732527BE8EF470CADCE76E88B5AFDC7B";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x25,0x27,0xBE,0x8E,0xF4,0x70,0xCA,0xDC,0xE7,0x6E,0x88,0xB5,0xAF,0xDC,0x7B};

  VELaSSCoSM_GetElementOfPointsInSpace_result(const VELaSSCoSM_GetElementOfPointsInSpace_result&);
  VELaSSCoSM_GetElementOfPointsInSpace_result& operator=(const VELaSSCoSM_GetElementOfPointsInSpace_result&);
  VELaSSCoSM_GetElementOfPointsInSpace_result() {
  }

  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_result() throw();
  rvGetElementOfPointsInSpace success;

  _VELaSSCoSM_GetElementOfPointsInSpace_result__isset __isset;

  void __set_success(const rvGetElementOfPointsInSpace& val);

  bool operator == (const VELaSSCoSM_GetElementOfPointsInSpace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetElementOfPointsInSpace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetElementOfPointsInSpace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetElementOfPointsInSpace_result& obj);
};

typedef struct _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset {
  _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset;

class VELaSSCoSM_GetElementOfPointsInSpace_presult {
 public:

  static const char* ascii_fingerprint; // = "732527BE8EF470CADCE76E88B5AFDC7B";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x25,0x27,0xBE,0x8E,0xF4,0x70,0xCA,0xDC,0xE7,0x6E,0x88,0xB5,0xAF,0xDC,0x7B};


  virtual ~VELaSSCoSM_GetElementOfPointsInSpace_presult() throw();
  rvGetElementOfPointsInSpace* success;

  _VELaSSCoSM_GetElementOfPointsInSpace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetElementOfPointsInSpace_presult& obj);
};

typedef struct _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset {
  _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset() : sessionID(false), modelID(false), meshID(false), analysisID(false), time_step(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool meshID :1;
  bool analysisID :1;
  bool time_step :1;
} _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset;

class VELaSSCoSM_GetBoundaryOfLocalMesh_args {
 public:

  static const char* ascii_fingerprint; // = "57C2D87CBB509D7D24DDCE43C18AD56C";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC2,0xD8,0x7C,0xBB,0x50,0x9D,0x7D,0x24,0xDD,0xCE,0x43,0xC1,0x8A,0xD5,0x6C};

  VELaSSCoSM_GetBoundaryOfLocalMesh_args(const VELaSSCoSM_GetBoundaryOfLocalMesh_args&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_args& operator=(const VELaSSCoSM_GetBoundaryOfLocalMesh_args&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_args() : sessionID(), modelID(), meshID(), analysisID(), time_step(0) {
  }

  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string meshID;
  std::string analysisID;
  double time_step;

  _VELaSSCoSM_GetBoundaryOfLocalMesh_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_meshID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_time_step(const double val);

  bool operator == (const VELaSSCoSM_GetBoundaryOfLocalMesh_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(meshID == rhs.meshID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(time_step == rhs.time_step))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetBoundaryOfLocalMesh_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetBoundaryOfLocalMesh_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetBoundaryOfLocalMesh_args& obj);
};


class VELaSSCoSM_GetBoundaryOfLocalMesh_pargs {
 public:

  static const char* ascii_fingerprint; // = "57C2D87CBB509D7D24DDCE43C18AD56C";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC2,0xD8,0x7C,0xBB,0x50,0x9D,0x7D,0x24,0xDD,0xCE,0x43,0xC1,0x8A,0xD5,0x6C};


  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* meshID;
  const std::string* analysisID;
  const double* time_step;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetBoundaryOfLocalMesh_pargs& obj);
};

typedef struct _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset {
  _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset;

class VELaSSCoSM_GetBoundaryOfLocalMesh_result {
 public:

  static const char* ascii_fingerprint; // = "D472CDC82A2D84388B6F5D2656F76468";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x72,0xCD,0xC8,0x2A,0x2D,0x84,0x38,0x8B,0x6F,0x5D,0x26,0x56,0xF7,0x64,0x68};

  VELaSSCoSM_GetBoundaryOfLocalMesh_result(const VELaSSCoSM_GetBoundaryOfLocalMesh_result&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_result& operator=(const VELaSSCoSM_GetBoundaryOfLocalMesh_result&);
  VELaSSCoSM_GetBoundaryOfLocalMesh_result() {
  }

  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_result() throw();
  rvGetBoundaryOfLocalMesh success;

  _VELaSSCoSM_GetBoundaryOfLocalMesh_result__isset __isset;

  void __set_success(const rvGetBoundaryOfLocalMesh& val);

  bool operator == (const VELaSSCoSM_GetBoundaryOfLocalMesh_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetBoundaryOfLocalMesh_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetBoundaryOfLocalMesh_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetBoundaryOfLocalMesh_result& obj);
};

typedef struct _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset {
  _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset;

class VELaSSCoSM_GetBoundaryOfLocalMesh_presult {
 public:

  static const char* ascii_fingerprint; // = "D472CDC82A2D84388B6F5D2656F76468";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x72,0xCD,0xC8,0x2A,0x2D,0x84,0x38,0x8B,0x6F,0x5D,0x26,0x56,0xF7,0x64,0x68};


  virtual ~VELaSSCoSM_GetBoundaryOfLocalMesh_presult() throw();
  rvGetBoundaryOfLocalMesh* success;

  _VELaSSCoSM_GetBoundaryOfLocalMesh_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetBoundaryOfLocalMesh_presult& obj);
};

typedef struct _VELaSSCoSM_GetListOfAnalyses_args__isset {
  _VELaSSCoSM_GetListOfAnalyses_args__isset() : sessionID(false), modelID(false) {}
  bool sessionID :1;
  bool modelID :1;
} _VELaSSCoSM_GetListOfAnalyses_args__isset;

class VELaSSCoSM_GetListOfAnalyses_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  VELaSSCoSM_GetListOfAnalyses_args(const VELaSSCoSM_GetListOfAnalyses_args&);
  VELaSSCoSM_GetListOfAnalyses_args& operator=(const VELaSSCoSM_GetListOfAnalyses_args&);
  VELaSSCoSM_GetListOfAnalyses_args() : sessionID(), modelID() {
  }

  virtual ~VELaSSCoSM_GetListOfAnalyses_args() throw();
  std::string sessionID;
  std::string modelID;

  _VELaSSCoSM_GetListOfAnalyses_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  bool operator == (const VELaSSCoSM_GetListOfAnalyses_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfAnalyses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfAnalyses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfAnalyses_args& obj);
};


class VELaSSCoSM_GetListOfAnalyses_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~VELaSSCoSM_GetListOfAnalyses_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfAnalyses_pargs& obj);
};

typedef struct _VELaSSCoSM_GetListOfAnalyses_result__isset {
  _VELaSSCoSM_GetListOfAnalyses_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfAnalyses_result__isset;

class VELaSSCoSM_GetListOfAnalyses_result {
 public:

  static const char* ascii_fingerprint; // = "1ED1A8ADE129679AE704937C423E8EFD";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xD1,0xA8,0xAD,0xE1,0x29,0x67,0x9A,0xE7,0x04,0x93,0x7C,0x42,0x3E,0x8E,0xFD};

  VELaSSCoSM_GetListOfAnalyses_result(const VELaSSCoSM_GetListOfAnalyses_result&);
  VELaSSCoSM_GetListOfAnalyses_result& operator=(const VELaSSCoSM_GetListOfAnalyses_result&);
  VELaSSCoSM_GetListOfAnalyses_result() {
  }

  virtual ~VELaSSCoSM_GetListOfAnalyses_result() throw();
  rvGetListOfAnalyses success;

  _VELaSSCoSM_GetListOfAnalyses_result__isset __isset;

  void __set_success(const rvGetListOfAnalyses& val);

  bool operator == (const VELaSSCoSM_GetListOfAnalyses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfAnalyses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfAnalyses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfAnalyses_result& obj);
};

typedef struct _VELaSSCoSM_GetListOfAnalyses_presult__isset {
  _VELaSSCoSM_GetListOfAnalyses_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfAnalyses_presult__isset;

class VELaSSCoSM_GetListOfAnalyses_presult {
 public:

  static const char* ascii_fingerprint; // = "1ED1A8ADE129679AE704937C423E8EFD";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0xD1,0xA8,0xAD,0xE1,0x29,0x67,0x9A,0xE7,0x04,0x93,0x7C,0x42,0x3E,0x8E,0xFD};


  virtual ~VELaSSCoSM_GetListOfAnalyses_presult() throw();
  rvGetListOfAnalyses* success;

  _VELaSSCoSM_GetListOfAnalyses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfAnalyses_presult& obj);
};

typedef struct _VELaSSCoSM_GetListOfTimeSteps_args__isset {
  _VELaSSCoSM_GetListOfTimeSteps_args__isset() : sessionID(false), modelID(false), analysisID(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
} _VELaSSCoSM_GetListOfTimeSteps_args__isset;

class VELaSSCoSM_GetListOfTimeSteps_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  VELaSSCoSM_GetListOfTimeSteps_args(const VELaSSCoSM_GetListOfTimeSteps_args&);
  VELaSSCoSM_GetListOfTimeSteps_args& operator=(const VELaSSCoSM_GetListOfTimeSteps_args&);
  VELaSSCoSM_GetListOfTimeSteps_args() : sessionID(), modelID(), analysisID() {
  }

  virtual ~VELaSSCoSM_GetListOfTimeSteps_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;

  _VELaSSCoSM_GetListOfTimeSteps_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  bool operator == (const VELaSSCoSM_GetListOfTimeSteps_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfTimeSteps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfTimeSteps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfTimeSteps_args& obj);
};


class VELaSSCoSM_GetListOfTimeSteps_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~VELaSSCoSM_GetListOfTimeSteps_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfTimeSteps_pargs& obj);
};

typedef struct _VELaSSCoSM_GetListOfTimeSteps_result__isset {
  _VELaSSCoSM_GetListOfTimeSteps_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfTimeSteps_result__isset;

class VELaSSCoSM_GetListOfTimeSteps_result {
 public:

  static const char* ascii_fingerprint; // = "10755495700BA035F4498D31CBF0558F";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x75,0x54,0x95,0x70,0x0B,0xA0,0x35,0xF4,0x49,0x8D,0x31,0xCB,0xF0,0x55,0x8F};

  VELaSSCoSM_GetListOfTimeSteps_result(const VELaSSCoSM_GetListOfTimeSteps_result&);
  VELaSSCoSM_GetListOfTimeSteps_result& operator=(const VELaSSCoSM_GetListOfTimeSteps_result&);
  VELaSSCoSM_GetListOfTimeSteps_result() {
  }

  virtual ~VELaSSCoSM_GetListOfTimeSteps_result() throw();
  rvGetListOfTimeSteps success;

  _VELaSSCoSM_GetListOfTimeSteps_result__isset __isset;

  void __set_success(const rvGetListOfTimeSteps& val);

  bool operator == (const VELaSSCoSM_GetListOfTimeSteps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfTimeSteps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfTimeSteps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfTimeSteps_result& obj);
};

typedef struct _VELaSSCoSM_GetListOfTimeSteps_presult__isset {
  _VELaSSCoSM_GetListOfTimeSteps_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfTimeSteps_presult__isset;

class VELaSSCoSM_GetListOfTimeSteps_presult {
 public:

  static const char* ascii_fingerprint; // = "10755495700BA035F4498D31CBF0558F";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x75,0x54,0x95,0x70,0x0B,0xA0,0x35,0xF4,0x49,0x8D,0x31,0xCB,0xF0,0x55,0x8F};


  virtual ~VELaSSCoSM_GetListOfTimeSteps_presult() throw();
  rvGetListOfTimeSteps* success;

  _VELaSSCoSM_GetListOfTimeSteps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfTimeSteps_presult& obj);
};

typedef struct _VELaSSCoSM_GetListOfMeshes_args__isset {
  _VELaSSCoSM_GetListOfMeshes_args__isset() : sessionID(false), modelID(false), analysisID(false), timeStep(false) {}
  bool sessionID :1;
  bool modelID :1;
  bool analysisID :1;
  bool timeStep :1;
} _VELaSSCoSM_GetListOfMeshes_args__isset;

class VELaSSCoSM_GetListOfMeshes_args {
 public:

  static const char* ascii_fingerprint; // = "E0F6687719566C4EF140BB1122BC7D86";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xF6,0x68,0x77,0x19,0x56,0x6C,0x4E,0xF1,0x40,0xBB,0x11,0x22,0xBC,0x7D,0x86};

  VELaSSCoSM_GetListOfMeshes_args(const VELaSSCoSM_GetListOfMeshes_args&);
  VELaSSCoSM_GetListOfMeshes_args& operator=(const VELaSSCoSM_GetListOfMeshes_args&);
  VELaSSCoSM_GetListOfMeshes_args() : sessionID(), modelID(), analysisID(), timeStep(0) {
  }

  virtual ~VELaSSCoSM_GetListOfMeshes_args() throw();
  std::string sessionID;
  std::string modelID;
  std::string analysisID;
  double timeStep;

  _VELaSSCoSM_GetListOfMeshes_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_modelID(const std::string& val);

  void __set_analysisID(const std::string& val);

  void __set_timeStep(const double val);

  bool operator == (const VELaSSCoSM_GetListOfMeshes_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(modelID == rhs.modelID))
      return false;
    if (!(analysisID == rhs.analysisID))
      return false;
    if (!(timeStep == rhs.timeStep))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfMeshes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfMeshes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfMeshes_args& obj);
};


class VELaSSCoSM_GetListOfMeshes_pargs {
 public:

  static const char* ascii_fingerprint; // = "E0F6687719566C4EF140BB1122BC7D86";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xF6,0x68,0x77,0x19,0x56,0x6C,0x4E,0xF1,0x40,0xBB,0x11,0x22,0xBC,0x7D,0x86};


  virtual ~VELaSSCoSM_GetListOfMeshes_pargs() throw();
  const std::string* sessionID;
  const std::string* modelID;
  const std::string* analysisID;
  const double* timeStep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfMeshes_pargs& obj);
};

typedef struct _VELaSSCoSM_GetListOfMeshes_result__isset {
  _VELaSSCoSM_GetListOfMeshes_result__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfMeshes_result__isset;

class VELaSSCoSM_GetListOfMeshes_result {
 public:

  static const char* ascii_fingerprint; // = "1935017465099FFD31841CDD6FD70F70";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x35,0x01,0x74,0x65,0x09,0x9F,0xFD,0x31,0x84,0x1C,0xDD,0x6F,0xD7,0x0F,0x70};

  VELaSSCoSM_GetListOfMeshes_result(const VELaSSCoSM_GetListOfMeshes_result&);
  VELaSSCoSM_GetListOfMeshes_result& operator=(const VELaSSCoSM_GetListOfMeshes_result&);
  VELaSSCoSM_GetListOfMeshes_result() {
  }

  virtual ~VELaSSCoSM_GetListOfMeshes_result() throw();
  rvGetListOfMeshes success;

  _VELaSSCoSM_GetListOfMeshes_result__isset __isset;

  void __set_success(const rvGetListOfMeshes& val);

  bool operator == (const VELaSSCoSM_GetListOfMeshes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VELaSSCoSM_GetListOfMeshes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VELaSSCoSM_GetListOfMeshes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfMeshes_result& obj);
};

typedef struct _VELaSSCoSM_GetListOfMeshes_presult__isset {
  _VELaSSCoSM_GetListOfMeshes_presult__isset() : success(false) {}
  bool success :1;
} _VELaSSCoSM_GetListOfMeshes_presult__isset;

class VELaSSCoSM_GetListOfMeshes_presult {
 public:

  static const char* ascii_fingerprint; // = "1935017465099FFD31841CDD6FD70F70";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x35,0x01,0x74,0x65,0x09,0x9F,0xFD,0x31,0x84,0x1C,0xDD,0x6F,0xD7,0x0F,0x70};


  virtual ~VELaSSCoSM_GetListOfMeshes_presult() throw();
  rvGetListOfMeshes* success;

  _VELaSSCoSM_GetListOfMeshes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VELaSSCoSM_GetListOfMeshes_presult& obj);
};

class VELaSSCoSMClient : virtual public VELaSSCoSMIf {
 public:
  VELaSSCoSMClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VELaSSCoSMClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void statusDL(std::string& _return);
  void send_statusDL();
  void recv_statusDL(std::string& _return);
  void GetListOfModelNames(rvGetListOfModels& _return, const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern);
  void send_GetListOfModelNames(const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern);
  void recv_GetListOfModelNames(rvGetListOfModels& _return);
  void FindModelFS(rvOpenModel& _return, const std::string& sessionID, const std::string& unique_model_name_pattern);
  void send_FindModelFS(const std::string& sessionID, const std::string& unique_model_name_pattern);
  void recv_FindModelFS(rvOpenModel& _return);
  void GetResultFromVerticesID(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::string& listOfVertices);
  void send_GetResultFromVerticesID(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::string& listOfVertices);
  void recv_GetResultFromVerticesID(std::string& _return);
  void stopAll();
  void send_stopAll();
  void recv_stopAll();
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password);
  void send_UserLogin(const std::string& user_name, const std::string& role, const std::string& password);
  void recv_UserLogin(std::string& _return);
  void UserLogout(std::string& _return, const std::string& sessionID);
  void send_UserLogout(const std::string& sessionID);
  void recv_UserLogout(std::string& _return);
  void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelName);
  void send_CloseModel(const std::string& sessionID, const std::string& modelName);
  void recv_CloseModel(std::string& _return);
  void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  void send_SetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID, const std::string& imageFile);
  void recv_SetThumbnailOfAModel(std::string& _return);
  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID);
  void send_GetThumbnailOfAModel(const std::string& sessionID, const std::string& modelID);
  void recv_GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return);
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  void send_GetElementOfPointsInSpace(const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points);
  void recv_GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return);
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  void send_GetBoundaryOfLocalMesh(const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step);
  void recv_GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return);
  void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID);
  void send_GetListOfAnalyses(const std::string& sessionID, const std::string& modelID);
  void recv_GetListOfAnalyses(rvGetListOfAnalyses& _return);
  void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  void send_GetListOfTimeSteps(const std::string& sessionID, const std::string& modelID, const std::string& analysisID);
  void recv_GetListOfTimeSteps(rvGetListOfTimeSteps& _return);
  void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep);
  void send_GetListOfMeshes(const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep);
  void recv_GetListOfMeshes(rvGetListOfMeshes& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VELaSSCoSMProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VELaSSCoSMIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VELaSSCoSMProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_statusDL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfModelNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindModelFS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetResultFromVerticesID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UserLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UserLogout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetThumbnailOfAModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetThumbnailOfAModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetElementOfPointsInSpace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBoundaryOfLocalMesh(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfAnalyses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfTimeSteps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetListOfMeshes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VELaSSCoSMProcessor(boost::shared_ptr<VELaSSCoSMIf> iface) :
    iface_(iface) {
    processMap_["statusDL"] = &VELaSSCoSMProcessor::process_statusDL;
    processMap_["GetListOfModelNames"] = &VELaSSCoSMProcessor::process_GetListOfModelNames;
    processMap_["FindModelFS"] = &VELaSSCoSMProcessor::process_FindModelFS;
    processMap_["GetResultFromVerticesID"] = &VELaSSCoSMProcessor::process_GetResultFromVerticesID;
    processMap_["stopAll"] = &VELaSSCoSMProcessor::process_stopAll;
    processMap_["UserLogin"] = &VELaSSCoSMProcessor::process_UserLogin;
    processMap_["UserLogout"] = &VELaSSCoSMProcessor::process_UserLogout;
    processMap_["CloseModel"] = &VELaSSCoSMProcessor::process_CloseModel;
    processMap_["SetThumbnailOfAModel"] = &VELaSSCoSMProcessor::process_SetThumbnailOfAModel;
    processMap_["GetThumbnailOfAModel"] = &VELaSSCoSMProcessor::process_GetThumbnailOfAModel;
    processMap_["GetElementOfPointsInSpace"] = &VELaSSCoSMProcessor::process_GetElementOfPointsInSpace;
    processMap_["GetBoundaryOfLocalMesh"] = &VELaSSCoSMProcessor::process_GetBoundaryOfLocalMesh;
    processMap_["GetListOfAnalyses"] = &VELaSSCoSMProcessor::process_GetListOfAnalyses;
    processMap_["GetListOfTimeSteps"] = &VELaSSCoSMProcessor::process_GetListOfTimeSteps;
    processMap_["GetListOfMeshes"] = &VELaSSCoSMProcessor::process_GetListOfMeshes;
  }

  virtual ~VELaSSCoSMProcessor() {}
};

class VELaSSCoSMProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VELaSSCoSMProcessorFactory(const ::boost::shared_ptr< VELaSSCoSMIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VELaSSCoSMIfFactory > handlerFactory_;
};

class VELaSSCoSMMultiface : virtual public VELaSSCoSMIf {
 public:
  VELaSSCoSMMultiface(std::vector<boost::shared_ptr<VELaSSCoSMIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VELaSSCoSMMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VELaSSCoSMIf> > ifaces_;
  VELaSSCoSMMultiface() {}
  void add(boost::shared_ptr<VELaSSCoSMIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void statusDL(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->statusDL(_return);
    }
    ifaces_[i]->statusDL(_return);
    return;
  }

  void GetListOfModelNames(rvGetListOfModels& _return, const std::string& sessionID, const std::string& model_group_qualifier, const std::string& model_name_pattern) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfModelNames(_return, sessionID, model_group_qualifier, model_name_pattern);
    }
    ifaces_[i]->GetListOfModelNames(_return, sessionID, model_group_qualifier, model_name_pattern);
    return;
  }

  void FindModelFS(rvOpenModel& _return, const std::string& sessionID, const std::string& unique_model_name_pattern) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindModelFS(_return, sessionID, unique_model_name_pattern);
    }
    ifaces_[i]->FindModelFS(_return, sessionID, unique_model_name_pattern);
    return;
  }

  void GetResultFromVerticesID(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep, const std::string& resultID, const std::string& listOfVertices) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetResultFromVerticesID(_return, sessionID, modelID, analysisID, timeStep, resultID, listOfVertices);
    }
    ifaces_[i]->GetResultFromVerticesID(_return, sessionID, modelID, analysisID, timeStep, resultID, listOfVertices);
    return;
  }

  void stopAll() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopAll();
    }
    ifaces_[i]->stopAll();
  }

  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogin(_return, user_name, role, password);
    }
    ifaces_[i]->UserLogin(_return, user_name, role, password);
    return;
  }

  void UserLogout(std::string& _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogout(_return, sessionID);
    }
    ifaces_[i]->UserLogout(_return, sessionID);
    return;
  }

  void CloseModel(std::string& _return, const std::string& sessionID, const std::string& modelName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseModel(_return, sessionID, modelName);
    }
    ifaces_[i]->CloseModel(_return, sessionID, modelName);
    return;
  }

  void SetThumbnailOfAModel(std::string& _return, const std::string& sessionID, const std::string& modelID, const std::string& imageFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetThumbnailOfAModel(_return, sessionID, modelID, imageFile);
    }
    ifaces_[i]->SetThumbnailOfAModel(_return, sessionID, modelID, imageFile);
    return;
  }

  void GetThumbnailOfAModel(rvGetThumbnailOfAModel& _return, const std::string& sessionID, const std::string& modelID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetThumbnailOfAModel(_return, sessionID, modelID);
    }
    ifaces_[i]->GetThumbnailOfAModel(_return, sessionID, modelID);
    return;
  }

  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetElementOfPointsInSpace(_return, sessionID, modelName, points);
    }
    ifaces_[i]->GetElementOfPointsInSpace(_return, sessionID, modelName, points);
    return;
  }

  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBoundaryOfLocalMesh(_return, sessionID, modelID, meshID, analysisID, time_step);
    }
    ifaces_[i]->GetBoundaryOfLocalMesh(_return, sessionID, modelID, meshID, analysisID, time_step);
    return;
  }

  void GetListOfAnalyses(rvGetListOfAnalyses& _return, const std::string& sessionID, const std::string& modelID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfAnalyses(_return, sessionID, modelID);
    }
    ifaces_[i]->GetListOfAnalyses(_return, sessionID, modelID);
    return;
  }

  void GetListOfTimeSteps(rvGetListOfTimeSteps& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfTimeSteps(_return, sessionID, modelID, analysisID);
    }
    ifaces_[i]->GetListOfTimeSteps(_return, sessionID, modelID, analysisID);
    return;
  }

  void GetListOfMeshes(rvGetListOfMeshes& _return, const std::string& sessionID, const std::string& modelID, const std::string& analysisID, const double timeStep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetListOfMeshes(_return, sessionID, modelID, analysisID, timeStep);
    }
    ifaces_[i]->GetListOfMeshes(_return, sessionID, modelID, analysisID, timeStep);
    return;
  }

};



#endif
