/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "VELaSSCoSM_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace VELaSSCoSM {

int _kElementShapeTypeValues[] = {
  ElementShapeType::UnknownElement,
  ElementShapeType::PointElement,
  ElementShapeType::LineElement,
  ElementShapeType::TriangleElement,
  ElementShapeType::QuadrilateralElement,
  ElementShapeType::TetrahedraElement,
  ElementShapeType::HexahedraElement,
  ElementShapeType::PrismElement,
  ElementShapeType::PyramidElement,
  ElementShapeType::SphereElement,
  ElementShapeType::CircleElement,
  ElementShapeType::ComplexParticleElement
};
const char* _kElementShapeTypeNames[] = {
  "UnknownElement",
  "PointElement",
  "LineElement",
  "TriangleElement",
  "QuadrilateralElement",
  "TetrahedraElement",
  "HexahedraElement",
  "PrismElement",
  "PyramidElement",
  "SphereElement",
  "CircleElement",
  "ComplexParticleElement"
};
const std::map<int, const char*> _ElementShapeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kElementShapeTypeValues, _kElementShapeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ElementType::~ElementType() throw() {
}


void ElementType::__set_shape(const ElementShapeType::type val) {
  this->shape = val;
}

void ElementType::__set_num_nodes(const int32_t val) {
  this->num_nodes = val;
}

const char* ElementType::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t ElementType::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t ElementType::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->shape = (ElementShapeType::type)ecast0;
          this->__isset.shape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_nodes);
          this->__isset.num_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ElementType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ElementType");

  xfer += oprot->writeFieldBegin("shape", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->shape);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_nodes", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_nodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ElementType &a, ElementType &b) {
  using ::std::swap;
  swap(a.shape, b.shape);
  swap(a.num_nodes, b.num_nodes);
  swap(a.__isset, b.__isset);
}

ElementType::ElementType(const ElementType& other1) {
  shape = other1.shape;
  num_nodes = other1.num_nodes;
  __isset = other1.__isset;
}
ElementType& ElementType::operator=(const ElementType& other2) {
  shape = other2.shape;
  num_nodes = other2.num_nodes;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ElementType& obj) {
  using apache::thrift::to_string;
  out << "ElementType(";
  out << "shape=" << to_string(obj.shape);
  out << ", " << "num_nodes=" << to_string(obj.num_nodes);
  out << ")";
  return out;
}


Point::~Point() throw() {
}


void Point::__set_x(const double val) {
  this->x = val;
}

void Point::__set_y(const double val) {
  this->y = val;
}

void Point::__set_z(const double val) {
  this->z = val;
}

const char* Point::ascii_fingerprint = "EFFAD640FBA2CA56C50155B2A4545897";
const uint8_t Point::binary_fingerprint[16] = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

uint32_t Point::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Point::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Point");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Point &a, Point &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

Point::Point(const Point& other3) {
  x = other3.x;
  y = other3.y;
  z = other3.z;
  __isset = other3.__isset;
}
Point& Point::operator=(const Point& other4) {
  x = other4.x;
  y = other4.y;
  z = other4.z;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Point& obj) {
  using apache::thrift::to_string;
  out << "Point(";
  out << "x=" << to_string(obj.x);
  out << ", " << "y=" << to_string(obj.y);
  out << ", " << "z=" << to_string(obj.z);
  out << ")";
  return out;
}


Vertex::~Vertex() throw() {
}


void Vertex::__set_id(const NodeID val) {
  this->id = val;
}

void Vertex::__set_x(const double val) {
  this->x = val;
}

void Vertex::__set_y(const double val) {
  this->y = val;
}

void Vertex::__set_z(const double val) {
  this->z = val;
}

const char* Vertex::ascii_fingerprint = "3BC5E6ABCC6C77829F8D2E02BF3E7711";
const uint8_t Vertex::binary_fingerprint[16] = {0x3B,0xC5,0xE6,0xAB,0xCC,0x6C,0x77,0x82,0x9F,0x8D,0x2E,0x02,0xBF,0x3E,0x77,0x11};

uint32_t Vertex::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vertex::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Vertex");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Vertex &a, Vertex &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

Vertex::Vertex(const Vertex& other5) {
  id = other5.id;
  x = other5.x;
  y = other5.y;
  z = other5.z;
  __isset = other5.__isset;
}
Vertex& Vertex::operator=(const Vertex& other6) {
  id = other6.id;
  x = other6.x;
  y = other6.y;
  z = other6.z;
  __isset = other6.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Vertex& obj) {
  using apache::thrift::to_string;
  out << "Vertex(";
  out << "id=" << to_string(obj.id);
  out << ", " << "x=" << to_string(obj.x);
  out << ", " << "y=" << to_string(obj.y);
  out << ", " << "z=" << to_string(obj.z);
  out << ")";
  return out;
}


Element::~Element() throw() {
}


void Element::__set_id(const int64_t val) {
  this->id = val;
}

void Element::__set_nodes_ids(const std::vector<NodeID> & val) {
  this->nodes_ids = val;
}

const char* Element::ascii_fingerprint = "955BD89722154769CC8FC8E9E0AB6CC2";
const uint8_t Element::binary_fingerprint[16] = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

uint32_t Element::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes_ids.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->nodes_ids.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readI64(this->nodes_ids[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Element::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Element");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nodes_ids.size()));
    std::vector<NodeID> ::const_iterator _iter12;
    for (_iter12 = this->nodes_ids.begin(); _iter12 != this->nodes_ids.end(); ++_iter12)
    {
      xfer += oprot->writeI64((*_iter12));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Element &a, Element &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.nodes_ids, b.nodes_ids);
  swap(a.__isset, b.__isset);
}

Element::Element(const Element& other13) {
  id = other13.id;
  nodes_ids = other13.nodes_ids;
  __isset = other13.__isset;
}
Element& Element::operator=(const Element& other14) {
  id = other14.id;
  nodes_ids = other14.nodes_ids;
  __isset = other14.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Element& obj) {
  using apache::thrift::to_string;
  out << "Element(";
  out << "id=" << to_string(obj.id);
  out << ", " << "nodes_ids=" << to_string(obj.nodes_ids);
  out << ")";
  return out;
}


ElementAttrib::~ElementAttrib() throw() {
}


void ElementAttrib::__set_id(const int64_t val) {
  this->id = val;
}

void ElementAttrib::__set_name(const std::string& val) {
  this->name = val;
}

void ElementAttrib::__set_value(const std::vector<double> & val) {
  this->value = val;
}

const char* ElementAttrib::ascii_fingerprint = "1A4DCF2658CC4E78D1F7CDC432563CBB";
const uint8_t ElementAttrib::binary_fingerprint[16] = {0x1A,0x4D,0xCF,0x26,0x58,0xCC,0x4E,0x78,0xD1,0xF7,0xCD,0xC4,0x32,0x56,0x3C,0xBB};

uint32_t ElementAttrib::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->value.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readDouble(this->value[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ElementAttrib::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ElementAttrib");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->value.size()));
    std::vector<double> ::const_iterator _iter20;
    for (_iter20 = this->value.begin(); _iter20 != this->value.end(); ++_iter20)
    {
      xfer += oprot->writeDouble((*_iter20));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ElementAttrib &a, ElementAttrib &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ElementAttrib::ElementAttrib(const ElementAttrib& other21) {
  id = other21.id;
  name = other21.name;
  value = other21.value;
  __isset = other21.__isset;
}
ElementAttrib& ElementAttrib::operator=(const ElementAttrib& other22) {
  id = other22.id;
  name = other22.name;
  value = other22.value;
  __isset = other22.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ElementAttrib& obj) {
  using apache::thrift::to_string;
  out << "ElementAttrib(";
  out << "id=" << to_string(obj.id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


ElementGroup::~ElementGroup() throw() {
}


void ElementGroup::__set_id(const int64_t val) {
  this->id = val;
}

void ElementGroup::__set_group_id(const int64_t val) {
  this->group_id = val;
}

const char* ElementGroup::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t ElementGroup::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t ElementGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->group_id);
          this->__isset.group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ElementGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ElementGroup");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ElementGroup &a, ElementGroup &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.group_id, b.group_id);
  swap(a.__isset, b.__isset);
}

ElementGroup::ElementGroup(const ElementGroup& other23) {
  id = other23.id;
  group_id = other23.group_id;
  __isset = other23.__isset;
}
ElementGroup& ElementGroup::operator=(const ElementGroup& other24) {
  id = other24.id;
  group_id = other24.group_id;
  __isset = other24.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ElementGroup& obj) {
  using apache::thrift::to_string;
  out << "ElementGroup(";
  out << "id=" << to_string(obj.id);
  out << ", " << "group_id=" << to_string(obj.group_id);
  out << ")";
  return out;
}


MeshInfo::~MeshInfo() throw() {
}


void MeshInfo::__set_name(const std::string& val) {
  this->name = val;
}

void MeshInfo::__set_elementType(const ElementType& val) {
  this->elementType = val;
}

void MeshInfo::__set_nVertices(const int64_t val) {
  this->nVertices = val;
}

void MeshInfo::__set_nElements(const int64_t val) {
  this->nElements = val;
}

void MeshInfo::__set_meshUnits(const std::string& val) {
  this->meshUnits = val;
}

void MeshInfo::__set_meshColor(const std::string& val) {
  this->meshColor = val;
}

void MeshInfo::__set_meshNumber(const int32_t val) {
  this->meshNumber = val;
}

void MeshInfo::__set_coordsName(const std::string& val) {
  this->coordsName = val;
}

const char* MeshInfo::ascii_fingerprint = "BB55A649757DA08871436B00AE301AE5";
const uint8_t MeshInfo::binary_fingerprint[16] = {0xBB,0x55,0xA6,0x49,0x75,0x7D,0xA0,0x88,0x71,0x43,0x6B,0x00,0xAE,0x30,0x1A,0xE5};

uint32_t MeshInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->elementType.read(iprot);
          this->__isset.elementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nVertices);
          this->__isset.nVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nElements);
          this->__isset.nElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meshUnits);
          this->__isset.meshUnits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meshColor);
          this->__isset.meshColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->meshNumber);
          this->__isset.meshNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coordsName);
          this->__isset.coordsName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MeshInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MeshInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elementType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->elementType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nVertices", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->nVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nElements", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nElements);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshUnits", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->meshUnits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshColor", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->meshColor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshNumber", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->meshNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coordsName", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->coordsName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MeshInfo &a, MeshInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.elementType, b.elementType);
  swap(a.nVertices, b.nVertices);
  swap(a.nElements, b.nElements);
  swap(a.meshUnits, b.meshUnits);
  swap(a.meshColor, b.meshColor);
  swap(a.meshNumber, b.meshNumber);
  swap(a.coordsName, b.coordsName);
  swap(a.__isset, b.__isset);
}

MeshInfo::MeshInfo(const MeshInfo& other25) {
  name = other25.name;
  elementType = other25.elementType;
  nVertices = other25.nVertices;
  nElements = other25.nElements;
  meshUnits = other25.meshUnits;
  meshColor = other25.meshColor;
  meshNumber = other25.meshNumber;
  coordsName = other25.coordsName;
  __isset = other25.__isset;
}
MeshInfo& MeshInfo::operator=(const MeshInfo& other26) {
  name = other26.name;
  elementType = other26.elementType;
  nVertices = other26.nVertices;
  nElements = other26.nElements;
  meshUnits = other26.meshUnits;
  meshColor = other26.meshColor;
  meshNumber = other26.meshNumber;
  coordsName = other26.coordsName;
  __isset = other26.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MeshInfo& obj) {
  using apache::thrift::to_string;
  out << "MeshInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "elementType=" << to_string(obj.elementType);
  out << ", " << "nVertices=" << to_string(obj.nVertices);
  out << ", " << "nElements=" << to_string(obj.nElements);
  out << ", " << "meshUnits=" << to_string(obj.meshUnits);
  out << ", " << "meshColor=" << to_string(obj.meshColor);
  out << ", " << "meshNumber=" << to_string(obj.meshNumber);
  out << ", " << "coordsName=" << to_string(obj.coordsName);
  out << ")";
  return out;
}


Mesh::~Mesh() throw() {
}


void Mesh::__set_name(const std::string& val) {
  this->name = val;
}

void Mesh::__set_numberOfVertices(const int64_t val) {
  this->numberOfVertices = val;
}

void Mesh::__set_dimension(const int64_t val) {
  this->dimension = val;
}

void Mesh::__set_type(const ElementType& val) {
  this->type = val;
}

void Mesh::__set_nodes(const std::vector<Vertex> & val) {
  this->nodes = val;
}

void Mesh::__set_elements(const std::vector<Element> & val) {
  this->elements = val;
}

const char* Mesh::ascii_fingerprint = "DF18DD7E21D82A44600394ED79F2401D";
const uint8_t Mesh::binary_fingerprint[16] = {0xDF,0x18,0xDD,0x7E,0x21,0xD8,0x2A,0x44,0x60,0x03,0x94,0xED,0x79,0xF2,0x40,0x1D};

uint32_t Mesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numberOfVertices);
          this->__isset.numberOfVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->nodes.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += this->nodes[_i31].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->elements.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += this->elements[_i36].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Mesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Mesh");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfVertices", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->numberOfVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
    std::vector<Vertex> ::const_iterator _iter37;
    for (_iter37 = this->nodes.begin(); _iter37 != this->nodes.end(); ++_iter37)
    {
      xfer += (*_iter37).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Element> ::const_iterator _iter38;
    for (_iter38 = this->elements.begin(); _iter38 != this->elements.end(); ++_iter38)
    {
      xfer += (*_iter38).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Mesh &a, Mesh &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.numberOfVertices, b.numberOfVertices);
  swap(a.dimension, b.dimension);
  swap(a.type, b.type);
  swap(a.nodes, b.nodes);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

Mesh::Mesh(const Mesh& other39) {
  name = other39.name;
  numberOfVertices = other39.numberOfVertices;
  dimension = other39.dimension;
  type = other39.type;
  nodes = other39.nodes;
  elements = other39.elements;
  __isset = other39.__isset;
}
Mesh& Mesh::operator=(const Mesh& other40) {
  name = other40.name;
  numberOfVertices = other40.numberOfVertices;
  dimension = other40.dimension;
  type = other40.type;
  nodes = other40.nodes;
  elements = other40.elements;
  __isset = other40.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Mesh& obj) {
  using apache::thrift::to_string;
  out << "Mesh(";
  out << "name=" << to_string(obj.name);
  out << ", " << "numberOfVertices=" << to_string(obj.numberOfVertices);
  out << ", " << "dimension=" << to_string(obj.dimension);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "nodes=" << to_string(obj.nodes);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


ResultInfo::~ResultInfo() throw() {
}


void ResultInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ResultInfo::__set_type(const std::string& val) {
  this->type = val;
}

void ResultInfo::__set_numberOfComponents(const int32_t val) {
  this->numberOfComponents = val;
}

void ResultInfo::__set_componentNames(const std::vector<std::string> & val) {
  this->componentNames = val;
}

void ResultInfo::__set_location(const std::string& val) {
  this->location = val;
}

void ResultInfo::__set_gaussPointName(const std::string& val) {
  this->gaussPointName = val;
}

void ResultInfo::__set_coordinatesName(const std::string& val) {
  this->coordinatesName = val;
}

void ResultInfo::__set_units(const std::string& val) {
  this->units = val;
}

void ResultInfo::__set_resultNumber(const int32_t val) {
  this->resultNumber = val;
}

const char* ResultInfo::ascii_fingerprint = "97151C990E2F24FBABB8135B737FE75B";
const uint8_t ResultInfo::binary_fingerprint[16] = {0x97,0x15,0x1C,0x99,0x0E,0x2F,0x24,0xFB,0xAB,0xB8,0x13,0x5B,0x73,0x7F,0xE7,0x5B};

uint32_t ResultInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfComponents);
          this->__isset.numberOfComponents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->componentNames.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->componentNames.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += iprot->readString(this->componentNames[_i45]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.componentNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gaussPointName);
          this->__isset.gaussPointName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coordinatesName);
          this->__isset.coordinatesName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->units);
          this->__isset.units = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultNumber);
          this->__isset.resultNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ResultInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfComponents", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numberOfComponents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("componentNames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->componentNames.size()));
    std::vector<std::string> ::const_iterator _iter46;
    for (_iter46 = this->componentNames.begin(); _iter46 != this->componentNames.end(); ++_iter46)
    {
      xfer += oprot->writeString((*_iter46));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gaussPointName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->gaussPointName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coordinatesName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->coordinatesName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("units", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->units);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultNumber", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->resultNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ResultInfo &a, ResultInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.numberOfComponents, b.numberOfComponents);
  swap(a.componentNames, b.componentNames);
  swap(a.location, b.location);
  swap(a.gaussPointName, b.gaussPointName);
  swap(a.coordinatesName, b.coordinatesName);
  swap(a.units, b.units);
  swap(a.resultNumber, b.resultNumber);
  swap(a.__isset, b.__isset);
}

ResultInfo::ResultInfo(const ResultInfo& other47) {
  name = other47.name;
  type = other47.type;
  numberOfComponents = other47.numberOfComponents;
  componentNames = other47.componentNames;
  location = other47.location;
  gaussPointName = other47.gaussPointName;
  coordinatesName = other47.coordinatesName;
  units = other47.units;
  resultNumber = other47.resultNumber;
  __isset = other47.__isset;
}
ResultInfo& ResultInfo::operator=(const ResultInfo& other48) {
  name = other48.name;
  type = other48.type;
  numberOfComponents = other48.numberOfComponents;
  componentNames = other48.componentNames;
  location = other48.location;
  gaussPointName = other48.gaussPointName;
  coordinatesName = other48.coordinatesName;
  units = other48.units;
  resultNumber = other48.resultNumber;
  __isset = other48.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ResultInfo& obj) {
  using apache::thrift::to_string;
  out << "ResultInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "numberOfComponents=" << to_string(obj.numberOfComponents);
  out << ", " << "componentNames=" << to_string(obj.componentNames);
  out << ", " << "location=" << to_string(obj.location);
  out << ", " << "gaussPointName=" << to_string(obj.gaussPointName);
  out << ", " << "coordinatesName=" << to_string(obj.coordinatesName);
  out << ", " << "units=" << to_string(obj.units);
  out << ", " << "resultNumber=" << to_string(obj.resultNumber);
  out << ")";
  return out;
}


ResultOnVertex::~ResultOnVertex() throw() {
}


void ResultOnVertex::__set_id(const int64_t val) {
  this->id = val;
}

void ResultOnVertex::__set_value(const std::vector<double> & val) {
  this->value = val;
}

const char* ResultOnVertex::ascii_fingerprint = "1CB61EEDEC70E44B3B75F0C0C76D5496";
const uint8_t ResultOnVertex::binary_fingerprint[16] = {0x1C,0xB6,0x1E,0xED,0xEC,0x70,0xE4,0x4B,0x3B,0x75,0xF0,0xC0,0xC7,0x6D,0x54,0x96};

uint32_t ResultOnVertex::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->value.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += iprot->readDouble(this->value[_i53]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultOnVertex::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ResultOnVertex");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->value.size()));
    std::vector<double> ::const_iterator _iter54;
    for (_iter54 = this->value.begin(); _iter54 != this->value.end(); ++_iter54)
    {
      xfer += oprot->writeDouble((*_iter54));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ResultOnVertex &a, ResultOnVertex &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ResultOnVertex::ResultOnVertex(const ResultOnVertex& other55) {
  id = other55.id;
  value = other55.value;
  __isset = other55.__isset;
}
ResultOnVertex& ResultOnVertex::operator=(const ResultOnVertex& other56) {
  id = other56.id;
  value = other56.value;
  __isset = other56.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ResultOnVertex& obj) {
  using apache::thrift::to_string;
  out << "ResultOnVertex(";
  out << "id=" << to_string(obj.id);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


Triangle::~Triangle() throw() {
}


void Triangle::__set_nodes(const std::vector<NodeID> & val) {
  this->nodes = val;
}

const char* Triangle::ascii_fingerprint = "E49D7D1A9013CC81CD0F69D631EF82E4";
const uint8_t Triangle::binary_fingerprint[16] = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

uint32_t Triangle::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _etype60;
            xfer += iprot->readListBegin(_etype60, _size57);
            this->nodes.resize(_size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              xfer += iprot->readI64(this->nodes[_i61]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Triangle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Triangle");

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nodes.size()));
    std::vector<NodeID> ::const_iterator _iter62;
    for (_iter62 = this->nodes.begin(); _iter62 != this->nodes.end(); ++_iter62)
    {
      xfer += oprot->writeI64((*_iter62));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Triangle &a, Triangle &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.__isset, b.__isset);
}

Triangle::Triangle(const Triangle& other63) {
  nodes = other63.nodes;
  __isset = other63.__isset;
}
Triangle& Triangle::operator=(const Triangle& other64) {
  nodes = other64.nodes;
  __isset = other64.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Triangle& obj) {
  using apache::thrift::to_string;
  out << "Triangle(";
  out << "nodes=" << to_string(obj.nodes);
  out << ")";
  return out;
}


rvGetElementOfPointsInSpace::~rvGetElementOfPointsInSpace() throw() {
}


void rvGetElementOfPointsInSpace::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetElementOfPointsInSpace::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetElementOfPointsInSpace::__set_elements(const std::vector<Element> & val) {
  this->elements = val;
}

const char* rvGetElementOfPointsInSpace::ascii_fingerprint = "D98B588D8A5C9FF6B27508ADBB216FF2";
const uint8_t rvGetElementOfPointsInSpace::binary_fingerprint[16] = {0xD9,0x8B,0x58,0x8D,0x8A,0x5C,0x9F,0xF6,0xB2,0x75,0x08,0xAD,0xBB,0x21,0x6F,0xF2};

uint32_t rvGetElementOfPointsInSpace::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->elements.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += this->elements[_i69].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetElementOfPointsInSpace::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetElementOfPointsInSpace");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Element> ::const_iterator _iter70;
    for (_iter70 = this->elements.begin(); _iter70 != this->elements.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetElementOfPointsInSpace &a, rvGetElementOfPointsInSpace &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

rvGetElementOfPointsInSpace::rvGetElementOfPointsInSpace(const rvGetElementOfPointsInSpace& other71) {
  status = other71.status;
  report = other71.report;
  elements = other71.elements;
  __isset = other71.__isset;
}
rvGetElementOfPointsInSpace& rvGetElementOfPointsInSpace::operator=(const rvGetElementOfPointsInSpace& other72) {
  status = other72.status;
  report = other72.report;
  elements = other72.elements;
  __isset = other72.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetElementOfPointsInSpace& obj) {
  using apache::thrift::to_string;
  out << "rvGetElementOfPointsInSpace(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


rvGetBoundaryOfLocalMesh::~rvGetBoundaryOfLocalMesh() throw() {
}


void rvGetBoundaryOfLocalMesh::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetBoundaryOfLocalMesh::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetBoundaryOfLocalMesh::__set_elements(const std::vector<Triangle> & val) {
  this->elements = val;
}

const char* rvGetBoundaryOfLocalMesh::ascii_fingerprint = "DF8BC3D8E99EACBA0A38A2AE8F42E17F";
const uint8_t rvGetBoundaryOfLocalMesh::binary_fingerprint[16] = {0xDF,0x8B,0xC3,0xD8,0xE9,0x9E,0xAC,0xBA,0x0A,0x38,0xA2,0xAE,0x8F,0x42,0xE1,0x7F};

uint32_t rvGetBoundaryOfLocalMesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->elements.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += this->elements[_i77].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetBoundaryOfLocalMesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetBoundaryOfLocalMesh");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Triangle> ::const_iterator _iter78;
    for (_iter78 = this->elements.begin(); _iter78 != this->elements.end(); ++_iter78)
    {
      xfer += (*_iter78).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetBoundaryOfLocalMesh &a, rvGetBoundaryOfLocalMesh &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

rvGetBoundaryOfLocalMesh::rvGetBoundaryOfLocalMesh(const rvGetBoundaryOfLocalMesh& other79) {
  status = other79.status;
  report = other79.report;
  elements = other79.elements;
  __isset = other79.__isset;
}
rvGetBoundaryOfLocalMesh& rvGetBoundaryOfLocalMesh::operator=(const rvGetBoundaryOfLocalMesh& other80) {
  status = other80.status;
  report = other80.report;
  elements = other80.elements;
  __isset = other80.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetBoundaryOfLocalMesh& obj) {
  using apache::thrift::to_string;
  out << "rvGetBoundaryOfLocalMesh(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


rvGetResultFromVerticesID_A::~rvGetResultFromVerticesID_A() throw() {
}


void rvGetResultFromVerticesID_A::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID_A::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID_A::__set_nVertices(const int64_t val) {
  this->nVertices = val;
}

void rvGetResultFromVerticesID_A::__set_nValuesPrVertex(const int64_t val) {
  this->nValuesPrVertex = val;
}

void rvGetResultFromVerticesID_A::__set_vertexIDs(const std::vector<int64_t> & val) {
  this->vertexIDs = val;
}

void rvGetResultFromVerticesID_A::__set_resultValues(const std::vector<double> & val) {
  this->resultValues = val;
}

const char* rvGetResultFromVerticesID_A::ascii_fingerprint = "B51FB0E8BE2E9146E9BCED13565E0E5F";
const uint8_t rvGetResultFromVerticesID_A::binary_fingerprint[16] = {0xB5,0x1F,0xB0,0xE8,0xBE,0x2E,0x91,0x46,0xE9,0xBC,0xED,0x13,0x56,0x5E,0x0E,0x5F};

uint32_t rvGetResultFromVerticesID_A::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nVertices);
          this->__isset.nVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nValuesPrVertex);
          this->__isset.nValuesPrVertex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertexIDs.clear();
            uint32_t _size81;
            ::apache::thrift::protocol::TType _etype84;
            xfer += iprot->readListBegin(_etype84, _size81);
            this->vertexIDs.resize(_size81);
            uint32_t _i85;
            for (_i85 = 0; _i85 < _size81; ++_i85)
            {
              xfer += iprot->readI64(this->vertexIDs[_i85]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertexIDs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resultValues.clear();
            uint32_t _size86;
            ::apache::thrift::protocol::TType _etype89;
            xfer += iprot->readListBegin(_etype89, _size86);
            this->resultValues.resize(_size86);
            uint32_t _i90;
            for (_i90 = 0; _i90 < _size86; ++_i90)
            {
              xfer += iprot->readDouble(this->resultValues[_i90]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resultValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID_A::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID_A");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nVertices", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->nVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nValuesPrVertex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nValuesPrVertex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertexIDs", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->vertexIDs.size()));
    std::vector<int64_t> ::const_iterator _iter91;
    for (_iter91 = this->vertexIDs.begin(); _iter91 != this->vertexIDs.end(); ++_iter91)
    {
      xfer += oprot->writeI64((*_iter91));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultValues", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->resultValues.size()));
    std::vector<double> ::const_iterator _iter92;
    for (_iter92 = this->resultValues.begin(); _iter92 != this->resultValues.end(); ++_iter92)
    {
      xfer += oprot->writeDouble((*_iter92));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID_A &a, rvGetResultFromVerticesID_A &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.nVertices, b.nVertices);
  swap(a.nValuesPrVertex, b.nValuesPrVertex);
  swap(a.vertexIDs, b.vertexIDs);
  swap(a.resultValues, b.resultValues);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID_A::rvGetResultFromVerticesID_A(const rvGetResultFromVerticesID_A& other93) {
  status = other93.status;
  report = other93.report;
  nVertices = other93.nVertices;
  nValuesPrVertex = other93.nValuesPrVertex;
  vertexIDs = other93.vertexIDs;
  resultValues = other93.resultValues;
  __isset = other93.__isset;
}
rvGetResultFromVerticesID_A& rvGetResultFromVerticesID_A::operator=(const rvGetResultFromVerticesID_A& other94) {
  status = other94.status;
  report = other94.report;
  nVertices = other94.nVertices;
  nValuesPrVertex = other94.nValuesPrVertex;
  vertexIDs = other94.vertexIDs;
  resultValues = other94.resultValues;
  __isset = other94.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_A& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID_A(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "nVertices=" << to_string(obj.nVertices);
  out << ", " << "nValuesPrVertex=" << to_string(obj.nValuesPrVertex);
  out << ", " << "vertexIDs=" << to_string(obj.vertexIDs);
  out << ", " << "resultValues=" << to_string(obj.resultValues);
  out << ")";
  return out;
}


VertexResult::~VertexResult() throw() {
}


void VertexResult::__set_vertexID(const int64_t val) {
  this->vertexID = val;
}

void VertexResult::__set_resuls(const std::vector<double> & val) {
  this->resuls = val;
}

const char* VertexResult::ascii_fingerprint = "1CB61EEDEC70E44B3B75F0C0C76D5496";
const uint8_t VertexResult::binary_fingerprint[16] = {0x1C,0xB6,0x1E,0xED,0xEC,0x70,0xE4,0x4B,0x3B,0x75,0xF0,0xC0,0xC7,0x6D,0x54,0x96};

uint32_t VertexResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vertexID);
          this->__isset.vertexID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resuls.clear();
            uint32_t _size95;
            ::apache::thrift::protocol::TType _etype98;
            xfer += iprot->readListBegin(_etype98, _size95);
            this->resuls.resize(_size95);
            uint32_t _i99;
            for (_i99 = 0; _i99 < _size95; ++_i99)
            {
              xfer += iprot->readDouble(this->resuls[_i99]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resuls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VertexResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VertexResult");

  xfer += oprot->writeFieldBegin("vertexID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vertexID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resuls", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->resuls.size()));
    std::vector<double> ::const_iterator _iter100;
    for (_iter100 = this->resuls.begin(); _iter100 != this->resuls.end(); ++_iter100)
    {
      xfer += oprot->writeDouble((*_iter100));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VertexResult &a, VertexResult &b) {
  using ::std::swap;
  swap(a.vertexID, b.vertexID);
  swap(a.resuls, b.resuls);
  swap(a.__isset, b.__isset);
}

VertexResult::VertexResult(const VertexResult& other101) {
  vertexID = other101.vertexID;
  resuls = other101.resuls;
  __isset = other101.__isset;
}
VertexResult& VertexResult::operator=(const VertexResult& other102) {
  vertexID = other102.vertexID;
  resuls = other102.resuls;
  __isset = other102.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VertexResult& obj) {
  using apache::thrift::to_string;
  out << "VertexResult(";
  out << "vertexID=" << to_string(obj.vertexID);
  out << ", " << "resuls=" << to_string(obj.resuls);
  out << ")";
  return out;
}


rvGetResultFromVerticesID_B::~rvGetResultFromVerticesID_B() throw() {
}


void rvGetResultFromVerticesID_B::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID_B::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID_B::__set_vertexResults(const std::vector<VertexResult> & val) {
  this->vertexResults = val;
}

const char* rvGetResultFromVerticesID_B::ascii_fingerprint = "7D7F6E03D85558681F4AC69C1B4F3FC4";
const uint8_t rvGetResultFromVerticesID_B::binary_fingerprint[16] = {0x7D,0x7F,0x6E,0x03,0xD8,0x55,0x58,0x68,0x1F,0x4A,0xC6,0x9C,0x1B,0x4F,0x3F,0xC4};

uint32_t rvGetResultFromVerticesID_B::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertexResults.clear();
            uint32_t _size103;
            ::apache::thrift::protocol::TType _etype106;
            xfer += iprot->readListBegin(_etype106, _size103);
            this->vertexResults.resize(_size103);
            uint32_t _i107;
            for (_i107 = 0; _i107 < _size103; ++_i107)
            {
              xfer += this->vertexResults[_i107].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertexResults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID_B::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID_B");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertexResults", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vertexResults.size()));
    std::vector<VertexResult> ::const_iterator _iter108;
    for (_iter108 = this->vertexResults.begin(); _iter108 != this->vertexResults.end(); ++_iter108)
    {
      xfer += (*_iter108).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID_B &a, rvGetResultFromVerticesID_B &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.vertexResults, b.vertexResults);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID_B::rvGetResultFromVerticesID_B(const rvGetResultFromVerticesID_B& other109) {
  status = other109.status;
  report = other109.report;
  vertexResults = other109.vertexResults;
  __isset = other109.__isset;
}
rvGetResultFromVerticesID_B& rvGetResultFromVerticesID_B::operator=(const rvGetResultFromVerticesID_B& other110) {
  status = other110.status;
  report = other110.report;
  vertexResults = other110.vertexResults;
  __isset = other110.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_B& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID_B(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "vertexResults=" << to_string(obj.vertexResults);
  out << ")";
  return out;
}


ModelInfo::~ModelInfo() throw() {
}


void ModelInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ModelInfo::__set_repository(const std::string& val) {
  this->repository = val;
}

void ModelInfo::__set_owner(const std::string& val) {
  this->owner = val;
}

void ModelInfo::__set_created(const std::string& val) {
  this->created = val;
}

void ModelInfo::__set_accessRights(const std::string& val) {
  this->accessRights = val;
}

void ModelInfo::__set_administrators(const std::string& val) {
  this->administrators = val;
}

void ModelInfo::__set_underlyingSchema(const std::string& val) {
  this->underlyingSchema = val;
}

void ModelInfo::__set_nObjectsInModel(const int64_t val) {
  this->nObjectsInModel = val;
}

void ModelInfo::__set_dataSize(const int64_t val) {
  this->dataSize = val;
}

void ModelInfo::__set_stringEncoding(const std::string& val) {
  this->stringEncoding = val;
}

void ModelInfo::__set_options(const std::string& val) {
  this->options = val;
}

const char* ModelInfo::ascii_fingerprint = "2F09E0B6489C52E1F2AB8A6194159964";
const uint8_t ModelInfo::binary_fingerprint[16] = {0x2F,0x09,0xE0,0xB6,0x48,0x9C,0x52,0xE1,0xF2,0xAB,0x8A,0x61,0x94,0x15,0x99,0x64};

uint32_t ModelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->repository);
          this->__isset.repository = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessRights);
          this->__isset.accessRights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->administrators);
          this->__isset.administrators = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->underlyingSchema);
          this->__isset.underlyingSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nObjectsInModel);
          this->__isset.nObjectsInModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dataSize);
          this->__isset.dataSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringEncoding);
          this->__isset.stringEncoding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->options);
          this->__isset.options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ModelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ModelInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repository", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->repository);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessRights", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->accessRights);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("administrators", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->administrators);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("underlyingSchema", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->underlyingSchema);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nObjectsInModel", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->nObjectsInModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataSize", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->dataSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringEncoding", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->stringEncoding);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->options);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ModelInfo &a, ModelInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.repository, b.repository);
  swap(a.owner, b.owner);
  swap(a.created, b.created);
  swap(a.accessRights, b.accessRights);
  swap(a.administrators, b.administrators);
  swap(a.underlyingSchema, b.underlyingSchema);
  swap(a.nObjectsInModel, b.nObjectsInModel);
  swap(a.dataSize, b.dataSize);
  swap(a.stringEncoding, b.stringEncoding);
  swap(a.options, b.options);
  swap(a.__isset, b.__isset);
}

ModelInfo::ModelInfo(const ModelInfo& other111) {
  name = other111.name;
  repository = other111.repository;
  owner = other111.owner;
  created = other111.created;
  accessRights = other111.accessRights;
  administrators = other111.administrators;
  underlyingSchema = other111.underlyingSchema;
  nObjectsInModel = other111.nObjectsInModel;
  dataSize = other111.dataSize;
  stringEncoding = other111.stringEncoding;
  options = other111.options;
  __isset = other111.__isset;
}
ModelInfo& ModelInfo::operator=(const ModelInfo& other112) {
  name = other112.name;
  repository = other112.repository;
  owner = other112.owner;
  created = other112.created;
  accessRights = other112.accessRights;
  administrators = other112.administrators;
  underlyingSchema = other112.underlyingSchema;
  nObjectsInModel = other112.nObjectsInModel;
  dataSize = other112.dataSize;
  stringEncoding = other112.stringEncoding;
  options = other112.options;
  __isset = other112.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ModelInfo& obj) {
  using apache::thrift::to_string;
  out << "ModelInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "repository=" << to_string(obj.repository);
  out << ", " << "owner=" << to_string(obj.owner);
  out << ", " << "created=" << to_string(obj.created);
  out << ", " << "accessRights=" << to_string(obj.accessRights);
  out << ", " << "administrators=" << to_string(obj.administrators);
  out << ", " << "underlyingSchema=" << to_string(obj.underlyingSchema);
  out << ", " << "nObjectsInModel=" << to_string(obj.nObjectsInModel);
  out << ", " << "dataSize=" << to_string(obj.dataSize);
  out << ", " << "stringEncoding=" << to_string(obj.stringEncoding);
  out << ", " << "options=" << to_string(obj.options);
  out << ")";
  return out;
}


FullyQualifiedModelName::~FullyQualifiedModelName() throw() {
}


void FullyQualifiedModelName::__set_name(const std::string& val) {
  this->name = val;
}

void FullyQualifiedModelName::__set_full_path(const std::string& val) {
  this->full_path = val;
}

void FullyQualifiedModelName::__set_modelID(const std::string& val) {
  this->modelID = val;
}

void FullyQualifiedModelName::__set_location(const std::string& val) {
  this->location = val;
}

const char* FullyQualifiedModelName::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t FullyQualifiedModelName::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t FullyQualifiedModelName::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->full_path);
          this->__isset.full_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->modelID);
          this->__isset.modelID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FullyQualifiedModelName::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FullyQualifiedModelName");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->full_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->modelID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FullyQualifiedModelName &a, FullyQualifiedModelName &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.full_path, b.full_path);
  swap(a.modelID, b.modelID);
  swap(a.location, b.location);
  swap(a.__isset, b.__isset);
}

FullyQualifiedModelName::FullyQualifiedModelName(const FullyQualifiedModelName& other113) {
  name = other113.name;
  full_path = other113.full_path;
  modelID = other113.modelID;
  location = other113.location;
  __isset = other113.__isset;
}
FullyQualifiedModelName& FullyQualifiedModelName::operator=(const FullyQualifiedModelName& other114) {
  name = other114.name;
  full_path = other114.full_path;
  modelID = other114.modelID;
  location = other114.location;
  __isset = other114.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FullyQualifiedModelName& obj) {
  using apache::thrift::to_string;
  out << "FullyQualifiedModelName(";
  out << "name=" << to_string(obj.name);
  out << ", " << "full_path=" << to_string(obj.full_path);
  out << ", " << "modelID=" << to_string(obj.modelID);
  out << ", " << "location=" << to_string(obj.location);
  out << ")";
  return out;
}


rvGetListOfModels::~rvGetListOfModels() throw() {
}


void rvGetListOfModels::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfModels::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfModels::__set_models(const std::vector<FullyQualifiedModelName> & val) {
  this->models = val;
}

const char* rvGetListOfModels::ascii_fingerprint = "6F4C9A3920D50E26C78816CC39D0B1BE";
const uint8_t rvGetListOfModels::binary_fingerprint[16] = {0x6F,0x4C,0x9A,0x39,0x20,0xD5,0x0E,0x26,0xC7,0x88,0x16,0xCC,0x39,0xD0,0xB1,0xBE};

uint32_t rvGetListOfModels::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->models.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _etype118;
            xfer += iprot->readListBegin(_etype118, _size115);
            this->models.resize(_size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              xfer += this->models[_i119].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.models = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfModels::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfModels");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("models", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->models.size()));
    std::vector<FullyQualifiedModelName> ::const_iterator _iter120;
    for (_iter120 = this->models.begin(); _iter120 != this->models.end(); ++_iter120)
    {
      xfer += (*_iter120).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfModels &a, rvGetListOfModels &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.models, b.models);
  swap(a.__isset, b.__isset);
}

rvGetListOfModels::rvGetListOfModels(const rvGetListOfModels& other121) {
  status = other121.status;
  report = other121.report;
  models = other121.models;
  __isset = other121.__isset;
}
rvGetListOfModels& rvGetListOfModels::operator=(const rvGetListOfModels& other122) {
  status = other122.status;
  report = other122.report;
  models = other122.models;
  __isset = other122.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfModels& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfModels(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "models=" << to_string(obj.models);
  out << ")";
  return out;
}


rvGetThumbnailOfAModel::~rvGetThumbnailOfAModel() throw() {
}


void rvGetThumbnailOfAModel::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetThumbnailOfAModel::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetThumbnailOfAModel::__set_imageFile(const std::string& val) {
  this->imageFile = val;
}

const char* rvGetThumbnailOfAModel::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t rvGetThumbnailOfAModel::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t rvGetThumbnailOfAModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->imageFile);
          this->__isset.imageFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetThumbnailOfAModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetThumbnailOfAModel");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imageFile", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->imageFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetThumbnailOfAModel &a, rvGetThumbnailOfAModel &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.imageFile, b.imageFile);
  swap(a.__isset, b.__isset);
}

rvGetThumbnailOfAModel::rvGetThumbnailOfAModel(const rvGetThumbnailOfAModel& other123) {
  status = other123.status;
  report = other123.report;
  imageFile = other123.imageFile;
  __isset = other123.__isset;
}
rvGetThumbnailOfAModel& rvGetThumbnailOfAModel::operator=(const rvGetThumbnailOfAModel& other124) {
  status = other124.status;
  report = other124.report;
  imageFile = other124.imageFile;
  __isset = other124.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetThumbnailOfAModel& obj) {
  using apache::thrift::to_string;
  out << "rvGetThumbnailOfAModel(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "imageFile=" << to_string(obj.imageFile);
  out << ")";
  return out;
}


rvOpenModel::~rvOpenModel() throw() {
}


void rvOpenModel::__set_status(const std::string& val) {
  this->status = val;
}

void rvOpenModel::__set_report(const std::string& val) {
  this->report = val;
}

void rvOpenModel::__set_modelID(const std::string& val) {
  this->modelID = val;
}

void rvOpenModel::__set_model_info(const FullyQualifiedModelName& val) {
  this->model_info = val;
}

const char* rvOpenModel::ascii_fingerprint = "EC01D39DC1B343EB339C70385728F51B";
const uint8_t rvOpenModel::binary_fingerprint[16] = {0xEC,0x01,0xD3,0x9D,0xC1,0xB3,0x43,0xEB,0x33,0x9C,0x70,0x38,0x57,0x28,0xF5,0x1B};

uint32_t rvOpenModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->modelID);
          this->__isset.modelID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->model_info.read(iprot);
          this->__isset.model_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvOpenModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvOpenModel");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->modelID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("model_info", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->model_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvOpenModel &a, rvOpenModel &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.modelID, b.modelID);
  swap(a.model_info, b.model_info);
  swap(a.__isset, b.__isset);
}

rvOpenModel::rvOpenModel(const rvOpenModel& other125) {
  status = other125.status;
  report = other125.report;
  modelID = other125.modelID;
  model_info = other125.model_info;
  __isset = other125.__isset;
}
rvOpenModel& rvOpenModel::operator=(const rvOpenModel& other126) {
  status = other126.status;
  report = other126.report;
  modelID = other126.modelID;
  model_info = other126.model_info;
  __isset = other126.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvOpenModel& obj) {
  using apache::thrift::to_string;
  out << "rvOpenModel(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "modelID=" << to_string(obj.modelID);
  out << ", " << "model_info=" << to_string(obj.model_info);
  out << ")";
  return out;
}


rvGetListOfAnalyses::~rvGetListOfAnalyses() throw() {
}


void rvGetListOfAnalyses::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfAnalyses::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfAnalyses::__set_analyses(const std::vector<std::string> & val) {
  this->analyses = val;
}

const char* rvGetListOfAnalyses::ascii_fingerprint = "8E2AD6401E83558ECFD6A13D74DD0A3F";
const uint8_t rvGetListOfAnalyses::binary_fingerprint[16] = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};

uint32_t rvGetListOfAnalyses::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->analyses.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _etype130;
            xfer += iprot->readListBegin(_etype130, _size127);
            this->analyses.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              xfer += iprot->readString(this->analyses[_i131]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.analyses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfAnalyses::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfAnalyses");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyses", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->analyses.size()));
    std::vector<std::string> ::const_iterator _iter132;
    for (_iter132 = this->analyses.begin(); _iter132 != this->analyses.end(); ++_iter132)
    {
      xfer += oprot->writeString((*_iter132));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfAnalyses &a, rvGetListOfAnalyses &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.analyses, b.analyses);
  swap(a.__isset, b.__isset);
}

rvGetListOfAnalyses::rvGetListOfAnalyses(const rvGetListOfAnalyses& other133) {
  status = other133.status;
  report = other133.report;
  analyses = other133.analyses;
  __isset = other133.__isset;
}
rvGetListOfAnalyses& rvGetListOfAnalyses::operator=(const rvGetListOfAnalyses& other134) {
  status = other134.status;
  report = other134.report;
  analyses = other134.analyses;
  __isset = other134.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfAnalyses& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfAnalyses(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "analyses=" << to_string(obj.analyses);
  out << ")";
  return out;
}


rvGetListOfTimeSteps::~rvGetListOfTimeSteps() throw() {
}


void rvGetListOfTimeSteps::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfTimeSteps::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfTimeSteps::__set_time_steps(const std::vector<double> & val) {
  this->time_steps = val;
}

const char* rvGetListOfTimeSteps::ascii_fingerprint = "079D8EABC143D6AF5B88B3375EB108AD";
const uint8_t rvGetListOfTimeSteps::binary_fingerprint[16] = {0x07,0x9D,0x8E,0xAB,0xC1,0x43,0xD6,0xAF,0x5B,0x88,0xB3,0x37,0x5E,0xB1,0x08,0xAD};

uint32_t rvGetListOfTimeSteps::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->time_steps.clear();
            uint32_t _size135;
            ::apache::thrift::protocol::TType _etype138;
            xfer += iprot->readListBegin(_etype138, _size135);
            this->time_steps.resize(_size135);
            uint32_t _i139;
            for (_i139 = 0; _i139 < _size135; ++_i139)
            {
              xfer += iprot->readDouble(this->time_steps[_i139]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.time_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfTimeSteps::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfTimeSteps");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_steps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->time_steps.size()));
    std::vector<double> ::const_iterator _iter140;
    for (_iter140 = this->time_steps.begin(); _iter140 != this->time_steps.end(); ++_iter140)
    {
      xfer += oprot->writeDouble((*_iter140));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfTimeSteps &a, rvGetListOfTimeSteps &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.time_steps, b.time_steps);
  swap(a.__isset, b.__isset);
}

rvGetListOfTimeSteps::rvGetListOfTimeSteps(const rvGetListOfTimeSteps& other141) {
  status = other141.status;
  report = other141.report;
  time_steps = other141.time_steps;
  __isset = other141.__isset;
}
rvGetListOfTimeSteps& rvGetListOfTimeSteps::operator=(const rvGetListOfTimeSteps& other142) {
  status = other142.status;
  report = other142.report;
  time_steps = other142.time_steps;
  __isset = other142.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfTimeSteps& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfTimeSteps(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "time_steps=" << to_string(obj.time_steps);
  out << ")";
  return out;
}


rvGetListOfMeshes::~rvGetListOfMeshes() throw() {
}


void rvGetListOfMeshes::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfMeshes::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfMeshes::__set_meshInfos(const std::vector<MeshInfo> & val) {
  this->meshInfos = val;
}

const char* rvGetListOfMeshes::ascii_fingerprint = "1087FB53E7F49E11A7305C9D3673CCBA";
const uint8_t rvGetListOfMeshes::binary_fingerprint[16] = {0x10,0x87,0xFB,0x53,0xE7,0xF4,0x9E,0x11,0xA7,0x30,0x5C,0x9D,0x36,0x73,0xCC,0xBA};

uint32_t rvGetListOfMeshes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->meshInfos.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _etype146;
            xfer += iprot->readListBegin(_etype146, _size143);
            this->meshInfos.resize(_size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              xfer += this->meshInfos[_i147].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.meshInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfMeshes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfMeshes");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshInfos", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->meshInfos.size()));
    std::vector<MeshInfo> ::const_iterator _iter148;
    for (_iter148 = this->meshInfos.begin(); _iter148 != this->meshInfos.end(); ++_iter148)
    {
      xfer += (*_iter148).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfMeshes &a, rvGetListOfMeshes &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.meshInfos, b.meshInfos);
  swap(a.__isset, b.__isset);
}

rvGetListOfMeshes::rvGetListOfMeshes(const rvGetListOfMeshes& other149) {
  status = other149.status;
  report = other149.report;
  meshInfos = other149.meshInfos;
  __isset = other149.__isset;
}
rvGetListOfMeshes& rvGetListOfMeshes::operator=(const rvGetListOfMeshes& other150) {
  status = other150.status;
  report = other150.report;
  meshInfos = other150.meshInfos;
  __isset = other150.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfMeshes& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfMeshes(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "meshInfos=" << to_string(obj.meshInfos);
  out << ")";
  return out;
}


rvGetListOfResults::~rvGetListOfResults() throw() {
}


void rvGetListOfResults::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfResults::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfResults::__set_result_list(const std::vector<ResultInfo> & val) {
  this->result_list = val;
}

const char* rvGetListOfResults::ascii_fingerprint = "69484CB25AE81A607DD24CAECD55B5F7";
const uint8_t rvGetListOfResults::binary_fingerprint[16] = {0x69,0x48,0x4C,0xB2,0x5A,0xE8,0x1A,0x60,0x7D,0xD2,0x4C,0xAE,0xCD,0x55,0xB5,0xF7};

uint32_t rvGetListOfResults::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->result_list.clear();
            uint32_t _size151;
            ::apache::thrift::protocol::TType _etype154;
            xfer += iprot->readListBegin(_etype154, _size151);
            this->result_list.resize(_size151);
            uint32_t _i155;
            for (_i155 = 0; _i155 < _size151; ++_i155)
            {
              xfer += this->result_list[_i155].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.result_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfResults::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfResults");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->result_list.size()));
    std::vector<ResultInfo> ::const_iterator _iter156;
    for (_iter156 = this->result_list.begin(); _iter156 != this->result_list.end(); ++_iter156)
    {
      xfer += (*_iter156).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfResults &a, rvGetListOfResults &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.result_list, b.result_list);
  swap(a.__isset, b.__isset);
}

rvGetListOfResults::rvGetListOfResults(const rvGetListOfResults& other157) {
  status = other157.status;
  report = other157.report;
  result_list = other157.result_list;
  __isset = other157.__isset;
}
rvGetListOfResults& rvGetListOfResults::operator=(const rvGetListOfResults& other158) {
  status = other158.status;
  report = other158.report;
  result_list = other158.result_list;
  __isset = other158.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfResults& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfResults(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "result_list=" << to_string(obj.result_list);
  out << ")";
  return out;
}


rvGetListOfVerticesFromMesh::~rvGetListOfVerticesFromMesh() throw() {
}


void rvGetListOfVerticesFromMesh::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfVerticesFromMesh::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfVerticesFromMesh::__set_vertex_list(const std::vector<Vertex> & val) {
  this->vertex_list = val;
}

const char* rvGetListOfVerticesFromMesh::ascii_fingerprint = "3DED750E99F49707EC95BA91390DEF81";
const uint8_t rvGetListOfVerticesFromMesh::binary_fingerprint[16] = {0x3D,0xED,0x75,0x0E,0x99,0xF4,0x97,0x07,0xEC,0x95,0xBA,0x91,0x39,0x0D,0xEF,0x81};

uint32_t rvGetListOfVerticesFromMesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertex_list.clear();
            uint32_t _size159;
            ::apache::thrift::protocol::TType _etype162;
            xfer += iprot->readListBegin(_etype162, _size159);
            this->vertex_list.resize(_size159);
            uint32_t _i163;
            for (_i163 = 0; _i163 < _size159; ++_i163)
            {
              xfer += this->vertex_list[_i163].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertex_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfVerticesFromMesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfVerticesFromMesh");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertex_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vertex_list.size()));
    std::vector<Vertex> ::const_iterator _iter164;
    for (_iter164 = this->vertex_list.begin(); _iter164 != this->vertex_list.end(); ++_iter164)
    {
      xfer += (*_iter164).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfVerticesFromMesh &a, rvGetListOfVerticesFromMesh &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.vertex_list, b.vertex_list);
  swap(a.__isset, b.__isset);
}

rvGetListOfVerticesFromMesh::rvGetListOfVerticesFromMesh(const rvGetListOfVerticesFromMesh& other165) {
  status = other165.status;
  report = other165.report;
  vertex_list = other165.vertex_list;
  __isset = other165.__isset;
}
rvGetListOfVerticesFromMesh& rvGetListOfVerticesFromMesh::operator=(const rvGetListOfVerticesFromMesh& other166) {
  status = other166.status;
  report = other166.report;
  vertex_list = other166.vertex_list;
  __isset = other166.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfVerticesFromMesh& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfVerticesFromMesh(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "vertex_list=" << to_string(obj.vertex_list);
  out << ")";
  return out;
}


rvGetResultFromVerticesID::~rvGetResultFromVerticesID() throw() {
}


void rvGetResultFromVerticesID::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID::__set_result_list(const std::vector<ResultOnVertex> & val) {
  this->result_list = val;
}

const char* rvGetResultFromVerticesID::ascii_fingerprint = "7D7F6E03D85558681F4AC69C1B4F3FC4";
const uint8_t rvGetResultFromVerticesID::binary_fingerprint[16] = {0x7D,0x7F,0x6E,0x03,0xD8,0x55,0x58,0x68,0x1F,0x4A,0xC6,0x9C,0x1B,0x4F,0x3F,0xC4};

uint32_t rvGetResultFromVerticesID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->result_list.clear();
            uint32_t _size167;
            ::apache::thrift::protocol::TType _etype170;
            xfer += iprot->readListBegin(_etype170, _size167);
            this->result_list.resize(_size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              xfer += this->result_list[_i171].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.result_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->result_list.size()));
    std::vector<ResultOnVertex> ::const_iterator _iter172;
    for (_iter172 = this->result_list.begin(); _iter172 != this->result_list.end(); ++_iter172)
    {
      xfer += (*_iter172).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID &a, rvGetResultFromVerticesID &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.result_list, b.result_list);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID::rvGetResultFromVerticesID(const rvGetResultFromVerticesID& other173) {
  status = other173.status;
  report = other173.report;
  result_list = other173.result_list;
  __isset = other173.__isset;
}
rvGetResultFromVerticesID& rvGetResultFromVerticesID::operator=(const rvGetResultFromVerticesID& other174) {
  status = other174.status;
  report = other174.report;
  result_list = other174.result_list;
  __isset = other174.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "result_list=" << to_string(obj.result_list);
  out << ")";
  return out;
}


rvGetCoordinatesAndElementsFromMesh::~rvGetCoordinatesAndElementsFromMesh() throw() {
}


void rvGetCoordinatesAndElementsFromMesh::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetCoordinatesAndElementsFromMesh::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetCoordinatesAndElementsFromMesh::__set_vertex_list(const std::vector<Vertex> & val) {
  this->vertex_list = val;
}

void rvGetCoordinatesAndElementsFromMesh::__set_element_list(const std::vector<Element> & val) {
  this->element_list = val;
}

void rvGetCoordinatesAndElementsFromMesh::__set_element_attrib_list(const std::vector<ElementAttrib> & val) {
  this->element_attrib_list = val;
}

void rvGetCoordinatesAndElementsFromMesh::__set_element_group_info_list(const std::vector<ElementGroup> & val) {
  this->element_group_info_list = val;
}

const char* rvGetCoordinatesAndElementsFromMesh::ascii_fingerprint = "25B126BCA9E8A39BD63C5D6F4F0B281E";
const uint8_t rvGetCoordinatesAndElementsFromMesh::binary_fingerprint[16] = {0x25,0xB1,0x26,0xBC,0xA9,0xE8,0xA3,0x9B,0xD6,0x3C,0x5D,0x6F,0x4F,0x0B,0x28,0x1E};

uint32_t rvGetCoordinatesAndElementsFromMesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertex_list.clear();
            uint32_t _size175;
            ::apache::thrift::protocol::TType _etype178;
            xfer += iprot->readListBegin(_etype178, _size175);
            this->vertex_list.resize(_size175);
            uint32_t _i179;
            for (_i179 = 0; _i179 < _size175; ++_i179)
            {
              xfer += this->vertex_list[_i179].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertex_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->element_list.clear();
            uint32_t _size180;
            ::apache::thrift::protocol::TType _etype183;
            xfer += iprot->readListBegin(_etype183, _size180);
            this->element_list.resize(_size180);
            uint32_t _i184;
            for (_i184 = 0; _i184 < _size180; ++_i184)
            {
              xfer += this->element_list[_i184].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.element_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->element_attrib_list.clear();
            uint32_t _size185;
            ::apache::thrift::protocol::TType _etype188;
            xfer += iprot->readListBegin(_etype188, _size185);
            this->element_attrib_list.resize(_size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              xfer += this->element_attrib_list[_i189].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.element_attrib_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->element_group_info_list.clear();
            uint32_t _size190;
            ::apache::thrift::protocol::TType _etype193;
            xfer += iprot->readListBegin(_etype193, _size190);
            this->element_group_info_list.resize(_size190);
            uint32_t _i194;
            for (_i194 = 0; _i194 < _size190; ++_i194)
            {
              xfer += this->element_group_info_list[_i194].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.element_group_info_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetCoordinatesAndElementsFromMesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetCoordinatesAndElementsFromMesh");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertex_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vertex_list.size()));
    std::vector<Vertex> ::const_iterator _iter195;
    for (_iter195 = this->vertex_list.begin(); _iter195 != this->vertex_list.end(); ++_iter195)
    {
      xfer += (*_iter195).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("element_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->element_list.size()));
    std::vector<Element> ::const_iterator _iter196;
    for (_iter196 = this->element_list.begin(); _iter196 != this->element_list.end(); ++_iter196)
    {
      xfer += (*_iter196).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("element_attrib_list", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->element_attrib_list.size()));
    std::vector<ElementAttrib> ::const_iterator _iter197;
    for (_iter197 = this->element_attrib_list.begin(); _iter197 != this->element_attrib_list.end(); ++_iter197)
    {
      xfer += (*_iter197).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("element_group_info_list", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->element_group_info_list.size()));
    std::vector<ElementGroup> ::const_iterator _iter198;
    for (_iter198 = this->element_group_info_list.begin(); _iter198 != this->element_group_info_list.end(); ++_iter198)
    {
      xfer += (*_iter198).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetCoordinatesAndElementsFromMesh &a, rvGetCoordinatesAndElementsFromMesh &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.vertex_list, b.vertex_list);
  swap(a.element_list, b.element_list);
  swap(a.element_attrib_list, b.element_attrib_list);
  swap(a.element_group_info_list, b.element_group_info_list);
  swap(a.__isset, b.__isset);
}

rvGetCoordinatesAndElementsFromMesh::rvGetCoordinatesAndElementsFromMesh(const rvGetCoordinatesAndElementsFromMesh& other199) {
  status = other199.status;
  report = other199.report;
  vertex_list = other199.vertex_list;
  element_list = other199.element_list;
  element_attrib_list = other199.element_attrib_list;
  element_group_info_list = other199.element_group_info_list;
  __isset = other199.__isset;
}
rvGetCoordinatesAndElementsFromMesh& rvGetCoordinatesAndElementsFromMesh::operator=(const rvGetCoordinatesAndElementsFromMesh& other200) {
  status = other200.status;
  report = other200.report;
  vertex_list = other200.vertex_list;
  element_list = other200.element_list;
  element_attrib_list = other200.element_attrib_list;
  element_group_info_list = other200.element_group_info_list;
  __isset = other200.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetCoordinatesAndElementsFromMesh& obj) {
  using apache::thrift::to_string;
  out << "rvGetCoordinatesAndElementsFromMesh(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "vertex_list=" << to_string(obj.vertex_list);
  out << ", " << "element_list=" << to_string(obj.element_list);
  out << ", " << "element_attrib_list=" << to_string(obj.element_attrib_list);
  out << ", " << "element_group_info_list=" << to_string(obj.element_group_info_list);
  out << ")";
  return out;
}

} // namespace
