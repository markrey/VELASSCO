/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "VELaSSCoSM_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace VELaSSCoSM {

int _kElementShapeTypeValues[] = {
  ElementShapeType::UnknownElement,
  ElementShapeType::PointElement,
  ElementShapeType::LineElement,
  ElementShapeType::TriangleElement,
  ElementShapeType::QuadrilateralElement,
  ElementShapeType::TetrahedraElement,
  ElementShapeType::HexahedraElement,
  ElementShapeType::PrismElement,
  ElementShapeType::PyramidElement,
  ElementShapeType::SphereElement,
  ElementShapeType::CircleElement,
  ElementShapeType::ComplexParticleElement
};
const char* _kElementShapeTypeNames[] = {
  "UnknownElement",
  "PointElement",
  "LineElement",
  "TriangleElement",
  "QuadrilateralElement",
  "TetrahedraElement",
  "HexahedraElement",
  "PrismElement",
  "PyramidElement",
  "SphereElement",
  "CircleElement",
  "ComplexParticleElement"
};
const std::map<int, const char*> _ElementShapeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kElementShapeTypeValues, _kElementShapeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ElementType::~ElementType() throw() {
}


void ElementType::__set_shape(const ElementShapeType::type val) {
  this->shape = val;
}

void ElementType::__set_num_nodes(const int32_t val) {
  this->num_nodes = val;
}

const char* ElementType::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t ElementType::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t ElementType::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->shape = (ElementShapeType::type)ecast0;
          this->__isset.shape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_nodes);
          this->__isset.num_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ElementType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ElementType");

  xfer += oprot->writeFieldBegin("shape", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->shape);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_nodes", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_nodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ElementType &a, ElementType &b) {
  using ::std::swap;
  swap(a.shape, b.shape);
  swap(a.num_nodes, b.num_nodes);
  swap(a.__isset, b.__isset);
}

ElementType::ElementType(const ElementType& other1) {
  shape = other1.shape;
  num_nodes = other1.num_nodes;
  __isset = other1.__isset;
}
ElementType& ElementType::operator=(const ElementType& other2) {
  shape = other2.shape;
  num_nodes = other2.num_nodes;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ElementType& obj) {
  using apache::thrift::to_string;
  out << "ElementType(";
  out << "shape=" << to_string(obj.shape);
  out << ", " << "num_nodes=" << to_string(obj.num_nodes);
  out << ")";
  return out;
}


Point::~Point() throw() {
}


void Point::__set_x(const double val) {
  this->x = val;
}

void Point::__set_y(const double val) {
  this->y = val;
}

void Point::__set_z(const double val) {
  this->z = val;
}

const char* Point::ascii_fingerprint = "EFFAD640FBA2CA56C50155B2A4545897";
const uint8_t Point::binary_fingerprint[16] = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

uint32_t Point::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Point::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Point");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Point &a, Point &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

Point::Point(const Point& other3) {
  x = other3.x;
  y = other3.y;
  z = other3.z;
  __isset = other3.__isset;
}
Point& Point::operator=(const Point& other4) {
  x = other4.x;
  y = other4.y;
  z = other4.z;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Point& obj) {
  using apache::thrift::to_string;
  out << "Point(";
  out << "x=" << to_string(obj.x);
  out << ", " << "y=" << to_string(obj.y);
  out << ", " << "z=" << to_string(obj.z);
  out << ")";
  return out;
}


Vertex::~Vertex() throw() {
}


void Vertex::__set_id(const NodeID val) {
  this->id = val;
}

void Vertex::__set_x(const double val) {
  this->x = val;
}

void Vertex::__set_y(const double val) {
  this->y = val;
}

void Vertex::__set_z(const double val) {
  this->z = val;
}

const char* Vertex::ascii_fingerprint = "3BC5E6ABCC6C77829F8D2E02BF3E7711";
const uint8_t Vertex::binary_fingerprint[16] = {0x3B,0xC5,0xE6,0xAB,0xCC,0x6C,0x77,0x82,0x9F,0x8D,0x2E,0x02,0xBF,0x3E,0x77,0x11};

uint32_t Vertex::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vertex::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Vertex");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Vertex &a, Vertex &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

Vertex::Vertex(const Vertex& other5) {
  id = other5.id;
  x = other5.x;
  y = other5.y;
  z = other5.z;
  __isset = other5.__isset;
}
Vertex& Vertex::operator=(const Vertex& other6) {
  id = other6.id;
  x = other6.x;
  y = other6.y;
  z = other6.z;
  __isset = other6.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Vertex& obj) {
  using apache::thrift::to_string;
  out << "Vertex(";
  out << "id=" << to_string(obj.id);
  out << ", " << "x=" << to_string(obj.x);
  out << ", " << "y=" << to_string(obj.y);
  out << ", " << "z=" << to_string(obj.z);
  out << ")";
  return out;
}


Element::~Element() throw() {
}


void Element::__set_id(const int64_t val) {
  this->id = val;
}

void Element::__set_nodes_ids(const std::vector<NodeID> & val) {
  this->nodes_ids = val;
}

const char* Element::ascii_fingerprint = "955BD89722154769CC8FC8E9E0AB6CC2";
const uint8_t Element::binary_fingerprint[16] = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

uint32_t Element::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes_ids.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->nodes_ids.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readI64(this->nodes_ids[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Element::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Element");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nodes_ids.size()));
    std::vector<NodeID> ::const_iterator _iter12;
    for (_iter12 = this->nodes_ids.begin(); _iter12 != this->nodes_ids.end(); ++_iter12)
    {
      xfer += oprot->writeI64((*_iter12));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Element &a, Element &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.nodes_ids, b.nodes_ids);
  swap(a.__isset, b.__isset);
}

Element::Element(const Element& other13) {
  id = other13.id;
  nodes_ids = other13.nodes_ids;
  __isset = other13.__isset;
}
Element& Element::operator=(const Element& other14) {
  id = other14.id;
  nodes_ids = other14.nodes_ids;
  __isset = other14.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Element& obj) {
  using apache::thrift::to_string;
  out << "Element(";
  out << "id=" << to_string(obj.id);
  out << ", " << "nodes_ids=" << to_string(obj.nodes_ids);
  out << ")";
  return out;
}


MeshInfo::~MeshInfo() throw() {
}


void MeshInfo::__set_name(const std::string& val) {
  this->name = val;
}

void MeshInfo::__set_elementType(const ElementType& val) {
  this->elementType = val;
}

void MeshInfo::__set_nVertices(const int64_t val) {
  this->nVertices = val;
}

void MeshInfo::__set_nElements(const int64_t val) {
  this->nElements = val;
}

void MeshInfo::__set_meshUnits(const std::string& val) {
  this->meshUnits = val;
}

void MeshInfo::__set_meshColor(const std::string& val) {
  this->meshColor = val;
}

void MeshInfo::__set_meshNumber(const int32_t val) {
  this->meshNumber = val;
}

void MeshInfo::__set_coordsName(const std::string& val) {
  this->coordsName = val;
}

const char* MeshInfo::ascii_fingerprint = "BB55A649757DA08871436B00AE301AE5";
const uint8_t MeshInfo::binary_fingerprint[16] = {0xBB,0x55,0xA6,0x49,0x75,0x7D,0xA0,0x88,0x71,0x43,0x6B,0x00,0xAE,0x30,0x1A,0xE5};

uint32_t MeshInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->elementType.read(iprot);
          this->__isset.elementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nVertices);
          this->__isset.nVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nElements);
          this->__isset.nElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meshUnits);
          this->__isset.meshUnits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meshColor);
          this->__isset.meshColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->meshNumber);
          this->__isset.meshNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coordsName);
          this->__isset.coordsName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MeshInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MeshInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elementType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->elementType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nVertices", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->nVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nElements", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nElements);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshUnits", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->meshUnits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshColor", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->meshColor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshNumber", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->meshNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coordsName", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->coordsName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MeshInfo &a, MeshInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.elementType, b.elementType);
  swap(a.nVertices, b.nVertices);
  swap(a.nElements, b.nElements);
  swap(a.meshUnits, b.meshUnits);
  swap(a.meshColor, b.meshColor);
  swap(a.meshNumber, b.meshNumber);
  swap(a.coordsName, b.coordsName);
  swap(a.__isset, b.__isset);
}

MeshInfo::MeshInfo(const MeshInfo& other15) {
  name = other15.name;
  elementType = other15.elementType;
  nVertices = other15.nVertices;
  nElements = other15.nElements;
  meshUnits = other15.meshUnits;
  meshColor = other15.meshColor;
  meshNumber = other15.meshNumber;
  coordsName = other15.coordsName;
  __isset = other15.__isset;
}
MeshInfo& MeshInfo::operator=(const MeshInfo& other16) {
  name = other16.name;
  elementType = other16.elementType;
  nVertices = other16.nVertices;
  nElements = other16.nElements;
  meshUnits = other16.meshUnits;
  meshColor = other16.meshColor;
  meshNumber = other16.meshNumber;
  coordsName = other16.coordsName;
  __isset = other16.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MeshInfo& obj) {
  using apache::thrift::to_string;
  out << "MeshInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "elementType=" << to_string(obj.elementType);
  out << ", " << "nVertices=" << to_string(obj.nVertices);
  out << ", " << "nElements=" << to_string(obj.nElements);
  out << ", " << "meshUnits=" << to_string(obj.meshUnits);
  out << ", " << "meshColor=" << to_string(obj.meshColor);
  out << ", " << "meshNumber=" << to_string(obj.meshNumber);
  out << ", " << "coordsName=" << to_string(obj.coordsName);
  out << ")";
  return out;
}


Mesh::~Mesh() throw() {
}


void Mesh::__set_name(const std::string& val) {
  this->name = val;
}

void Mesh::__set_numberOfVertices(const int64_t val) {
  this->numberOfVertices = val;
}

void Mesh::__set_dimension(const int64_t val) {
  this->dimension = val;
}

void Mesh::__set_type(const ElementType& val) {
  this->type = val;
}

void Mesh::__set_nodes(const std::vector<Vertex> & val) {
  this->nodes = val;
}

void Mesh::__set_elements(const std::vector<Element> & val) {
  this->elements = val;
}

const char* Mesh::ascii_fingerprint = "DF18DD7E21D82A44600394ED79F2401D";
const uint8_t Mesh::binary_fingerprint[16] = {0xDF,0x18,0xDD,0x7E,0x21,0xD8,0x2A,0x44,0x60,0x03,0x94,0xED,0x79,0xF2,0x40,0x1D};

uint32_t Mesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numberOfVertices);
          this->__isset.numberOfVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->nodes.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->nodes[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->elements.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->elements[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Mesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Mesh");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfVertices", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->numberOfVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
    std::vector<Vertex> ::const_iterator _iter27;
    for (_iter27 = this->nodes.begin(); _iter27 != this->nodes.end(); ++_iter27)
    {
      xfer += (*_iter27).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Element> ::const_iterator _iter28;
    for (_iter28 = this->elements.begin(); _iter28 != this->elements.end(); ++_iter28)
    {
      xfer += (*_iter28).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Mesh &a, Mesh &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.numberOfVertices, b.numberOfVertices);
  swap(a.dimension, b.dimension);
  swap(a.type, b.type);
  swap(a.nodes, b.nodes);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

Mesh::Mesh(const Mesh& other29) {
  name = other29.name;
  numberOfVertices = other29.numberOfVertices;
  dimension = other29.dimension;
  type = other29.type;
  nodes = other29.nodes;
  elements = other29.elements;
  __isset = other29.__isset;
}
Mesh& Mesh::operator=(const Mesh& other30) {
  name = other30.name;
  numberOfVertices = other30.numberOfVertices;
  dimension = other30.dimension;
  type = other30.type;
  nodes = other30.nodes;
  elements = other30.elements;
  __isset = other30.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Mesh& obj) {
  using apache::thrift::to_string;
  out << "Mesh(";
  out << "name=" << to_string(obj.name);
  out << ", " << "numberOfVertices=" << to_string(obj.numberOfVertices);
  out << ", " << "dimension=" << to_string(obj.dimension);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "nodes=" << to_string(obj.nodes);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


ResultInfo::~ResultInfo() throw() {
}


void ResultInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ResultInfo::__set_type(const std::string& val) {
  this->type = val;
}

void ResultInfo::__set_numberOfComponents(const int32_t val) {
  this->numberOfComponents = val;
}

void ResultInfo::__set_componentNames(const std::vector<std::string> & val) {
  this->componentNames = val;
}

void ResultInfo::__set_location(const std::string& val) {
  this->location = val;
}

void ResultInfo::__set_gaussPointName(const std::string& val) {
  this->gaussPointName = val;
}

void ResultInfo::__set_coordinatesName(const std::string& val) {
  this->coordinatesName = val;
}

void ResultInfo::__set_units(const std::string& val) {
  this->units = val;
}

void ResultInfo::__set_resultNumber(const int32_t val) {
  this->resultNumber = val;
}

const char* ResultInfo::ascii_fingerprint = "97151C990E2F24FBABB8135B737FE75B";
const uint8_t ResultInfo::binary_fingerprint[16] = {0x97,0x15,0x1C,0x99,0x0E,0x2F,0x24,0xFB,0xAB,0xB8,0x13,0x5B,0x73,0x7F,0xE7,0x5B};

uint32_t ResultInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfComponents);
          this->__isset.numberOfComponents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->componentNames.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->componentNames.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += iprot->readString(this->componentNames[_i35]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.componentNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gaussPointName);
          this->__isset.gaussPointName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coordinatesName);
          this->__isset.coordinatesName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->units);
          this->__isset.units = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultNumber);
          this->__isset.resultNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ResultInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfComponents", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numberOfComponents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("componentNames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->componentNames.size()));
    std::vector<std::string> ::const_iterator _iter36;
    for (_iter36 = this->componentNames.begin(); _iter36 != this->componentNames.end(); ++_iter36)
    {
      xfer += oprot->writeString((*_iter36));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gaussPointName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->gaussPointName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coordinatesName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->coordinatesName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("units", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->units);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultNumber", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->resultNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ResultInfo &a, ResultInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.numberOfComponents, b.numberOfComponents);
  swap(a.componentNames, b.componentNames);
  swap(a.location, b.location);
  swap(a.gaussPointName, b.gaussPointName);
  swap(a.coordinatesName, b.coordinatesName);
  swap(a.units, b.units);
  swap(a.resultNumber, b.resultNumber);
  swap(a.__isset, b.__isset);
}

ResultInfo::ResultInfo(const ResultInfo& other37) {
  name = other37.name;
  type = other37.type;
  numberOfComponents = other37.numberOfComponents;
  componentNames = other37.componentNames;
  location = other37.location;
  gaussPointName = other37.gaussPointName;
  coordinatesName = other37.coordinatesName;
  units = other37.units;
  resultNumber = other37.resultNumber;
  __isset = other37.__isset;
}
ResultInfo& ResultInfo::operator=(const ResultInfo& other38) {
  name = other38.name;
  type = other38.type;
  numberOfComponents = other38.numberOfComponents;
  componentNames = other38.componentNames;
  location = other38.location;
  gaussPointName = other38.gaussPointName;
  coordinatesName = other38.coordinatesName;
  units = other38.units;
  resultNumber = other38.resultNumber;
  __isset = other38.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ResultInfo& obj) {
  using apache::thrift::to_string;
  out << "ResultInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "numberOfComponents=" << to_string(obj.numberOfComponents);
  out << ", " << "componentNames=" << to_string(obj.componentNames);
  out << ", " << "location=" << to_string(obj.location);
  out << ", " << "gaussPointName=" << to_string(obj.gaussPointName);
  out << ", " << "coordinatesName=" << to_string(obj.coordinatesName);
  out << ", " << "units=" << to_string(obj.units);
  out << ", " << "resultNumber=" << to_string(obj.resultNumber);
  out << ")";
  return out;
}


ResultOnVertex::~ResultOnVertex() throw() {
}


void ResultOnVertex::__set_id(const int64_t val) {
  this->id = val;
}

void ResultOnVertex::__set_value(const std::vector<double> & val) {
  this->value = val;
}

const char* ResultOnVertex::ascii_fingerprint = "1CB61EEDEC70E44B3B75F0C0C76D5496";
const uint8_t ResultOnVertex::binary_fingerprint[16] = {0x1C,0xB6,0x1E,0xED,0xEC,0x70,0xE4,0x4B,0x3B,0x75,0xF0,0xC0,0xC7,0x6D,0x54,0x96};

uint32_t ResultOnVertex::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->value.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += iprot->readDouble(this->value[_i43]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultOnVertex::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ResultOnVertex");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->value.size()));
    std::vector<double> ::const_iterator _iter44;
    for (_iter44 = this->value.begin(); _iter44 != this->value.end(); ++_iter44)
    {
      xfer += oprot->writeDouble((*_iter44));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ResultOnVertex &a, ResultOnVertex &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ResultOnVertex::ResultOnVertex(const ResultOnVertex& other45) {
  id = other45.id;
  value = other45.value;
  __isset = other45.__isset;
}
ResultOnVertex& ResultOnVertex::operator=(const ResultOnVertex& other46) {
  id = other46.id;
  value = other46.value;
  __isset = other46.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ResultOnVertex& obj) {
  using apache::thrift::to_string;
  out << "ResultOnVertex(";
  out << "id=" << to_string(obj.id);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


Triangle::~Triangle() throw() {
}


void Triangle::__set_nodes(const std::vector<NodeID> & val) {
  this->nodes = val;
}

const char* Triangle::ascii_fingerprint = "E49D7D1A9013CC81CD0F69D631EF82E4";
const uint8_t Triangle::binary_fingerprint[16] = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

uint32_t Triangle::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _etype50;
            xfer += iprot->readListBegin(_etype50, _size47);
            this->nodes.resize(_size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              xfer += iprot->readI64(this->nodes[_i51]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Triangle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Triangle");

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nodes.size()));
    std::vector<NodeID> ::const_iterator _iter52;
    for (_iter52 = this->nodes.begin(); _iter52 != this->nodes.end(); ++_iter52)
    {
      xfer += oprot->writeI64((*_iter52));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Triangle &a, Triangle &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.__isset, b.__isset);
}

Triangle::Triangle(const Triangle& other53) {
  nodes = other53.nodes;
  __isset = other53.__isset;
}
Triangle& Triangle::operator=(const Triangle& other54) {
  nodes = other54.nodes;
  __isset = other54.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Triangle& obj) {
  using apache::thrift::to_string;
  out << "Triangle(";
  out << "nodes=" << to_string(obj.nodes);
  out << ")";
  return out;
}


rvGetElementOfPointsInSpace::~rvGetElementOfPointsInSpace() throw() {
}


void rvGetElementOfPointsInSpace::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetElementOfPointsInSpace::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetElementOfPointsInSpace::__set_elements(const std::vector<Element> & val) {
  this->elements = val;
}

const char* rvGetElementOfPointsInSpace::ascii_fingerprint = "D98B588D8A5C9FF6B27508ADBB216FF2";
const uint8_t rvGetElementOfPointsInSpace::binary_fingerprint[16] = {0xD9,0x8B,0x58,0x8D,0x8A,0x5C,0x9F,0xF6,0xB2,0x75,0x08,0xAD,0xBB,0x21,0x6F,0xF2};

uint32_t rvGetElementOfPointsInSpace::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _etype58;
            xfer += iprot->readListBegin(_etype58, _size55);
            this->elements.resize(_size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              xfer += this->elements[_i59].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetElementOfPointsInSpace::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetElementOfPointsInSpace");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Element> ::const_iterator _iter60;
    for (_iter60 = this->elements.begin(); _iter60 != this->elements.end(); ++_iter60)
    {
      xfer += (*_iter60).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetElementOfPointsInSpace &a, rvGetElementOfPointsInSpace &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

rvGetElementOfPointsInSpace::rvGetElementOfPointsInSpace(const rvGetElementOfPointsInSpace& other61) {
  status = other61.status;
  report = other61.report;
  elements = other61.elements;
  __isset = other61.__isset;
}
rvGetElementOfPointsInSpace& rvGetElementOfPointsInSpace::operator=(const rvGetElementOfPointsInSpace& other62) {
  status = other62.status;
  report = other62.report;
  elements = other62.elements;
  __isset = other62.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetElementOfPointsInSpace& obj) {
  using apache::thrift::to_string;
  out << "rvGetElementOfPointsInSpace(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


rvGetBoundaryOfLocalMesh::~rvGetBoundaryOfLocalMesh() throw() {
}


void rvGetBoundaryOfLocalMesh::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetBoundaryOfLocalMesh::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetBoundaryOfLocalMesh::__set_elements(const std::vector<Triangle> & val) {
  this->elements = val;
}

const char* rvGetBoundaryOfLocalMesh::ascii_fingerprint = "DF8BC3D8E99EACBA0A38A2AE8F42E17F";
const uint8_t rvGetBoundaryOfLocalMesh::binary_fingerprint[16] = {0xDF,0x8B,0xC3,0xD8,0xE9,0x9E,0xAC,0xBA,0x0A,0x38,0xA2,0xAE,0x8F,0x42,0xE1,0x7F};

uint32_t rvGetBoundaryOfLocalMesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size63;
            ::apache::thrift::protocol::TType _etype66;
            xfer += iprot->readListBegin(_etype66, _size63);
            this->elements.resize(_size63);
            uint32_t _i67;
            for (_i67 = 0; _i67 < _size63; ++_i67)
            {
              xfer += this->elements[_i67].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetBoundaryOfLocalMesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetBoundaryOfLocalMesh");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Triangle> ::const_iterator _iter68;
    for (_iter68 = this->elements.begin(); _iter68 != this->elements.end(); ++_iter68)
    {
      xfer += (*_iter68).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetBoundaryOfLocalMesh &a, rvGetBoundaryOfLocalMesh &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

rvGetBoundaryOfLocalMesh::rvGetBoundaryOfLocalMesh(const rvGetBoundaryOfLocalMesh& other69) {
  status = other69.status;
  report = other69.report;
  elements = other69.elements;
  __isset = other69.__isset;
}
rvGetBoundaryOfLocalMesh& rvGetBoundaryOfLocalMesh::operator=(const rvGetBoundaryOfLocalMesh& other70) {
  status = other70.status;
  report = other70.report;
  elements = other70.elements;
  __isset = other70.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetBoundaryOfLocalMesh& obj) {
  using apache::thrift::to_string;
  out << "rvGetBoundaryOfLocalMesh(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


rvGetResultFromVerticesID_A::~rvGetResultFromVerticesID_A() throw() {
}


void rvGetResultFromVerticesID_A::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID_A::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID_A::__set_nVertices(const int64_t val) {
  this->nVertices = val;
}

void rvGetResultFromVerticesID_A::__set_nValuesPrVertex(const int64_t val) {
  this->nValuesPrVertex = val;
}

void rvGetResultFromVerticesID_A::__set_vertexIDs(const std::vector<int64_t> & val) {
  this->vertexIDs = val;
}

void rvGetResultFromVerticesID_A::__set_resultValues(const std::vector<double> & val) {
  this->resultValues = val;
}

const char* rvGetResultFromVerticesID_A::ascii_fingerprint = "B51FB0E8BE2E9146E9BCED13565E0E5F";
const uint8_t rvGetResultFromVerticesID_A::binary_fingerprint[16] = {0xB5,0x1F,0xB0,0xE8,0xBE,0x2E,0x91,0x46,0xE9,0xBC,0xED,0x13,0x56,0x5E,0x0E,0x5F};

uint32_t rvGetResultFromVerticesID_A::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nVertices);
          this->__isset.nVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nValuesPrVertex);
          this->__isset.nValuesPrVertex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertexIDs.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _etype74;
            xfer += iprot->readListBegin(_etype74, _size71);
            this->vertexIDs.resize(_size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              xfer += iprot->readI64(this->vertexIDs[_i75]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertexIDs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resultValues.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _etype79;
            xfer += iprot->readListBegin(_etype79, _size76);
            this->resultValues.resize(_size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              xfer += iprot->readDouble(this->resultValues[_i80]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resultValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID_A::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID_A");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nVertices", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->nVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nValuesPrVertex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nValuesPrVertex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertexIDs", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->vertexIDs.size()));
    std::vector<int64_t> ::const_iterator _iter81;
    for (_iter81 = this->vertexIDs.begin(); _iter81 != this->vertexIDs.end(); ++_iter81)
    {
      xfer += oprot->writeI64((*_iter81));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultValues", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->resultValues.size()));
    std::vector<double> ::const_iterator _iter82;
    for (_iter82 = this->resultValues.begin(); _iter82 != this->resultValues.end(); ++_iter82)
    {
      xfer += oprot->writeDouble((*_iter82));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID_A &a, rvGetResultFromVerticesID_A &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.nVertices, b.nVertices);
  swap(a.nValuesPrVertex, b.nValuesPrVertex);
  swap(a.vertexIDs, b.vertexIDs);
  swap(a.resultValues, b.resultValues);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID_A::rvGetResultFromVerticesID_A(const rvGetResultFromVerticesID_A& other83) {
  status = other83.status;
  report = other83.report;
  nVertices = other83.nVertices;
  nValuesPrVertex = other83.nValuesPrVertex;
  vertexIDs = other83.vertexIDs;
  resultValues = other83.resultValues;
  __isset = other83.__isset;
}
rvGetResultFromVerticesID_A& rvGetResultFromVerticesID_A::operator=(const rvGetResultFromVerticesID_A& other84) {
  status = other84.status;
  report = other84.report;
  nVertices = other84.nVertices;
  nValuesPrVertex = other84.nValuesPrVertex;
  vertexIDs = other84.vertexIDs;
  resultValues = other84.resultValues;
  __isset = other84.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_A& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID_A(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "nVertices=" << to_string(obj.nVertices);
  out << ", " << "nValuesPrVertex=" << to_string(obj.nValuesPrVertex);
  out << ", " << "vertexIDs=" << to_string(obj.vertexIDs);
  out << ", " << "resultValues=" << to_string(obj.resultValues);
  out << ")";
  return out;
}


VertexResult::~VertexResult() throw() {
}


void VertexResult::__set_vertexID(const int64_t val) {
  this->vertexID = val;
}

void VertexResult::__set_resuls(const std::vector<double> & val) {
  this->resuls = val;
}

const char* VertexResult::ascii_fingerprint = "1CB61EEDEC70E44B3B75F0C0C76D5496";
const uint8_t VertexResult::binary_fingerprint[16] = {0x1C,0xB6,0x1E,0xED,0xEC,0x70,0xE4,0x4B,0x3B,0x75,0xF0,0xC0,0xC7,0x6D,0x54,0x96};

uint32_t VertexResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vertexID);
          this->__isset.vertexID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resuls.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->resuls.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += iprot->readDouble(this->resuls[_i89]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resuls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VertexResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VertexResult");

  xfer += oprot->writeFieldBegin("vertexID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vertexID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resuls", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->resuls.size()));
    std::vector<double> ::const_iterator _iter90;
    for (_iter90 = this->resuls.begin(); _iter90 != this->resuls.end(); ++_iter90)
    {
      xfer += oprot->writeDouble((*_iter90));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VertexResult &a, VertexResult &b) {
  using ::std::swap;
  swap(a.vertexID, b.vertexID);
  swap(a.resuls, b.resuls);
  swap(a.__isset, b.__isset);
}

VertexResult::VertexResult(const VertexResult& other91) {
  vertexID = other91.vertexID;
  resuls = other91.resuls;
  __isset = other91.__isset;
}
VertexResult& VertexResult::operator=(const VertexResult& other92) {
  vertexID = other92.vertexID;
  resuls = other92.resuls;
  __isset = other92.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VertexResult& obj) {
  using apache::thrift::to_string;
  out << "VertexResult(";
  out << "vertexID=" << to_string(obj.vertexID);
  out << ", " << "resuls=" << to_string(obj.resuls);
  out << ")";
  return out;
}


rvGetResultFromVerticesID_B::~rvGetResultFromVerticesID_B() throw() {
}


void rvGetResultFromVerticesID_B::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID_B::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID_B::__set_vertexResults(const std::vector<VertexResult> & val) {
  this->vertexResults = val;
}

const char* rvGetResultFromVerticesID_B::ascii_fingerprint = "7D7F6E03D85558681F4AC69C1B4F3FC4";
const uint8_t rvGetResultFromVerticesID_B::binary_fingerprint[16] = {0x7D,0x7F,0x6E,0x03,0xD8,0x55,0x58,0x68,0x1F,0x4A,0xC6,0x9C,0x1B,0x4F,0x3F,0xC4};

uint32_t rvGetResultFromVerticesID_B::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertexResults.clear();
            uint32_t _size93;
            ::apache::thrift::protocol::TType _etype96;
            xfer += iprot->readListBegin(_etype96, _size93);
            this->vertexResults.resize(_size93);
            uint32_t _i97;
            for (_i97 = 0; _i97 < _size93; ++_i97)
            {
              xfer += this->vertexResults[_i97].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertexResults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID_B::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID_B");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertexResults", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vertexResults.size()));
    std::vector<VertexResult> ::const_iterator _iter98;
    for (_iter98 = this->vertexResults.begin(); _iter98 != this->vertexResults.end(); ++_iter98)
    {
      xfer += (*_iter98).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID_B &a, rvGetResultFromVerticesID_B &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.vertexResults, b.vertexResults);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID_B::rvGetResultFromVerticesID_B(const rvGetResultFromVerticesID_B& other99) {
  status = other99.status;
  report = other99.report;
  vertexResults = other99.vertexResults;
  __isset = other99.__isset;
}
rvGetResultFromVerticesID_B& rvGetResultFromVerticesID_B::operator=(const rvGetResultFromVerticesID_B& other100) {
  status = other100.status;
  report = other100.report;
  vertexResults = other100.vertexResults;
  __isset = other100.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_B& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID_B(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "vertexResults=" << to_string(obj.vertexResults);
  out << ")";
  return out;
}


ModelInfo::~ModelInfo() throw() {
}


void ModelInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ModelInfo::__set_repository(const std::string& val) {
  this->repository = val;
}

void ModelInfo::__set_owner(const std::string& val) {
  this->owner = val;
}

void ModelInfo::__set_created(const std::string& val) {
  this->created = val;
}

void ModelInfo::__set_accessRights(const std::string& val) {
  this->accessRights = val;
}

void ModelInfo::__set_administrators(const std::string& val) {
  this->administrators = val;
}

void ModelInfo::__set_underlyingSchema(const std::string& val) {
  this->underlyingSchema = val;
}

void ModelInfo::__set_nObjectsInModel(const int64_t val) {
  this->nObjectsInModel = val;
}

void ModelInfo::__set_dataSize(const int64_t val) {
  this->dataSize = val;
}

void ModelInfo::__set_stringEncoding(const std::string& val) {
  this->stringEncoding = val;
}

void ModelInfo::__set_options(const std::string& val) {
  this->options = val;
}

const char* ModelInfo::ascii_fingerprint = "2F09E0B6489C52E1F2AB8A6194159964";
const uint8_t ModelInfo::binary_fingerprint[16] = {0x2F,0x09,0xE0,0xB6,0x48,0x9C,0x52,0xE1,0xF2,0xAB,0x8A,0x61,0x94,0x15,0x99,0x64};

uint32_t ModelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->repository);
          this->__isset.repository = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessRights);
          this->__isset.accessRights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->administrators);
          this->__isset.administrators = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->underlyingSchema);
          this->__isset.underlyingSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nObjectsInModel);
          this->__isset.nObjectsInModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dataSize);
          this->__isset.dataSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringEncoding);
          this->__isset.stringEncoding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->options);
          this->__isset.options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ModelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ModelInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repository", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->repository);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessRights", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->accessRights);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("administrators", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->administrators);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("underlyingSchema", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->underlyingSchema);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nObjectsInModel", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->nObjectsInModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataSize", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->dataSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringEncoding", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->stringEncoding);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->options);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ModelInfo &a, ModelInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.repository, b.repository);
  swap(a.owner, b.owner);
  swap(a.created, b.created);
  swap(a.accessRights, b.accessRights);
  swap(a.administrators, b.administrators);
  swap(a.underlyingSchema, b.underlyingSchema);
  swap(a.nObjectsInModel, b.nObjectsInModel);
  swap(a.dataSize, b.dataSize);
  swap(a.stringEncoding, b.stringEncoding);
  swap(a.options, b.options);
  swap(a.__isset, b.__isset);
}

ModelInfo::ModelInfo(const ModelInfo& other101) {
  name = other101.name;
  repository = other101.repository;
  owner = other101.owner;
  created = other101.created;
  accessRights = other101.accessRights;
  administrators = other101.administrators;
  underlyingSchema = other101.underlyingSchema;
  nObjectsInModel = other101.nObjectsInModel;
  dataSize = other101.dataSize;
  stringEncoding = other101.stringEncoding;
  options = other101.options;
  __isset = other101.__isset;
}
ModelInfo& ModelInfo::operator=(const ModelInfo& other102) {
  name = other102.name;
  repository = other102.repository;
  owner = other102.owner;
  created = other102.created;
  accessRights = other102.accessRights;
  administrators = other102.administrators;
  underlyingSchema = other102.underlyingSchema;
  nObjectsInModel = other102.nObjectsInModel;
  dataSize = other102.dataSize;
  stringEncoding = other102.stringEncoding;
  options = other102.options;
  __isset = other102.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ModelInfo& obj) {
  using apache::thrift::to_string;
  out << "ModelInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "repository=" << to_string(obj.repository);
  out << ", " << "owner=" << to_string(obj.owner);
  out << ", " << "created=" << to_string(obj.created);
  out << ", " << "accessRights=" << to_string(obj.accessRights);
  out << ", " << "administrators=" << to_string(obj.administrators);
  out << ", " << "underlyingSchema=" << to_string(obj.underlyingSchema);
  out << ", " << "nObjectsInModel=" << to_string(obj.nObjectsInModel);
  out << ", " << "dataSize=" << to_string(obj.dataSize);
  out << ", " << "stringEncoding=" << to_string(obj.stringEncoding);
  out << ", " << "options=" << to_string(obj.options);
  out << ")";
  return out;
}


FullyQualifiedModelName::~FullyQualifiedModelName() throw() {
}


void FullyQualifiedModelName::__set_name(const std::string& val) {
  this->name = val;
}

void FullyQualifiedModelName::__set_full_path(const std::string& val) {
  this->full_path = val;
}

void FullyQualifiedModelName::__set_modelID(const std::string& val) {
  this->modelID = val;
}

void FullyQualifiedModelName::__set_location(const std::string& val) {
  this->location = val;
}

const char* FullyQualifiedModelName::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t FullyQualifiedModelName::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t FullyQualifiedModelName::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->full_path);
          this->__isset.full_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->modelID);
          this->__isset.modelID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FullyQualifiedModelName::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FullyQualifiedModelName");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->full_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->modelID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FullyQualifiedModelName &a, FullyQualifiedModelName &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.full_path, b.full_path);
  swap(a.modelID, b.modelID);
  swap(a.location, b.location);
  swap(a.__isset, b.__isset);
}

FullyQualifiedModelName::FullyQualifiedModelName(const FullyQualifiedModelName& other103) {
  name = other103.name;
  full_path = other103.full_path;
  modelID = other103.modelID;
  location = other103.location;
  __isset = other103.__isset;
}
FullyQualifiedModelName& FullyQualifiedModelName::operator=(const FullyQualifiedModelName& other104) {
  name = other104.name;
  full_path = other104.full_path;
  modelID = other104.modelID;
  location = other104.location;
  __isset = other104.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FullyQualifiedModelName& obj) {
  using apache::thrift::to_string;
  out << "FullyQualifiedModelName(";
  out << "name=" << to_string(obj.name);
  out << ", " << "full_path=" << to_string(obj.full_path);
  out << ", " << "modelID=" << to_string(obj.modelID);
  out << ", " << "location=" << to_string(obj.location);
  out << ")";
  return out;
}


rvGetListOfModels::~rvGetListOfModels() throw() {
}


void rvGetListOfModels::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfModels::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfModels::__set_models(const std::vector<FullyQualifiedModelName> & val) {
  this->models = val;
}

const char* rvGetListOfModels::ascii_fingerprint = "6F4C9A3920D50E26C78816CC39D0B1BE";
const uint8_t rvGetListOfModels::binary_fingerprint[16] = {0x6F,0x4C,0x9A,0x39,0x20,0xD5,0x0E,0x26,0xC7,0x88,0x16,0xCC,0x39,0xD0,0xB1,0xBE};

uint32_t rvGetListOfModels::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->models.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            xfer += iprot->readListBegin(_etype108, _size105);
            this->models.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += this->models[_i109].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.models = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfModels::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfModels");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("models", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->models.size()));
    std::vector<FullyQualifiedModelName> ::const_iterator _iter110;
    for (_iter110 = this->models.begin(); _iter110 != this->models.end(); ++_iter110)
    {
      xfer += (*_iter110).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfModels &a, rvGetListOfModels &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.models, b.models);
  swap(a.__isset, b.__isset);
}

rvGetListOfModels::rvGetListOfModels(const rvGetListOfModels& other111) {
  status = other111.status;
  report = other111.report;
  models = other111.models;
  __isset = other111.__isset;
}
rvGetListOfModels& rvGetListOfModels::operator=(const rvGetListOfModels& other112) {
  status = other112.status;
  report = other112.report;
  models = other112.models;
  __isset = other112.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfModels& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfModels(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "models=" << to_string(obj.models);
  out << ")";
  return out;
}


rvGetThumbnailOfAModel::~rvGetThumbnailOfAModel() throw() {
}


void rvGetThumbnailOfAModel::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetThumbnailOfAModel::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetThumbnailOfAModel::__set_imageFile(const std::string& val) {
  this->imageFile = val;
}

const char* rvGetThumbnailOfAModel::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t rvGetThumbnailOfAModel::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t rvGetThumbnailOfAModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->imageFile);
          this->__isset.imageFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetThumbnailOfAModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetThumbnailOfAModel");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imageFile", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->imageFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetThumbnailOfAModel &a, rvGetThumbnailOfAModel &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.imageFile, b.imageFile);
  swap(a.__isset, b.__isset);
}

rvGetThumbnailOfAModel::rvGetThumbnailOfAModel(const rvGetThumbnailOfAModel& other113) {
  status = other113.status;
  report = other113.report;
  imageFile = other113.imageFile;
  __isset = other113.__isset;
}
rvGetThumbnailOfAModel& rvGetThumbnailOfAModel::operator=(const rvGetThumbnailOfAModel& other114) {
  status = other114.status;
  report = other114.report;
  imageFile = other114.imageFile;
  __isset = other114.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetThumbnailOfAModel& obj) {
  using apache::thrift::to_string;
  out << "rvGetThumbnailOfAModel(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "imageFile=" << to_string(obj.imageFile);
  out << ")";
  return out;
}


rvOpenModel::~rvOpenModel() throw() {
}


void rvOpenModel::__set_status(const std::string& val) {
  this->status = val;
}

void rvOpenModel::__set_report(const std::string& val) {
  this->report = val;
}

void rvOpenModel::__set_modelID(const std::string& val) {
  this->modelID = val;
}

void rvOpenModel::__set_model_info(const FullyQualifiedModelName& val) {
  this->model_info = val;
}

const char* rvOpenModel::ascii_fingerprint = "EC01D39DC1B343EB339C70385728F51B";
const uint8_t rvOpenModel::binary_fingerprint[16] = {0xEC,0x01,0xD3,0x9D,0xC1,0xB3,0x43,0xEB,0x33,0x9C,0x70,0x38,0x57,0x28,0xF5,0x1B};

uint32_t rvOpenModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->modelID);
          this->__isset.modelID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->model_info.read(iprot);
          this->__isset.model_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvOpenModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvOpenModel");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->modelID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("model_info", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->model_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvOpenModel &a, rvOpenModel &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.modelID, b.modelID);
  swap(a.model_info, b.model_info);
  swap(a.__isset, b.__isset);
}

rvOpenModel::rvOpenModel(const rvOpenModel& other115) {
  status = other115.status;
  report = other115.report;
  modelID = other115.modelID;
  model_info = other115.model_info;
  __isset = other115.__isset;
}
rvOpenModel& rvOpenModel::operator=(const rvOpenModel& other116) {
  status = other116.status;
  report = other116.report;
  modelID = other116.modelID;
  model_info = other116.model_info;
  __isset = other116.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvOpenModel& obj) {
  using apache::thrift::to_string;
  out << "rvOpenModel(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "modelID=" << to_string(obj.modelID);
  out << ", " << "model_info=" << to_string(obj.model_info);
  out << ")";
  return out;
}


rvGetListOfAnalyses::~rvGetListOfAnalyses() throw() {
}


void rvGetListOfAnalyses::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfAnalyses::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfAnalyses::__set_analyses(const std::vector<std::string> & val) {
  this->analyses = val;
}

const char* rvGetListOfAnalyses::ascii_fingerprint = "8E2AD6401E83558ECFD6A13D74DD0A3F";
const uint8_t rvGetListOfAnalyses::binary_fingerprint[16] = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};

uint32_t rvGetListOfAnalyses::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->analyses.clear();
            uint32_t _size117;
            ::apache::thrift::protocol::TType _etype120;
            xfer += iprot->readListBegin(_etype120, _size117);
            this->analyses.resize(_size117);
            uint32_t _i121;
            for (_i121 = 0; _i121 < _size117; ++_i121)
            {
              xfer += iprot->readString(this->analyses[_i121]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.analyses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfAnalyses::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfAnalyses");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyses", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->analyses.size()));
    std::vector<std::string> ::const_iterator _iter122;
    for (_iter122 = this->analyses.begin(); _iter122 != this->analyses.end(); ++_iter122)
    {
      xfer += oprot->writeString((*_iter122));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfAnalyses &a, rvGetListOfAnalyses &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.analyses, b.analyses);
  swap(a.__isset, b.__isset);
}

rvGetListOfAnalyses::rvGetListOfAnalyses(const rvGetListOfAnalyses& other123) {
  status = other123.status;
  report = other123.report;
  analyses = other123.analyses;
  __isset = other123.__isset;
}
rvGetListOfAnalyses& rvGetListOfAnalyses::operator=(const rvGetListOfAnalyses& other124) {
  status = other124.status;
  report = other124.report;
  analyses = other124.analyses;
  __isset = other124.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfAnalyses& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfAnalyses(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "analyses=" << to_string(obj.analyses);
  out << ")";
  return out;
}


rvGetListOfTimeSteps::~rvGetListOfTimeSteps() throw() {
}


void rvGetListOfTimeSteps::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfTimeSteps::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfTimeSteps::__set_time_steps(const std::vector<double> & val) {
  this->time_steps = val;
}

const char* rvGetListOfTimeSteps::ascii_fingerprint = "079D8EABC143D6AF5B88B3375EB108AD";
const uint8_t rvGetListOfTimeSteps::binary_fingerprint[16] = {0x07,0x9D,0x8E,0xAB,0xC1,0x43,0xD6,0xAF,0x5B,0x88,0xB3,0x37,0x5E,0xB1,0x08,0xAD};

uint32_t rvGetListOfTimeSteps::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->time_steps.clear();
            uint32_t _size125;
            ::apache::thrift::protocol::TType _etype128;
            xfer += iprot->readListBegin(_etype128, _size125);
            this->time_steps.resize(_size125);
            uint32_t _i129;
            for (_i129 = 0; _i129 < _size125; ++_i129)
            {
              xfer += iprot->readDouble(this->time_steps[_i129]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.time_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfTimeSteps::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfTimeSteps");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_steps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->time_steps.size()));
    std::vector<double> ::const_iterator _iter130;
    for (_iter130 = this->time_steps.begin(); _iter130 != this->time_steps.end(); ++_iter130)
    {
      xfer += oprot->writeDouble((*_iter130));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfTimeSteps &a, rvGetListOfTimeSteps &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.time_steps, b.time_steps);
  swap(a.__isset, b.__isset);
}

rvGetListOfTimeSteps::rvGetListOfTimeSteps(const rvGetListOfTimeSteps& other131) {
  status = other131.status;
  report = other131.report;
  time_steps = other131.time_steps;
  __isset = other131.__isset;
}
rvGetListOfTimeSteps& rvGetListOfTimeSteps::operator=(const rvGetListOfTimeSteps& other132) {
  status = other132.status;
  report = other132.report;
  time_steps = other132.time_steps;
  __isset = other132.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfTimeSteps& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfTimeSteps(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "time_steps=" << to_string(obj.time_steps);
  out << ")";
  return out;
}


rvGetListOfMeshes::~rvGetListOfMeshes() throw() {
}


void rvGetListOfMeshes::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfMeshes::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfMeshes::__set_meshInfos(const std::vector<MeshInfo> & val) {
  this->meshInfos = val;
}

const char* rvGetListOfMeshes::ascii_fingerprint = "1087FB53E7F49E11A7305C9D3673CCBA";
const uint8_t rvGetListOfMeshes::binary_fingerprint[16] = {0x10,0x87,0xFB,0x53,0xE7,0xF4,0x9E,0x11,0xA7,0x30,0x5C,0x9D,0x36,0x73,0xCC,0xBA};

uint32_t rvGetListOfMeshes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->meshInfos.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->meshInfos.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += this->meshInfos[_i137].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.meshInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfMeshes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfMeshes");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshInfos", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->meshInfos.size()));
    std::vector<MeshInfo> ::const_iterator _iter138;
    for (_iter138 = this->meshInfos.begin(); _iter138 != this->meshInfos.end(); ++_iter138)
    {
      xfer += (*_iter138).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfMeshes &a, rvGetListOfMeshes &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.meshInfos, b.meshInfos);
  swap(a.__isset, b.__isset);
}

rvGetListOfMeshes::rvGetListOfMeshes(const rvGetListOfMeshes& other139) {
  status = other139.status;
  report = other139.report;
  meshInfos = other139.meshInfos;
  __isset = other139.__isset;
}
rvGetListOfMeshes& rvGetListOfMeshes::operator=(const rvGetListOfMeshes& other140) {
  status = other140.status;
  report = other140.report;
  meshInfos = other140.meshInfos;
  __isset = other140.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfMeshes& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfMeshes(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "meshInfos=" << to_string(obj.meshInfos);
  out << ")";
  return out;
}


rvGetListOfResults::~rvGetListOfResults() throw() {
}


void rvGetListOfResults::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfResults::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfResults::__set_result_list(const std::vector<ResultInfo> & val) {
  this->result_list = val;
}

const char* rvGetListOfResults::ascii_fingerprint = "69484CB25AE81A607DD24CAECD55B5F7";
const uint8_t rvGetListOfResults::binary_fingerprint[16] = {0x69,0x48,0x4C,0xB2,0x5A,0xE8,0x1A,0x60,0x7D,0xD2,0x4C,0xAE,0xCD,0x55,0xB5,0xF7};

uint32_t rvGetListOfResults::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->result_list.clear();
            uint32_t _size141;
            ::apache::thrift::protocol::TType _etype144;
            xfer += iprot->readListBegin(_etype144, _size141);
            this->result_list.resize(_size141);
            uint32_t _i145;
            for (_i145 = 0; _i145 < _size141; ++_i145)
            {
              xfer += this->result_list[_i145].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.result_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfResults::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfResults");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->result_list.size()));
    std::vector<ResultInfo> ::const_iterator _iter146;
    for (_iter146 = this->result_list.begin(); _iter146 != this->result_list.end(); ++_iter146)
    {
      xfer += (*_iter146).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfResults &a, rvGetListOfResults &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.result_list, b.result_list);
  swap(a.__isset, b.__isset);
}

rvGetListOfResults::rvGetListOfResults(const rvGetListOfResults& other147) {
  status = other147.status;
  report = other147.report;
  result_list = other147.result_list;
  __isset = other147.__isset;
}
rvGetListOfResults& rvGetListOfResults::operator=(const rvGetListOfResults& other148) {
  status = other148.status;
  report = other148.report;
  result_list = other148.result_list;
  __isset = other148.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfResults& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfResults(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "result_list=" << to_string(obj.result_list);
  out << ")";
  return out;
}


rvGetListOfVerticesFromMesh::~rvGetListOfVerticesFromMesh() throw() {
}


void rvGetListOfVerticesFromMesh::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfVerticesFromMesh::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfVerticesFromMesh::__set_vertex_list(const std::vector<Vertex> & val) {
  this->vertex_list = val;
}

const char* rvGetListOfVerticesFromMesh::ascii_fingerprint = "3DED750E99F49707EC95BA91390DEF81";
const uint8_t rvGetListOfVerticesFromMesh::binary_fingerprint[16] = {0x3D,0xED,0x75,0x0E,0x99,0xF4,0x97,0x07,0xEC,0x95,0xBA,0x91,0x39,0x0D,0xEF,0x81};

uint32_t rvGetListOfVerticesFromMesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertex_list.clear();
            uint32_t _size149;
            ::apache::thrift::protocol::TType _etype152;
            xfer += iprot->readListBegin(_etype152, _size149);
            this->vertex_list.resize(_size149);
            uint32_t _i153;
            for (_i153 = 0; _i153 < _size149; ++_i153)
            {
              xfer += this->vertex_list[_i153].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertex_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfVerticesFromMesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfVerticesFromMesh");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertex_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vertex_list.size()));
    std::vector<Vertex> ::const_iterator _iter154;
    for (_iter154 = this->vertex_list.begin(); _iter154 != this->vertex_list.end(); ++_iter154)
    {
      xfer += (*_iter154).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfVerticesFromMesh &a, rvGetListOfVerticesFromMesh &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.vertex_list, b.vertex_list);
  swap(a.__isset, b.__isset);
}

rvGetListOfVerticesFromMesh::rvGetListOfVerticesFromMesh(const rvGetListOfVerticesFromMesh& other155) {
  status = other155.status;
  report = other155.report;
  vertex_list = other155.vertex_list;
  __isset = other155.__isset;
}
rvGetListOfVerticesFromMesh& rvGetListOfVerticesFromMesh::operator=(const rvGetListOfVerticesFromMesh& other156) {
  status = other156.status;
  report = other156.report;
  vertex_list = other156.vertex_list;
  __isset = other156.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfVerticesFromMesh& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfVerticesFromMesh(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "vertex_list=" << to_string(obj.vertex_list);
  out << ")";
  return out;
}


rvGetResultFromVerticesID::~rvGetResultFromVerticesID() throw() {
}


void rvGetResultFromVerticesID::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID::__set_result_list(const std::vector<ResultOnVertex> & val) {
  this->result_list = val;
}

const char* rvGetResultFromVerticesID::ascii_fingerprint = "7D7F6E03D85558681F4AC69C1B4F3FC4";
const uint8_t rvGetResultFromVerticesID::binary_fingerprint[16] = {0x7D,0x7F,0x6E,0x03,0xD8,0x55,0x58,0x68,0x1F,0x4A,0xC6,0x9C,0x1B,0x4F,0x3F,0xC4};

uint32_t rvGetResultFromVerticesID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->result_list.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _etype160;
            xfer += iprot->readListBegin(_etype160, _size157);
            this->result_list.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += this->result_list[_i161].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.result_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->result_list.size()));
    std::vector<ResultOnVertex> ::const_iterator _iter162;
    for (_iter162 = this->result_list.begin(); _iter162 != this->result_list.end(); ++_iter162)
    {
      xfer += (*_iter162).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID &a, rvGetResultFromVerticesID &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.result_list, b.result_list);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID::rvGetResultFromVerticesID(const rvGetResultFromVerticesID& other163) {
  status = other163.status;
  report = other163.report;
  result_list = other163.result_list;
  __isset = other163.__isset;
}
rvGetResultFromVerticesID& rvGetResultFromVerticesID::operator=(const rvGetResultFromVerticesID& other164) {
  status = other164.status;
  report = other164.report;
  result_list = other164.result_list;
  __isset = other164.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "result_list=" << to_string(obj.result_list);
  out << ")";
  return out;
}

} // namespace
