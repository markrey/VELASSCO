/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "VELaSSCoSM_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace VELaSSCoSM {

int _kElementShapeTypeValues[] = {
  ElementShapeType::UnknownElement,
  ElementShapeType::PointElement,
  ElementShapeType::LineElement,
  ElementShapeType::TriangleElement,
  ElementShapeType::QuadrilateralElement,
  ElementShapeType::TetrahedraElement,
  ElementShapeType::HexahedraElement,
  ElementShapeType::PrismElement,
  ElementShapeType::PyramidElement,
  ElementShapeType::SphereElement,
  ElementShapeType::CircleElement,
  ElementShapeType::ComplexParticleElement
};
const char* _kElementShapeTypeNames[] = {
  "UnknownElement",
  "PointElement",
  "LineElement",
  "TriangleElement",
  "QuadrilateralElement",
  "TetrahedraElement",
  "HexahedraElement",
  "PrismElement",
  "PyramidElement",
  "SphereElement",
  "CircleElement",
  "ComplexParticleElement"
};
const std::map<int, const char*> _ElementShapeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kElementShapeTypeValues, _kElementShapeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ElementType::~ElementType() throw() {
}


void ElementType::__set_shape(const ElementShapeType::type val) {
  this->shape = val;
}

void ElementType::__set_num_nodes(const int32_t val) {
  this->num_nodes = val;
}

const char* ElementType::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t ElementType::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t ElementType::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->shape = (ElementShapeType::type)ecast0;
          this->__isset.shape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_nodes);
          this->__isset.num_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ElementType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ElementType");

  xfer += oprot->writeFieldBegin("shape", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->shape);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_nodes", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_nodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ElementType &a, ElementType &b) {
  using ::std::swap;
  swap(a.shape, b.shape);
  swap(a.num_nodes, b.num_nodes);
  swap(a.__isset, b.__isset);
}

ElementType::ElementType(const ElementType& other1) {
  shape = other1.shape;
  num_nodes = other1.num_nodes;
  __isset = other1.__isset;
}
ElementType& ElementType::operator=(const ElementType& other2) {
  shape = other2.shape;
  num_nodes = other2.num_nodes;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ElementType& obj) {
  using apache::thrift::to_string;
  out << "ElementType(";
  out << "shape=" << to_string(obj.shape);
  out << ", " << "num_nodes=" << to_string(obj.num_nodes);
  out << ")";
  return out;
}


Point::~Point() throw() {
}


void Point::__set_x(const double val) {
  this->x = val;
}

void Point::__set_y(const double val) {
  this->y = val;
}

void Point::__set_z(const double val) {
  this->z = val;
}

const char* Point::ascii_fingerprint = "EFFAD640FBA2CA56C50155B2A4545897";
const uint8_t Point::binary_fingerprint[16] = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

uint32_t Point::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Point::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Point");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Point &a, Point &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

Point::Point(const Point& other3) {
  x = other3.x;
  y = other3.y;
  z = other3.z;
  __isset = other3.__isset;
}
Point& Point::operator=(const Point& other4) {
  x = other4.x;
  y = other4.y;
  z = other4.z;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Point& obj) {
  using apache::thrift::to_string;
  out << "Point(";
  out << "x=" << to_string(obj.x);
  out << ", " << "y=" << to_string(obj.y);
  out << ", " << "z=" << to_string(obj.z);
  out << ")";
  return out;
}


Element::~Element() throw() {
}


void Element::__set_id(const int64_t val) {
  this->id = val;
}

void Element::__set_nodes_ids(const std::vector<Node> & val) {
  this->nodes_ids = val;
}

const char* Element::ascii_fingerprint = "955BD89722154769CC8FC8E9E0AB6CC2";
const uint8_t Element::binary_fingerprint[16] = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

uint32_t Element::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes_ids.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->nodes_ids.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI64(this->nodes_ids[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Element::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Element");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nodes_ids.size()));
    std::vector<Node> ::const_iterator _iter10;
    for (_iter10 = this->nodes_ids.begin(); _iter10 != this->nodes_ids.end(); ++_iter10)
    {
      xfer += oprot->writeI64((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Element &a, Element &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.nodes_ids, b.nodes_ids);
  swap(a.__isset, b.__isset);
}

Element::Element(const Element& other11) {
  id = other11.id;
  nodes_ids = other11.nodes_ids;
  __isset = other11.__isset;
}
Element& Element::operator=(const Element& other12) {
  id = other12.id;
  nodes_ids = other12.nodes_ids;
  __isset = other12.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Element& obj) {
  using apache::thrift::to_string;
  out << "Element(";
  out << "id=" << to_string(obj.id);
  out << ", " << "nodes_ids=" << to_string(obj.nodes_ids);
  out << ")";
  return out;
}


MeshInfo::~MeshInfo() throw() {
}


void MeshInfo::__set_name(const std::string& val) {
  this->name = val;
}

void MeshInfo::__set_elementType(const ElementType& val) {
  this->elementType = val;
}

void MeshInfo::__set_nVertices(const int64_t val) {
  this->nVertices = val;
}

void MeshInfo::__set_nElements(const int64_t val) {
  this->nElements = val;
}

void MeshInfo::__set_meshUnits(const std::string& val) {
  this->meshUnits = val;
}

void MeshInfo::__set_meshColor(const std::string& val) {
  this->meshColor = val;
}

void MeshInfo::__set_meshNumber(const int32_t val) {
  this->meshNumber = val;
}

void MeshInfo::__set_coordsName(const std::string& val) {
  this->coordsName = val;
}

const char* MeshInfo::ascii_fingerprint = "BB55A649757DA08871436B00AE301AE5";
const uint8_t MeshInfo::binary_fingerprint[16] = {0xBB,0x55,0xA6,0x49,0x75,0x7D,0xA0,0x88,0x71,0x43,0x6B,0x00,0xAE,0x30,0x1A,0xE5};

uint32_t MeshInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->elementType.read(iprot);
          this->__isset.elementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nVertices);
          this->__isset.nVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nElements);
          this->__isset.nElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meshUnits);
          this->__isset.meshUnits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meshColor);
          this->__isset.meshColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->meshNumber);
          this->__isset.meshNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coordsName);
          this->__isset.coordsName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MeshInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MeshInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elementType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->elementType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nVertices", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->nVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nElements", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nElements);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshUnits", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->meshUnits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshColor", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->meshColor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshNumber", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->meshNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coordsName", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->coordsName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MeshInfo &a, MeshInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.elementType, b.elementType);
  swap(a.nVertices, b.nVertices);
  swap(a.nElements, b.nElements);
  swap(a.meshUnits, b.meshUnits);
  swap(a.meshColor, b.meshColor);
  swap(a.meshNumber, b.meshNumber);
  swap(a.coordsName, b.coordsName);
  swap(a.__isset, b.__isset);
}

MeshInfo::MeshInfo(const MeshInfo& other13) {
  name = other13.name;
  elementType = other13.elementType;
  nVertices = other13.nVertices;
  nElements = other13.nElements;
  meshUnits = other13.meshUnits;
  meshColor = other13.meshColor;
  meshNumber = other13.meshNumber;
  coordsName = other13.coordsName;
  __isset = other13.__isset;
}
MeshInfo& MeshInfo::operator=(const MeshInfo& other14) {
  name = other14.name;
  elementType = other14.elementType;
  nVertices = other14.nVertices;
  nElements = other14.nElements;
  meshUnits = other14.meshUnits;
  meshColor = other14.meshColor;
  meshNumber = other14.meshNumber;
  coordsName = other14.coordsName;
  __isset = other14.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MeshInfo& obj) {
  using apache::thrift::to_string;
  out << "MeshInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "elementType=" << to_string(obj.elementType);
  out << ", " << "nVertices=" << to_string(obj.nVertices);
  out << ", " << "nElements=" << to_string(obj.nElements);
  out << ", " << "meshUnits=" << to_string(obj.meshUnits);
  out << ", " << "meshColor=" << to_string(obj.meshColor);
  out << ", " << "meshNumber=" << to_string(obj.meshNumber);
  out << ", " << "coordsName=" << to_string(obj.coordsName);
  out << ")";
  return out;
}


Mesh::~Mesh() throw() {
}


void Mesh::__set_name(const std::string& val) {
  this->name = val;
}

void Mesh::__set_numberOfVertices(const int64_t val) {
  this->numberOfVertices = val;
}

void Mesh::__set_dimension(const int64_t val) {
  this->dimension = val;
}

void Mesh::__set_type(const ElementType& val) {
  this->type = val;
}

void Mesh::__set_nodes(const std::vector<Node> & val) {
  this->nodes = val;
}

void Mesh::__set_elements(const std::vector<Element> & val) {
  this->elements = val;
}

const char* Mesh::ascii_fingerprint = "46C85421A06219720D181E7217492E73";
const uint8_t Mesh::binary_fingerprint[16] = {0x46,0xC8,0x54,0x21,0xA0,0x62,0x19,0x72,0x0D,0x18,0x1E,0x72,0x17,0x49,0x2E,0x73};

uint32_t Mesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numberOfVertices);
          this->__isset.numberOfVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->nodes.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI64(this->nodes[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->elements.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->elements[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Mesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Mesh");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfVertices", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->numberOfVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nodes.size()));
    std::vector<Node> ::const_iterator _iter25;
    for (_iter25 = this->nodes.begin(); _iter25 != this->nodes.end(); ++_iter25)
    {
      xfer += oprot->writeI64((*_iter25));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Element> ::const_iterator _iter26;
    for (_iter26 = this->elements.begin(); _iter26 != this->elements.end(); ++_iter26)
    {
      xfer += (*_iter26).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Mesh &a, Mesh &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.numberOfVertices, b.numberOfVertices);
  swap(a.dimension, b.dimension);
  swap(a.type, b.type);
  swap(a.nodes, b.nodes);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

Mesh::Mesh(const Mesh& other27) {
  name = other27.name;
  numberOfVertices = other27.numberOfVertices;
  dimension = other27.dimension;
  type = other27.type;
  nodes = other27.nodes;
  elements = other27.elements;
  __isset = other27.__isset;
}
Mesh& Mesh::operator=(const Mesh& other28) {
  name = other28.name;
  numberOfVertices = other28.numberOfVertices;
  dimension = other28.dimension;
  type = other28.type;
  nodes = other28.nodes;
  elements = other28.elements;
  __isset = other28.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Mesh& obj) {
  using apache::thrift::to_string;
  out << "Mesh(";
  out << "name=" << to_string(obj.name);
  out << ", " << "numberOfVertices=" << to_string(obj.numberOfVertices);
  out << ", " << "dimension=" << to_string(obj.dimension);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "nodes=" << to_string(obj.nodes);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


ResultInfo::~ResultInfo() throw() {
}


void ResultInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ResultInfo::__set_type(const std::string& val) {
  this->type = val;
}

void ResultInfo::__set_numberOfComponents(const int32_t val) {
  this->numberOfComponents = val;
}

void ResultInfo::__set_componentNames(const std::vector<std::string> & val) {
  this->componentNames = val;
}

void ResultInfo::__set_location(const std::string& val) {
  this->location = val;
}

void ResultInfo::__set_gaussPointName(const std::string& val) {
  this->gaussPointName = val;
}

void ResultInfo::__set_coordinatesName(const std::string& val) {
  this->coordinatesName = val;
}

void ResultInfo::__set_units(const std::string& val) {
  this->units = val;
}

void ResultInfo::__set_resultNumber(const int32_t val) {
  this->resultNumber = val;
}

const char* ResultInfo::ascii_fingerprint = "97151C990E2F24FBABB8135B737FE75B";
const uint8_t ResultInfo::binary_fingerprint[16] = {0x97,0x15,0x1C,0x99,0x0E,0x2F,0x24,0xFB,0xAB,0xB8,0x13,0x5B,0x73,0x7F,0xE7,0x5B};

uint32_t ResultInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfComponents);
          this->__isset.numberOfComponents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->componentNames.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->componentNames.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += iprot->readString(this->componentNames[_i33]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.componentNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gaussPointName);
          this->__isset.gaussPointName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coordinatesName);
          this->__isset.coordinatesName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->units);
          this->__isset.units = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultNumber);
          this->__isset.resultNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ResultInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfComponents", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numberOfComponents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("componentNames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->componentNames.size()));
    std::vector<std::string> ::const_iterator _iter34;
    for (_iter34 = this->componentNames.begin(); _iter34 != this->componentNames.end(); ++_iter34)
    {
      xfer += oprot->writeString((*_iter34));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gaussPointName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->gaussPointName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coordinatesName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->coordinatesName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("units", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->units);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultNumber", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->resultNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ResultInfo &a, ResultInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.numberOfComponents, b.numberOfComponents);
  swap(a.componentNames, b.componentNames);
  swap(a.location, b.location);
  swap(a.gaussPointName, b.gaussPointName);
  swap(a.coordinatesName, b.coordinatesName);
  swap(a.units, b.units);
  swap(a.resultNumber, b.resultNumber);
  swap(a.__isset, b.__isset);
}

ResultInfo::ResultInfo(const ResultInfo& other35) {
  name = other35.name;
  type = other35.type;
  numberOfComponents = other35.numberOfComponents;
  componentNames = other35.componentNames;
  location = other35.location;
  gaussPointName = other35.gaussPointName;
  coordinatesName = other35.coordinatesName;
  units = other35.units;
  resultNumber = other35.resultNumber;
  __isset = other35.__isset;
}
ResultInfo& ResultInfo::operator=(const ResultInfo& other36) {
  name = other36.name;
  type = other36.type;
  numberOfComponents = other36.numberOfComponents;
  componentNames = other36.componentNames;
  location = other36.location;
  gaussPointName = other36.gaussPointName;
  coordinatesName = other36.coordinatesName;
  units = other36.units;
  resultNumber = other36.resultNumber;
  __isset = other36.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ResultInfo& obj) {
  using apache::thrift::to_string;
  out << "ResultInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "numberOfComponents=" << to_string(obj.numberOfComponents);
  out << ", " << "componentNames=" << to_string(obj.componentNames);
  out << ", " << "location=" << to_string(obj.location);
  out << ", " << "gaussPointName=" << to_string(obj.gaussPointName);
  out << ", " << "coordinatesName=" << to_string(obj.coordinatesName);
  out << ", " << "units=" << to_string(obj.units);
  out << ", " << "resultNumber=" << to_string(obj.resultNumber);
  out << ")";
  return out;
}


Triangle::~Triangle() throw() {
}


void Triangle::__set_nodes(const std::vector<Node> & val) {
  this->nodes = val;
}

const char* Triangle::ascii_fingerprint = "E49D7D1A9013CC81CD0F69D631EF82E4";
const uint8_t Triangle::binary_fingerprint[16] = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

uint32_t Triangle::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->nodes.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readI64(this->nodes[_i41]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Triangle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Triangle");

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nodes.size()));
    std::vector<Node> ::const_iterator _iter42;
    for (_iter42 = this->nodes.begin(); _iter42 != this->nodes.end(); ++_iter42)
    {
      xfer += oprot->writeI64((*_iter42));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Triangle &a, Triangle &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.__isset, b.__isset);
}

Triangle::Triangle(const Triangle& other43) {
  nodes = other43.nodes;
  __isset = other43.__isset;
}
Triangle& Triangle::operator=(const Triangle& other44) {
  nodes = other44.nodes;
  __isset = other44.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Triangle& obj) {
  using apache::thrift::to_string;
  out << "Triangle(";
  out << "nodes=" << to_string(obj.nodes);
  out << ")";
  return out;
}


rvGetElementOfPointsInSpace::~rvGetElementOfPointsInSpace() throw() {
}


void rvGetElementOfPointsInSpace::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetElementOfPointsInSpace::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetElementOfPointsInSpace::__set_elements(const std::vector<Element> & val) {
  this->elements = val;
}

const char* rvGetElementOfPointsInSpace::ascii_fingerprint = "D98B588D8A5C9FF6B27508ADBB216FF2";
const uint8_t rvGetElementOfPointsInSpace::binary_fingerprint[16] = {0xD9,0x8B,0x58,0x8D,0x8A,0x5C,0x9F,0xF6,0xB2,0x75,0x08,0xAD,0xBB,0x21,0x6F,0xF2};

uint32_t rvGetElementOfPointsInSpace::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            this->elements.resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              xfer += this->elements[_i49].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetElementOfPointsInSpace::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetElementOfPointsInSpace");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Element> ::const_iterator _iter50;
    for (_iter50 = this->elements.begin(); _iter50 != this->elements.end(); ++_iter50)
    {
      xfer += (*_iter50).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetElementOfPointsInSpace &a, rvGetElementOfPointsInSpace &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

rvGetElementOfPointsInSpace::rvGetElementOfPointsInSpace(const rvGetElementOfPointsInSpace& other51) {
  status = other51.status;
  report = other51.report;
  elements = other51.elements;
  __isset = other51.__isset;
}
rvGetElementOfPointsInSpace& rvGetElementOfPointsInSpace::operator=(const rvGetElementOfPointsInSpace& other52) {
  status = other52.status;
  report = other52.report;
  elements = other52.elements;
  __isset = other52.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetElementOfPointsInSpace& obj) {
  using apache::thrift::to_string;
  out << "rvGetElementOfPointsInSpace(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


rvGetBoundaryOfLocalMesh::~rvGetBoundaryOfLocalMesh() throw() {
}


void rvGetBoundaryOfLocalMesh::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetBoundaryOfLocalMesh::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetBoundaryOfLocalMesh::__set_elements(const std::vector<Triangle> & val) {
  this->elements = val;
}

const char* rvGetBoundaryOfLocalMesh::ascii_fingerprint = "DF8BC3D8E99EACBA0A38A2AE8F42E17F";
const uint8_t rvGetBoundaryOfLocalMesh::binary_fingerprint[16] = {0xDF,0x8B,0xC3,0xD8,0xE9,0x9E,0xAC,0xBA,0x0A,0x38,0xA2,0xAE,0x8F,0x42,0xE1,0x7F};

uint32_t rvGetBoundaryOfLocalMesh::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->elements.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += this->elements[_i57].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetBoundaryOfLocalMesh::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetBoundaryOfLocalMesh");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elements", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements.size()));
    std::vector<Triangle> ::const_iterator _iter58;
    for (_iter58 = this->elements.begin(); _iter58 != this->elements.end(); ++_iter58)
    {
      xfer += (*_iter58).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetBoundaryOfLocalMesh &a, rvGetBoundaryOfLocalMesh &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.elements, b.elements);
  swap(a.__isset, b.__isset);
}

rvGetBoundaryOfLocalMesh::rvGetBoundaryOfLocalMesh(const rvGetBoundaryOfLocalMesh& other59) {
  status = other59.status;
  report = other59.report;
  elements = other59.elements;
  __isset = other59.__isset;
}
rvGetBoundaryOfLocalMesh& rvGetBoundaryOfLocalMesh::operator=(const rvGetBoundaryOfLocalMesh& other60) {
  status = other60.status;
  report = other60.report;
  elements = other60.elements;
  __isset = other60.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetBoundaryOfLocalMesh& obj) {
  using apache::thrift::to_string;
  out << "rvGetBoundaryOfLocalMesh(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "elements=" << to_string(obj.elements);
  out << ")";
  return out;
}


rvGetResultFromVerticesID_A::~rvGetResultFromVerticesID_A() throw() {
}


void rvGetResultFromVerticesID_A::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID_A::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID_A::__set_nVertices(const int64_t val) {
  this->nVertices = val;
}

void rvGetResultFromVerticesID_A::__set_nValuesPrVertex(const int64_t val) {
  this->nValuesPrVertex = val;
}

void rvGetResultFromVerticesID_A::__set_vertexIDs(const std::vector<int64_t> & val) {
  this->vertexIDs = val;
}

void rvGetResultFromVerticesID_A::__set_resultValues(const std::vector<double> & val) {
  this->resultValues = val;
}

const char* rvGetResultFromVerticesID_A::ascii_fingerprint = "B51FB0E8BE2E9146E9BCED13565E0E5F";
const uint8_t rvGetResultFromVerticesID_A::binary_fingerprint[16] = {0xB5,0x1F,0xB0,0xE8,0xBE,0x2E,0x91,0x46,0xE9,0xBC,0xED,0x13,0x56,0x5E,0x0E,0x5F};

uint32_t rvGetResultFromVerticesID_A::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nVertices);
          this->__isset.nVertices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nValuesPrVertex);
          this->__isset.nValuesPrVertex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertexIDs.clear();
            uint32_t _size61;
            ::apache::thrift::protocol::TType _etype64;
            xfer += iprot->readListBegin(_etype64, _size61);
            this->vertexIDs.resize(_size61);
            uint32_t _i65;
            for (_i65 = 0; _i65 < _size61; ++_i65)
            {
              xfer += iprot->readI64(this->vertexIDs[_i65]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertexIDs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resultValues.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->resultValues.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += iprot->readDouble(this->resultValues[_i70]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resultValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID_A::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID_A");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nVertices", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->nVertices);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nValuesPrVertex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->nValuesPrVertex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertexIDs", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->vertexIDs.size()));
    std::vector<int64_t> ::const_iterator _iter71;
    for (_iter71 = this->vertexIDs.begin(); _iter71 != this->vertexIDs.end(); ++_iter71)
    {
      xfer += oprot->writeI64((*_iter71));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultValues", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->resultValues.size()));
    std::vector<double> ::const_iterator _iter72;
    for (_iter72 = this->resultValues.begin(); _iter72 != this->resultValues.end(); ++_iter72)
    {
      xfer += oprot->writeDouble((*_iter72));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID_A &a, rvGetResultFromVerticesID_A &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.nVertices, b.nVertices);
  swap(a.nValuesPrVertex, b.nValuesPrVertex);
  swap(a.vertexIDs, b.vertexIDs);
  swap(a.resultValues, b.resultValues);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID_A::rvGetResultFromVerticesID_A(const rvGetResultFromVerticesID_A& other73) {
  status = other73.status;
  report = other73.report;
  nVertices = other73.nVertices;
  nValuesPrVertex = other73.nValuesPrVertex;
  vertexIDs = other73.vertexIDs;
  resultValues = other73.resultValues;
  __isset = other73.__isset;
}
rvGetResultFromVerticesID_A& rvGetResultFromVerticesID_A::operator=(const rvGetResultFromVerticesID_A& other74) {
  status = other74.status;
  report = other74.report;
  nVertices = other74.nVertices;
  nValuesPrVertex = other74.nValuesPrVertex;
  vertexIDs = other74.vertexIDs;
  resultValues = other74.resultValues;
  __isset = other74.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_A& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID_A(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "nVertices=" << to_string(obj.nVertices);
  out << ", " << "nValuesPrVertex=" << to_string(obj.nValuesPrVertex);
  out << ", " << "vertexIDs=" << to_string(obj.vertexIDs);
  out << ", " << "resultValues=" << to_string(obj.resultValues);
  out << ")";
  return out;
}


VertexResult::~VertexResult() throw() {
}


void VertexResult::__set_vertexID(const int64_t val) {
  this->vertexID = val;
}

void VertexResult::__set_resuls(const std::vector<double> & val) {
  this->resuls = val;
}

const char* VertexResult::ascii_fingerprint = "1CB61EEDEC70E44B3B75F0C0C76D5496";
const uint8_t VertexResult::binary_fingerprint[16] = {0x1C,0xB6,0x1E,0xED,0xEC,0x70,0xE4,0x4B,0x3B,0x75,0xF0,0xC0,0xC7,0x6D,0x54,0x96};

uint32_t VertexResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vertexID);
          this->__isset.vertexID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resuls.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            xfer += iprot->readListBegin(_etype78, _size75);
            this->resuls.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += iprot->readDouble(this->resuls[_i79]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resuls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VertexResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VertexResult");

  xfer += oprot->writeFieldBegin("vertexID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vertexID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resuls", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->resuls.size()));
    std::vector<double> ::const_iterator _iter80;
    for (_iter80 = this->resuls.begin(); _iter80 != this->resuls.end(); ++_iter80)
    {
      xfer += oprot->writeDouble((*_iter80));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VertexResult &a, VertexResult &b) {
  using ::std::swap;
  swap(a.vertexID, b.vertexID);
  swap(a.resuls, b.resuls);
  swap(a.__isset, b.__isset);
}

VertexResult::VertexResult(const VertexResult& other81) {
  vertexID = other81.vertexID;
  resuls = other81.resuls;
  __isset = other81.__isset;
}
VertexResult& VertexResult::operator=(const VertexResult& other82) {
  vertexID = other82.vertexID;
  resuls = other82.resuls;
  __isset = other82.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VertexResult& obj) {
  using apache::thrift::to_string;
  out << "VertexResult(";
  out << "vertexID=" << to_string(obj.vertexID);
  out << ", " << "resuls=" << to_string(obj.resuls);
  out << ")";
  return out;
}


rvGetResultFromVerticesID_B::~rvGetResultFromVerticesID_B() throw() {
}


void rvGetResultFromVerticesID_B::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetResultFromVerticesID_B::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetResultFromVerticesID_B::__set_vertexResults(const std::vector<VertexResult> & val) {
  this->vertexResults = val;
}

const char* rvGetResultFromVerticesID_B::ascii_fingerprint = "7D7F6E03D85558681F4AC69C1B4F3FC4";
const uint8_t rvGetResultFromVerticesID_B::binary_fingerprint[16] = {0x7D,0x7F,0x6E,0x03,0xD8,0x55,0x58,0x68,0x1F,0x4A,0xC6,0x9C,0x1B,0x4F,0x3F,0xC4};

uint32_t rvGetResultFromVerticesID_B::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vertexResults.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _etype86;
            xfer += iprot->readListBegin(_etype86, _size83);
            this->vertexResults.resize(_size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              xfer += this->vertexResults[_i87].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vertexResults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetResultFromVerticesID_B::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetResultFromVerticesID_B");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vertexResults", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vertexResults.size()));
    std::vector<VertexResult> ::const_iterator _iter88;
    for (_iter88 = this->vertexResults.begin(); _iter88 != this->vertexResults.end(); ++_iter88)
    {
      xfer += (*_iter88).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetResultFromVerticesID_B &a, rvGetResultFromVerticesID_B &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.vertexResults, b.vertexResults);
  swap(a.__isset, b.__isset);
}

rvGetResultFromVerticesID_B::rvGetResultFromVerticesID_B(const rvGetResultFromVerticesID_B& other89) {
  status = other89.status;
  report = other89.report;
  vertexResults = other89.vertexResults;
  __isset = other89.__isset;
}
rvGetResultFromVerticesID_B& rvGetResultFromVerticesID_B::operator=(const rvGetResultFromVerticesID_B& other90) {
  status = other90.status;
  report = other90.report;
  vertexResults = other90.vertexResults;
  __isset = other90.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetResultFromVerticesID_B& obj) {
  using apache::thrift::to_string;
  out << "rvGetResultFromVerticesID_B(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "vertexResults=" << to_string(obj.vertexResults);
  out << ")";
  return out;
}


ModelInfo::~ModelInfo() throw() {
}


void ModelInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ModelInfo::__set_repository(const std::string& val) {
  this->repository = val;
}

void ModelInfo::__set_owner(const std::string& val) {
  this->owner = val;
}

void ModelInfo::__set_created(const std::string& val) {
  this->created = val;
}

void ModelInfo::__set_accessRights(const std::string& val) {
  this->accessRights = val;
}

void ModelInfo::__set_administrators(const std::string& val) {
  this->administrators = val;
}

void ModelInfo::__set_underlyingSchema(const std::string& val) {
  this->underlyingSchema = val;
}

void ModelInfo::__set_nObjectsInModel(const int64_t val) {
  this->nObjectsInModel = val;
}

void ModelInfo::__set_dataSize(const int64_t val) {
  this->dataSize = val;
}

void ModelInfo::__set_stringEncoding(const std::string& val) {
  this->stringEncoding = val;
}

void ModelInfo::__set_options(const std::string& val) {
  this->options = val;
}

const char* ModelInfo::ascii_fingerprint = "2F09E0B6489C52E1F2AB8A6194159964";
const uint8_t ModelInfo::binary_fingerprint[16] = {0x2F,0x09,0xE0,0xB6,0x48,0x9C,0x52,0xE1,0xF2,0xAB,0x8A,0x61,0x94,0x15,0x99,0x64};

uint32_t ModelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->repository);
          this->__isset.repository = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessRights);
          this->__isset.accessRights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->administrators);
          this->__isset.administrators = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->underlyingSchema);
          this->__isset.underlyingSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nObjectsInModel);
          this->__isset.nObjectsInModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dataSize);
          this->__isset.dataSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringEncoding);
          this->__isset.stringEncoding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->options);
          this->__isset.options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ModelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ModelInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repository", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->repository);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessRights", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->accessRights);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("administrators", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->administrators);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("underlyingSchema", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->underlyingSchema);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nObjectsInModel", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->nObjectsInModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataSize", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->dataSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringEncoding", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->stringEncoding);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->options);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ModelInfo &a, ModelInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.repository, b.repository);
  swap(a.owner, b.owner);
  swap(a.created, b.created);
  swap(a.accessRights, b.accessRights);
  swap(a.administrators, b.administrators);
  swap(a.underlyingSchema, b.underlyingSchema);
  swap(a.nObjectsInModel, b.nObjectsInModel);
  swap(a.dataSize, b.dataSize);
  swap(a.stringEncoding, b.stringEncoding);
  swap(a.options, b.options);
  swap(a.__isset, b.__isset);
}

ModelInfo::ModelInfo(const ModelInfo& other91) {
  name = other91.name;
  repository = other91.repository;
  owner = other91.owner;
  created = other91.created;
  accessRights = other91.accessRights;
  administrators = other91.administrators;
  underlyingSchema = other91.underlyingSchema;
  nObjectsInModel = other91.nObjectsInModel;
  dataSize = other91.dataSize;
  stringEncoding = other91.stringEncoding;
  options = other91.options;
  __isset = other91.__isset;
}
ModelInfo& ModelInfo::operator=(const ModelInfo& other92) {
  name = other92.name;
  repository = other92.repository;
  owner = other92.owner;
  created = other92.created;
  accessRights = other92.accessRights;
  administrators = other92.administrators;
  underlyingSchema = other92.underlyingSchema;
  nObjectsInModel = other92.nObjectsInModel;
  dataSize = other92.dataSize;
  stringEncoding = other92.stringEncoding;
  options = other92.options;
  __isset = other92.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ModelInfo& obj) {
  using apache::thrift::to_string;
  out << "ModelInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "repository=" << to_string(obj.repository);
  out << ", " << "owner=" << to_string(obj.owner);
  out << ", " << "created=" << to_string(obj.created);
  out << ", " << "accessRights=" << to_string(obj.accessRights);
  out << ", " << "administrators=" << to_string(obj.administrators);
  out << ", " << "underlyingSchema=" << to_string(obj.underlyingSchema);
  out << ", " << "nObjectsInModel=" << to_string(obj.nObjectsInModel);
  out << ", " << "dataSize=" << to_string(obj.dataSize);
  out << ", " << "stringEncoding=" << to_string(obj.stringEncoding);
  out << ", " << "options=" << to_string(obj.options);
  out << ")";
  return out;
}


FullyQualifiedModelName::~FullyQualifiedModelName() throw() {
}


void FullyQualifiedModelName::__set_name(const std::string& val) {
  this->name = val;
}

void FullyQualifiedModelName::__set_full_path(const std::string& val) {
  this->full_path = val;
}

void FullyQualifiedModelName::__set_modelID(const std::string& val) {
  this->modelID = val;
}

void FullyQualifiedModelName::__set_location(const std::string& val) {
  this->location = val;
}

const char* FullyQualifiedModelName::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t FullyQualifiedModelName::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t FullyQualifiedModelName::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->full_path);
          this->__isset.full_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->modelID);
          this->__isset.modelID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FullyQualifiedModelName::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FullyQualifiedModelName");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->full_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->modelID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FullyQualifiedModelName &a, FullyQualifiedModelName &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.full_path, b.full_path);
  swap(a.modelID, b.modelID);
  swap(a.location, b.location);
  swap(a.__isset, b.__isset);
}

FullyQualifiedModelName::FullyQualifiedModelName(const FullyQualifiedModelName& other93) {
  name = other93.name;
  full_path = other93.full_path;
  modelID = other93.modelID;
  location = other93.location;
  __isset = other93.__isset;
}
FullyQualifiedModelName& FullyQualifiedModelName::operator=(const FullyQualifiedModelName& other94) {
  name = other94.name;
  full_path = other94.full_path;
  modelID = other94.modelID;
  location = other94.location;
  __isset = other94.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FullyQualifiedModelName& obj) {
  using apache::thrift::to_string;
  out << "FullyQualifiedModelName(";
  out << "name=" << to_string(obj.name);
  out << ", " << "full_path=" << to_string(obj.full_path);
  out << ", " << "modelID=" << to_string(obj.modelID);
  out << ", " << "location=" << to_string(obj.location);
  out << ")";
  return out;
}


rvGetListOfModels::~rvGetListOfModels() throw() {
}


void rvGetListOfModels::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfModels::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfModels::__set_models(const std::vector<FullyQualifiedModelName> & val) {
  this->models = val;
}

const char* rvGetListOfModels::ascii_fingerprint = "6F4C9A3920D50E26C78816CC39D0B1BE";
const uint8_t rvGetListOfModels::binary_fingerprint[16] = {0x6F,0x4C,0x9A,0x39,0x20,0xD5,0x0E,0x26,0xC7,0x88,0x16,0xCC,0x39,0xD0,0xB1,0xBE};

uint32_t rvGetListOfModels::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->models.clear();
            uint32_t _size95;
            ::apache::thrift::protocol::TType _etype98;
            xfer += iprot->readListBegin(_etype98, _size95);
            this->models.resize(_size95);
            uint32_t _i99;
            for (_i99 = 0; _i99 < _size95; ++_i99)
            {
              xfer += this->models[_i99].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.models = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfModels::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfModels");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("models", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->models.size()));
    std::vector<FullyQualifiedModelName> ::const_iterator _iter100;
    for (_iter100 = this->models.begin(); _iter100 != this->models.end(); ++_iter100)
    {
      xfer += (*_iter100).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfModels &a, rvGetListOfModels &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.models, b.models);
  swap(a.__isset, b.__isset);
}

rvGetListOfModels::rvGetListOfModels(const rvGetListOfModels& other101) {
  status = other101.status;
  report = other101.report;
  models = other101.models;
  __isset = other101.__isset;
}
rvGetListOfModels& rvGetListOfModels::operator=(const rvGetListOfModels& other102) {
  status = other102.status;
  report = other102.report;
  models = other102.models;
  __isset = other102.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfModels& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfModels(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "models=" << to_string(obj.models);
  out << ")";
  return out;
}


rvGetThumbnailOfAModel::~rvGetThumbnailOfAModel() throw() {
}


void rvGetThumbnailOfAModel::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetThumbnailOfAModel::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetThumbnailOfAModel::__set_imageFile(const std::string& val) {
  this->imageFile = val;
}

const char* rvGetThumbnailOfAModel::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t rvGetThumbnailOfAModel::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t rvGetThumbnailOfAModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->imageFile);
          this->__isset.imageFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetThumbnailOfAModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetThumbnailOfAModel");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imageFile", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->imageFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetThumbnailOfAModel &a, rvGetThumbnailOfAModel &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.imageFile, b.imageFile);
  swap(a.__isset, b.__isset);
}

rvGetThumbnailOfAModel::rvGetThumbnailOfAModel(const rvGetThumbnailOfAModel& other103) {
  status = other103.status;
  report = other103.report;
  imageFile = other103.imageFile;
  __isset = other103.__isset;
}
rvGetThumbnailOfAModel& rvGetThumbnailOfAModel::operator=(const rvGetThumbnailOfAModel& other104) {
  status = other104.status;
  report = other104.report;
  imageFile = other104.imageFile;
  __isset = other104.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetThumbnailOfAModel& obj) {
  using apache::thrift::to_string;
  out << "rvGetThumbnailOfAModel(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "imageFile=" << to_string(obj.imageFile);
  out << ")";
  return out;
}


rvOpenModel::~rvOpenModel() throw() {
}


void rvOpenModel::__set_status(const std::string& val) {
  this->status = val;
}

void rvOpenModel::__set_report(const std::string& val) {
  this->report = val;
}

void rvOpenModel::__set_modelID(const std::string& val) {
  this->modelID = val;
}

void rvOpenModel::__set_model_info(const FullyQualifiedModelName& val) {
  this->model_info = val;
}

const char* rvOpenModel::ascii_fingerprint = "EC01D39DC1B343EB339C70385728F51B";
const uint8_t rvOpenModel::binary_fingerprint[16] = {0xEC,0x01,0xD3,0x9D,0xC1,0xB3,0x43,0xEB,0x33,0x9C,0x70,0x38,0x57,0x28,0xF5,0x1B};

uint32_t rvOpenModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->modelID);
          this->__isset.modelID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->model_info.read(iprot);
          this->__isset.model_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvOpenModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvOpenModel");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->modelID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("model_info", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->model_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvOpenModel &a, rvOpenModel &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.modelID, b.modelID);
  swap(a.model_info, b.model_info);
  swap(a.__isset, b.__isset);
}

rvOpenModel::rvOpenModel(const rvOpenModel& other105) {
  status = other105.status;
  report = other105.report;
  modelID = other105.modelID;
  model_info = other105.model_info;
  __isset = other105.__isset;
}
rvOpenModel& rvOpenModel::operator=(const rvOpenModel& other106) {
  status = other106.status;
  report = other106.report;
  modelID = other106.modelID;
  model_info = other106.model_info;
  __isset = other106.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvOpenModel& obj) {
  using apache::thrift::to_string;
  out << "rvOpenModel(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "modelID=" << to_string(obj.modelID);
  out << ", " << "model_info=" << to_string(obj.model_info);
  out << ")";
  return out;
}


rvGetListOfAnalyses::~rvGetListOfAnalyses() throw() {
}


void rvGetListOfAnalyses::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfAnalyses::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfAnalyses::__set_analyses(const std::vector<std::string> & val) {
  this->analyses = val;
}

const char* rvGetListOfAnalyses::ascii_fingerprint = "8E2AD6401E83558ECFD6A13D74DD0A3F";
const uint8_t rvGetListOfAnalyses::binary_fingerprint[16] = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};

uint32_t rvGetListOfAnalyses::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->analyses.clear();
            uint32_t _size107;
            ::apache::thrift::protocol::TType _etype110;
            xfer += iprot->readListBegin(_etype110, _size107);
            this->analyses.resize(_size107);
            uint32_t _i111;
            for (_i111 = 0; _i111 < _size107; ++_i111)
            {
              xfer += iprot->readString(this->analyses[_i111]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.analyses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfAnalyses::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfAnalyses");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyses", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->analyses.size()));
    std::vector<std::string> ::const_iterator _iter112;
    for (_iter112 = this->analyses.begin(); _iter112 != this->analyses.end(); ++_iter112)
    {
      xfer += oprot->writeString((*_iter112));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfAnalyses &a, rvGetListOfAnalyses &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.analyses, b.analyses);
  swap(a.__isset, b.__isset);
}

rvGetListOfAnalyses::rvGetListOfAnalyses(const rvGetListOfAnalyses& other113) {
  status = other113.status;
  report = other113.report;
  analyses = other113.analyses;
  __isset = other113.__isset;
}
rvGetListOfAnalyses& rvGetListOfAnalyses::operator=(const rvGetListOfAnalyses& other114) {
  status = other114.status;
  report = other114.report;
  analyses = other114.analyses;
  __isset = other114.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfAnalyses& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfAnalyses(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "analyses=" << to_string(obj.analyses);
  out << ")";
  return out;
}


rvGetListOfTimeSteps::~rvGetListOfTimeSteps() throw() {
}


void rvGetListOfTimeSteps::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfTimeSteps::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfTimeSteps::__set_time_steps(const std::vector<double> & val) {
  this->time_steps = val;
}

const char* rvGetListOfTimeSteps::ascii_fingerprint = "079D8EABC143D6AF5B88B3375EB108AD";
const uint8_t rvGetListOfTimeSteps::binary_fingerprint[16] = {0x07,0x9D,0x8E,0xAB,0xC1,0x43,0xD6,0xAF,0x5B,0x88,0xB3,0x37,0x5E,0xB1,0x08,0xAD};

uint32_t rvGetListOfTimeSteps::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->time_steps.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _etype118;
            xfer += iprot->readListBegin(_etype118, _size115);
            this->time_steps.resize(_size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              xfer += iprot->readDouble(this->time_steps[_i119]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.time_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfTimeSteps::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfTimeSteps");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_steps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->time_steps.size()));
    std::vector<double> ::const_iterator _iter120;
    for (_iter120 = this->time_steps.begin(); _iter120 != this->time_steps.end(); ++_iter120)
    {
      xfer += oprot->writeDouble((*_iter120));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfTimeSteps &a, rvGetListOfTimeSteps &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.time_steps, b.time_steps);
  swap(a.__isset, b.__isset);
}

rvGetListOfTimeSteps::rvGetListOfTimeSteps(const rvGetListOfTimeSteps& other121) {
  status = other121.status;
  report = other121.report;
  time_steps = other121.time_steps;
  __isset = other121.__isset;
}
rvGetListOfTimeSteps& rvGetListOfTimeSteps::operator=(const rvGetListOfTimeSteps& other122) {
  status = other122.status;
  report = other122.report;
  time_steps = other122.time_steps;
  __isset = other122.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfTimeSteps& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfTimeSteps(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "time_steps=" << to_string(obj.time_steps);
  out << ")";
  return out;
}


rvGetListOfMeshes::~rvGetListOfMeshes() throw() {
}


void rvGetListOfMeshes::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfMeshes::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfMeshes::__set_meshInfos(const std::vector<MeshInfo> & val) {
  this->meshInfos = val;
}

const char* rvGetListOfMeshes::ascii_fingerprint = "1087FB53E7F49E11A7305C9D3673CCBA";
const uint8_t rvGetListOfMeshes::binary_fingerprint[16] = {0x10,0x87,0xFB,0x53,0xE7,0xF4,0x9E,0x11,0xA7,0x30,0x5C,0x9D,0x36,0x73,0xCC,0xBA};

uint32_t rvGetListOfMeshes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->meshInfos.clear();
            uint32_t _size123;
            ::apache::thrift::protocol::TType _etype126;
            xfer += iprot->readListBegin(_etype126, _size123);
            this->meshInfos.resize(_size123);
            uint32_t _i127;
            for (_i127 = 0; _i127 < _size123; ++_i127)
            {
              xfer += this->meshInfos[_i127].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.meshInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfMeshes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfMeshes");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meshInfos", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->meshInfos.size()));
    std::vector<MeshInfo> ::const_iterator _iter128;
    for (_iter128 = this->meshInfos.begin(); _iter128 != this->meshInfos.end(); ++_iter128)
    {
      xfer += (*_iter128).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfMeshes &a, rvGetListOfMeshes &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.meshInfos, b.meshInfos);
  swap(a.__isset, b.__isset);
}

rvGetListOfMeshes::rvGetListOfMeshes(const rvGetListOfMeshes& other129) {
  status = other129.status;
  report = other129.report;
  meshInfos = other129.meshInfos;
  __isset = other129.__isset;
}
rvGetListOfMeshes& rvGetListOfMeshes::operator=(const rvGetListOfMeshes& other130) {
  status = other130.status;
  report = other130.report;
  meshInfos = other130.meshInfos;
  __isset = other130.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfMeshes& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfMeshes(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "meshInfos=" << to_string(obj.meshInfos);
  out << ")";
  return out;
}


rvGetListOfResults::~rvGetListOfResults() throw() {
}


void rvGetListOfResults::__set_status(const std::string& val) {
  this->status = val;
}

void rvGetListOfResults::__set_report(const std::string& val) {
  this->report = val;
}

void rvGetListOfResults::__set_result_list(const std::vector<ResultInfo> & val) {
  this->result_list = val;
}

const char* rvGetListOfResults::ascii_fingerprint = "69484CB25AE81A607DD24CAECD55B5F7";
const uint8_t rvGetListOfResults::binary_fingerprint[16] = {0x69,0x48,0x4C,0xB2,0x5A,0xE8,0x1A,0x60,0x7D,0xD2,0x4C,0xAE,0xCD,0x55,0xB5,0xF7};

uint32_t rvGetListOfResults::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->report);
          this->__isset.report = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->result_list.clear();
            uint32_t _size131;
            ::apache::thrift::protocol::TType _etype134;
            xfer += iprot->readListBegin(_etype134, _size131);
            this->result_list.resize(_size131);
            uint32_t _i135;
            for (_i135 = 0; _i135 < _size131; ++_i135)
            {
              xfer += this->result_list[_i135].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.result_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t rvGetListOfResults::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("rvGetListOfResults");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("report", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->report);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->result_list.size()));
    std::vector<ResultInfo> ::const_iterator _iter136;
    for (_iter136 = this->result_list.begin(); _iter136 != this->result_list.end(); ++_iter136)
    {
      xfer += (*_iter136).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(rvGetListOfResults &a, rvGetListOfResults &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.report, b.report);
  swap(a.result_list, b.result_list);
  swap(a.__isset, b.__isset);
}

rvGetListOfResults::rvGetListOfResults(const rvGetListOfResults& other137) {
  status = other137.status;
  report = other137.report;
  result_list = other137.result_list;
  __isset = other137.__isset;
}
rvGetListOfResults& rvGetListOfResults::operator=(const rvGetListOfResults& other138) {
  status = other138.status;
  report = other138.report;
  result_list = other138.result_list;
  __isset = other138.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const rvGetListOfResults& obj) {
  using apache::thrift::to_string;
  out << "rvGetListOfResults(";
  out << "status=" << to_string(obj.status);
  out << ", " << "report=" << to_string(obj.report);
  out << ", " << "result_list=" << to_string(obj.result_list);
  out << ")";
  return out;
}

} // namespace
