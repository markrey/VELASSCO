// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "VELaSSCo.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::dli;

class VELaSSCoHandler : virtual public VELaSSCoIf {
 public:
  VELaSSCoHandler() {
    // Your initialization goes here
  }

  /**
   * returns a session if if the user exists with the specified password and the specified role or an empty role.
   * 
   * @param user_name
   * @param role
   * @param password
   */
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) {
    // Your implementation goes here
    printf("UserLogin\n");
  }

  /**
   * Stop access to the system by a given session id and release all resources held by that session
   * 
   * @param sessionID
   */
  void UserLogout(std::string& _return, const std::string& sessionID) {
    // Your implementation goes here
    printf("UserLogout\n");
  }

  /**
   * Returns a list of names of data sets that are available from the VELaSSCo platform
   * and - optionally - their properties.
   * 
   * @param sessionID
   * @param groupQualifier
   * @param modelNamePattern
   * @param options
   */
  void GetListOfModels(rvGetListOfModels& _return, const std::string& sessionID, const std::string& groupQualifier, const std::string& modelNamePattern, const std::string& options) {
    // Your implementation goes here
    printf("GetListOfModels\n");
  }

  /**
   * For each point in the input parameter points, the method returns data about the element that contains the point.
   * The number of elements in the returned list of elements shall be the same as the number of points in the input parameter.
   * If the method does not find an element for a point it shall return a dummy element with id equal to -1.
   * 
   * @param sessionID
   * @param modelName
   * @param points
   */
  void GetElementOfPointsInSpace(rvGetElementOfPointsInSpace& _return, const std::string& sessionID, const std::string& modelName, const std::vector<Point> & points) {
    // Your implementation goes here
    printf("GetElementOfPointsInSpace\n");
  }

  /**
   * GetBoundaryOfLocalMesh will get the partial tetrahedral elements, calculate and output the unique triangles,
   * i.e. triangles that are not shared between two or more elements.
   * 
   * @param sessionID
   * @param modelID
   * @param meshID
   * @param analysisID
   * @param time_step
   */
  void GetBoundaryOfLocalMesh(rvGetBoundaryOfLocalMesh& _return, const std::string& sessionID, const std::string& modelID, const std::string& meshID, const std::string& analysisID, const double time_step) {
    // Your implementation goes here
    printf("GetBoundaryOfLocalMesh\n");
  }

  /**
   * Given a list of vertices id's from the model, vertexIDs, GetResultFromVerticesID will get
   * the result value of a given type (resultID) for each vertex id of the list.
   * 
   * @param sessionID
   * @param modelID
   * @param vertexIDs
   * @param resultID
   * @param time_step
   * @param analysisID
   */
  void GetResultFromVerticesID(rvGetResultFromVerticesID_B& _return, const std::string& sessionID, const std::string& modelID, const std::vector<int64_t> & vertexIDs, const std::string& resultID, const double time_step, const std::string& analysisID) {
    // Your implementation goes here
    printf("GetResultFromVerticesID\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<VELaSSCoHandler> handler(new VELaSSCoHandler());
  shared_ptr<TProcessor> processor(new VELaSSCoProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

