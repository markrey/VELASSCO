/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef velassco_TYPES_H
#define velassco_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dli {

enum ElementType {
  LINE = 1,
  TETRAHEDRA = 2,
  TRIANGLE = 3,
  SPHERE = 4
};

extern const std::map<int, const char*> _ElementType_VALUES_TO_NAMES;

class Point;

class Node;

class Element;

class Mesh;

class rvGetElementOfPointsInSpace;

typedef struct _Point__isset {
  _Point__isset() : x(false), y(false), z(false) {}
  bool x :1;
  bool y :1;
  bool z :1;
} _Point__isset;

class Point {
 public:

  static const char* ascii_fingerprint; // = "EFFAD640FBA2CA56C50155B2A4545897";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

  Point(const Point&);
  Point& operator=(const Point&);
  Point() : x(0), y(0), z(0) {
  }

  virtual ~Point() throw();
  double x;
  double y;
  double z;

  _Point__isset __isset;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const Point & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Point& obj);
};

void swap(Point &a, Point &b);

typedef struct _Node__isset {
  _Node__isset() : id(false), x(false), y(false), z(false) {}
  bool id :1;
  bool x :1;
  bool y :1;
  bool z :1;
} _Node__isset;

class Node {
 public:

  static const char* ascii_fingerprint; // = "3BC5E6ABCC6C77829F8D2E02BF3E7711";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xC5,0xE6,0xAB,0xCC,0x6C,0x77,0x82,0x9F,0x8D,0x2E,0x02,0xBF,0x3E,0x77,0x11};

  Node(const Node&);
  Node& operator=(const Node&);
  Node() : id(0), x(0), y(0), z(0) {
  }

  virtual ~Node() throw();
  int64_t id;
  double x;
  double y;
  double z;

  _Node__isset __isset;

  void __set_id(const int64_t val);

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const Node & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Node& obj);
};

void swap(Node &a, Node &b);

typedef struct _Element__isset {
  _Element__isset() : id(false), nodes(false) {}
  bool id :1;
  bool nodes :1;
} _Element__isset;

class Element {
 public:

  static const char* ascii_fingerprint; // = "CF06EB28D668C9DD2009463BC083E9B7";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x06,0xEB,0x28,0xD6,0x68,0xC9,0xDD,0x20,0x09,0x46,0x3B,0xC0,0x83,0xE9,0xB7};

  Element(const Element&);
  Element& operator=(const Element&);
  Element() : id(0) {
  }

  virtual ~Element() throw();
  int64_t id;
  std::vector<Node>  nodes;

  _Element__isset __isset;

  void __set_id(const int64_t val);

  void __set_nodes(const std::vector<Node> & val);

  bool operator == (const Element & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const Element &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Element & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Element& obj);
};

void swap(Element &a, Element &b);

typedef struct _Mesh__isset {
  _Mesh__isset() : name(false), numberOfNodes(false), dimension(false), type(false), nodes(false), elements(false) {}
  bool name :1;
  bool numberOfNodes :1;
  bool dimension :1;
  bool type :1;
  bool nodes :1;
  bool elements :1;
} _Mesh__isset;

class Mesh {
 public:

  static const char* ascii_fingerprint; // = "2C6CBE41D033C8504C0B5B732DBA6675";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x6C,0xBE,0x41,0xD0,0x33,0xC8,0x50,0x4C,0x0B,0x5B,0x73,0x2D,0xBA,0x66,0x75};

  Mesh(const Mesh&);
  Mesh& operator=(const Mesh&);
  Mesh() : name(), numberOfNodes(0), dimension(0), type((ElementType)0) {
  }

  virtual ~Mesh() throw();
  std::string name;
  int64_t numberOfNodes;
  int64_t dimension;
  ElementType type;
  std::vector<Node>  nodes;
  std::vector<Element>  elements;

  _Mesh__isset __isset;

  void __set_name(const std::string& val);

  void __set_numberOfNodes(const int64_t val);

  void __set_dimension(const int64_t val);

  void __set_type(const ElementType val);

  void __set_nodes(const std::vector<Node> & val);

  void __set_elements(const std::vector<Element> & val);

  bool operator == (const Mesh & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(numberOfNodes == rhs.numberOfNodes))
      return false;
    if (!(dimension == rhs.dimension))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(nodes == rhs.nodes))
      return false;
    if (!(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const Mesh &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mesh & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Mesh& obj);
};

void swap(Mesh &a, Mesh &b);

typedef struct _rvGetElementOfPointsInSpace__isset {
  _rvGetElementOfPointsInSpace__isset() : status(false), report(false), elements(false) {}
  bool status :1;
  bool report :1;
  bool elements :1;
} _rvGetElementOfPointsInSpace__isset;

class rvGetElementOfPointsInSpace {
 public:

  static const char* ascii_fingerprint; // = "91424890F8A0A0F92355049756E55722";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x42,0x48,0x90,0xF8,0xA0,0xA0,0xF9,0x23,0x55,0x04,0x97,0x56,0xE5,0x57,0x22};

  rvGetElementOfPointsInSpace(const rvGetElementOfPointsInSpace&);
  rvGetElementOfPointsInSpace& operator=(const rvGetElementOfPointsInSpace&);
  rvGetElementOfPointsInSpace() : status(), report() {
  }

  virtual ~rvGetElementOfPointsInSpace() throw();
  std::string status;
  std::string report;
  std::vector<Element>  elements;

  _rvGetElementOfPointsInSpace__isset __isset;

  void __set_status(const std::string& val);

  void __set_report(const std::string& val);

  void __set_elements(const std::vector<Element> & val);

  bool operator == (const rvGetElementOfPointsInSpace & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(report == rhs.report))
      return false;
    if (!(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const rvGetElementOfPointsInSpace &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rvGetElementOfPointsInSpace & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const rvGetElementOfPointsInSpace& obj);
};

void swap(rvGetElementOfPointsInSpace &a, rvGetElementOfPointsInSpace &b);

} // namespace

#endif
