// DEM_ingest_server.cpp : Defines the entry point for the console application.

#include "stdafx.h"




// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DEM_Injector.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;
using namespace  std;

using namespace  ::DEM_Inject;

#include "DEM_InjectorHandler.h"




int main(int argc, char **argv)
{
   int rstat;
   char errTxt[1024];

   int port = 9090;
   DEM_InjectorHandler demInjector(&dem_schema_velassco_SchemaObject);
   boost::shared_ptr<DEM_InjectorHandler> handler(&demInjector);
   boost::shared_ptr<TProcessor> processor(new DEM_InjectorProcessor(handler));
   boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
   boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
   boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

   try {
      WSADATA wsaData = {};
      WORD wVersionRequested = MAKEWORD(2, 2);
      int err = WSAStartup(wVersionRequested, &wsaData);

      Database VELaSSCo_db("O:\\projects\\VELaSSCo\\SVN_src\\EDM_plug_in\\db_template", "VELaSSCo", "VELaSSCo");
      Repository demRepository(&VELaSSCo_db, "DEM_models");
      demInjector.setCurrentSchemaName("dem_schema_velassco");

      demInjector.setDatabase(&VELaSSCo_db);
      VELaSSCo_db.open();
      demRepository.open(sdaiRW);
 
      demInjector.setCurrentRepository(&demRepository);

      TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
      server.serve();
   } catch (CedmError *e) {
      rstat = e->rstat;
      if (e->message) {
         strncpy(errTxt, e->message, sizeof(errTxt));
      } else {
         strncpy(errTxt, edmiGetErrorText(rstat), sizeof(errTxt));
      }
      delete e;
      printf(errTxt);
   } catch (int thrownRstat) {
      strncpy(errTxt, edmiGetErrorText(thrownRstat), sizeof(errTxt));
      printf(errTxt);
   }
   exit(0);
}



