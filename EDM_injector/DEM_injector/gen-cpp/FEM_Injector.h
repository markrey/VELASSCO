/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FEM_Injector_H
#define FEM_Injector_H

#include <thrift/TDispatchProcessor.h>
#include "dem_schema_velassco_types.h"

namespace DEM_Inject {

class FEM_InjectorIf {
 public:
  virtual ~FEM_InjectorIf() {}
  virtual void StoreFEM_Simulation(std::string& _return, const std::string& model_name, const Simulation& theSimulation) = 0;
};

class FEM_InjectorIfFactory {
 public:
  typedef FEM_InjectorIf Handler;

  virtual ~FEM_InjectorIfFactory() {}

  virtual FEM_InjectorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FEM_InjectorIf* /* handler */) = 0;
};

class FEM_InjectorIfSingletonFactory : virtual public FEM_InjectorIfFactory {
 public:
  FEM_InjectorIfSingletonFactory(const boost::shared_ptr<FEM_InjectorIf>& iface) : iface_(iface) {}
  virtual ~FEM_InjectorIfSingletonFactory() {}

  virtual FEM_InjectorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FEM_InjectorIf* /* handler */) {}

 protected:
  boost::shared_ptr<FEM_InjectorIf> iface_;
};

class FEM_InjectorNull : virtual public FEM_InjectorIf {
 public:
  virtual ~FEM_InjectorNull() {}
  void StoreFEM_Simulation(std::string& /* _return */, const std::string& /* model_name */, const Simulation& /* theSimulation */) {
    return;
  }
};

typedef struct _FEM_Injector_StoreFEM_Simulation_args__isset {
  _FEM_Injector_StoreFEM_Simulation_args__isset() : model_name(false), theSimulation(false) {}
  bool model_name :1;
  bool theSimulation :1;
} _FEM_Injector_StoreFEM_Simulation_args__isset;

class FEM_Injector_StoreFEM_Simulation_args {
 public:

  static const char* ascii_fingerprint; // = "94B7157C0CDDB9BCFA4D898BBB3B454D";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0xB7,0x15,0x7C,0x0C,0xDD,0xB9,0xBC,0xFA,0x4D,0x89,0x8B,0xBB,0x3B,0x45,0x4D};

  FEM_Injector_StoreFEM_Simulation_args(const FEM_Injector_StoreFEM_Simulation_args&);
  FEM_Injector_StoreFEM_Simulation_args& operator=(const FEM_Injector_StoreFEM_Simulation_args&);
  FEM_Injector_StoreFEM_Simulation_args() : model_name() {
  }

  virtual ~FEM_Injector_StoreFEM_Simulation_args() throw();
  std::string model_name;
  Simulation theSimulation;

  _FEM_Injector_StoreFEM_Simulation_args__isset __isset;

  void __set_model_name(const std::string& val);

  void __set_theSimulation(const Simulation& val);

  bool operator == (const FEM_Injector_StoreFEM_Simulation_args & rhs) const
  {
    if (!(model_name == rhs.model_name))
      return false;
    if (!(theSimulation == rhs.theSimulation))
      return false;
    return true;
  }
  bool operator != (const FEM_Injector_StoreFEM_Simulation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FEM_Injector_StoreFEM_Simulation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FEM_Injector_StoreFEM_Simulation_args& obj);
};


class FEM_Injector_StoreFEM_Simulation_pargs {
 public:

  static const char* ascii_fingerprint; // = "94B7157C0CDDB9BCFA4D898BBB3B454D";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0xB7,0x15,0x7C,0x0C,0xDD,0xB9,0xBC,0xFA,0x4D,0x89,0x8B,0xBB,0x3B,0x45,0x4D};


  virtual ~FEM_Injector_StoreFEM_Simulation_pargs() throw();
  const std::string* model_name;
  const Simulation* theSimulation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FEM_Injector_StoreFEM_Simulation_pargs& obj);
};

typedef struct _FEM_Injector_StoreFEM_Simulation_result__isset {
  _FEM_Injector_StoreFEM_Simulation_result__isset() : success(false) {}
  bool success :1;
} _FEM_Injector_StoreFEM_Simulation_result__isset;

class FEM_Injector_StoreFEM_Simulation_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FEM_Injector_StoreFEM_Simulation_result(const FEM_Injector_StoreFEM_Simulation_result&);
  FEM_Injector_StoreFEM_Simulation_result& operator=(const FEM_Injector_StoreFEM_Simulation_result&);
  FEM_Injector_StoreFEM_Simulation_result() : success() {
  }

  virtual ~FEM_Injector_StoreFEM_Simulation_result() throw();
  std::string success;

  _FEM_Injector_StoreFEM_Simulation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FEM_Injector_StoreFEM_Simulation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FEM_Injector_StoreFEM_Simulation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FEM_Injector_StoreFEM_Simulation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FEM_Injector_StoreFEM_Simulation_result& obj);
};

typedef struct _FEM_Injector_StoreFEM_Simulation_presult__isset {
  _FEM_Injector_StoreFEM_Simulation_presult__isset() : success(false) {}
  bool success :1;
} _FEM_Injector_StoreFEM_Simulation_presult__isset;

class FEM_Injector_StoreFEM_Simulation_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FEM_Injector_StoreFEM_Simulation_presult() throw();
  std::string* success;

  _FEM_Injector_StoreFEM_Simulation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FEM_Injector_StoreFEM_Simulation_presult& obj);
};

class FEM_InjectorClient : virtual public FEM_InjectorIf {
 public:
  FEM_InjectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FEM_InjectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void StoreFEM_Simulation(std::string& _return, const std::string& model_name, const Simulation& theSimulation);
  void send_StoreFEM_Simulation(const std::string& model_name, const Simulation& theSimulation);
  void recv_StoreFEM_Simulation(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FEM_InjectorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FEM_InjectorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FEM_InjectorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_StoreFEM_Simulation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FEM_InjectorProcessor(boost::shared_ptr<FEM_InjectorIf> iface) :
    iface_(iface) {
    processMap_["StoreFEM_Simulation"] = &FEM_InjectorProcessor::process_StoreFEM_Simulation;
  }

  virtual ~FEM_InjectorProcessor() {}
};

class FEM_InjectorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FEM_InjectorProcessorFactory(const ::boost::shared_ptr< FEM_InjectorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FEM_InjectorIfFactory > handlerFactory_;
};

class FEM_InjectorMultiface : virtual public FEM_InjectorIf {
 public:
  FEM_InjectorMultiface(std::vector<boost::shared_ptr<FEM_InjectorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FEM_InjectorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FEM_InjectorIf> > ifaces_;
  FEM_InjectorMultiface() {}
  void add(boost::shared_ptr<FEM_InjectorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void StoreFEM_Simulation(std::string& _return, const std::string& model_name, const Simulation& theSimulation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StoreFEM_Simulation(_return, model_name, theSimulation);
    }
    ifaces_[i]->StoreFEM_Simulation(_return, model_name, theSimulation);
    return;
  }

};

} // namespace

#endif
