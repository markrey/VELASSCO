// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DEM_Injector.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::DEM_Inject;

class DEM_InjectorHandler : virtual public DEM_InjectorIf {
 public:
  DEM_InjectorHandler() {
    // Your initialization goes here
  }

  /**
   * returns a session if if the user exists with the specified password and the specified role or an empty role.
   * 
   * @param user_name
   * @param role
   * @param password
   */
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) {
    // Your implementation goes here
    printf("UserLogin\n");
  }

  /**
   * Stop access to the system by a given session id and release all resources held by that session
   * 
   * @param sessionID
   */
  void UserLogout(std::string& _return, const std::string& sessionID) {
    // Your implementation goes here
    printf("UserLogout\n");
  }

  /**
   * Stores a DEM_simulation with all timesteps, meshes, particles, results etc. in one operation in EDM
   * If the model exists, the Simulation is added to the model. If the model does not exist, it is created.
   * 
   * @param sessionID
   * @param model_name
   * @param theSimulation
   */
  void StoreDEM_Simulation(std::string& _return, const std::string& sessionID, const std::string& model_name, const Simulation& theSimulation) {
    // Your implementation goes here
    printf("StoreDEM_Simulation\n");
  }

  /**
   * Stores a DEM_simulation with all timesteps, meshes, particles, results etc. in one operation in EDM
   * If the model exists, the Simulation is added to the model. If the model does not exist, it is created.
   * 
   * @param sessionID
   * @param model_name
   */
  void DeleteModelContent(std::string& _return, const std::string& sessionID, const std::string& model_name) {
    // Your implementation goes here
    printf("DeleteModelContent\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DEM_InjectorHandler> handler(new DEM_InjectorHandler());
  shared_ptr<TProcessor> processor(new DEM_InjectorProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

