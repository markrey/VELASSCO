/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DEM_Injector_H
#define DEM_Injector_H

#include <thrift/TDispatchProcessor.h>
#include "dem_schema_velassco_types.h"

namespace DEM_Inject {

class DEM_InjectorIf {
 public:
  virtual ~DEM_InjectorIf() {}

  /**
   * returns a session if if the user exists with the specified password and the specified role or an empty role.
   * 
   * @param user_name
   * @param role
   * @param password
   */
  virtual void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) = 0;

  /**
   * Stop access to the system by a given session id and release all resources held by that session
   * 
   * @param sessionID
   */
  virtual void UserLogout(std::string& _return, const std::string& sessionID) = 0;

  /**
   * Stores a DEM_simulation with all timesteps, meshes, particles, results etc. in one operation in EDM
   * If the model exists, the Simulation is added to the model. If the model does not exist, it is created.
   * 
   * @param sessionID
   * @param model_name
   * @param theSimulation
   */
  virtual void StoreDEM_Simulation(std::string& _return, const std::string& sessionID, const std::string& model_name, const Simulation& theSimulation) = 0;

  /**
   * Stores a DEM_simulation with all timesteps, meshes, particles, results etc. in one operation in EDM
   * If the model exists, the Simulation is added to the model. If the model does not exist, it is created.
   * 
   * @param sessionID
   * @param model_name
   */
  virtual void DeleteModelContent(std::string& _return, const std::string& sessionID, const std::string& model_name) = 0;
};

class DEM_InjectorIfFactory {
 public:
  typedef DEM_InjectorIf Handler;

  virtual ~DEM_InjectorIfFactory() {}

  virtual DEM_InjectorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DEM_InjectorIf* /* handler */) = 0;
};

class DEM_InjectorIfSingletonFactory : virtual public DEM_InjectorIfFactory {
 public:
  DEM_InjectorIfSingletonFactory(const boost::shared_ptr<DEM_InjectorIf>& iface) : iface_(iface) {}
  virtual ~DEM_InjectorIfSingletonFactory() {}

  virtual DEM_InjectorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DEM_InjectorIf* /* handler */) {}

 protected:
  boost::shared_ptr<DEM_InjectorIf> iface_;
};

class DEM_InjectorNull : virtual public DEM_InjectorIf {
 public:
  virtual ~DEM_InjectorNull() {}
  void UserLogin(std::string& /* _return */, const std::string& /* user_name */, const std::string& /* role */, const std::string& /* password */) {
    return;
  }
  void UserLogout(std::string& /* _return */, const std::string& /* sessionID */) {
    return;
  }
  void StoreDEM_Simulation(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* model_name */, const Simulation& /* theSimulation */) {
    return;
  }
  void DeleteModelContent(std::string& /* _return */, const std::string& /* sessionID */, const std::string& /* model_name */) {
    return;
  }
};

typedef struct _DEM_Injector_UserLogin_args__isset {
  _DEM_Injector_UserLogin_args__isset() : user_name(false), role(false), password(false) {}
  bool user_name :1;
  bool role :1;
  bool password :1;
} _DEM_Injector_UserLogin_args__isset;

class DEM_Injector_UserLogin_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  DEM_Injector_UserLogin_args(const DEM_Injector_UserLogin_args&);
  DEM_Injector_UserLogin_args& operator=(const DEM_Injector_UserLogin_args&);
  DEM_Injector_UserLogin_args() : user_name(), role(), password() {
  }

  virtual ~DEM_Injector_UserLogin_args() throw();
  std::string user_name;
  std::string role;
  std::string password;

  _DEM_Injector_UserLogin_args__isset __isset;

  void __set_user_name(const std::string& val);

  void __set_role(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const DEM_Injector_UserLogin_args & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_UserLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_UserLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogin_args& obj);
};


class DEM_Injector_UserLogin_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~DEM_Injector_UserLogin_pargs() throw();
  const std::string* user_name;
  const std::string* role;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogin_pargs& obj);
};

typedef struct _DEM_Injector_UserLogin_result__isset {
  _DEM_Injector_UserLogin_result__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_UserLogin_result__isset;

class DEM_Injector_UserLogin_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DEM_Injector_UserLogin_result(const DEM_Injector_UserLogin_result&);
  DEM_Injector_UserLogin_result& operator=(const DEM_Injector_UserLogin_result&);
  DEM_Injector_UserLogin_result() : success() {
  }

  virtual ~DEM_Injector_UserLogin_result() throw();
  std::string success;

  _DEM_Injector_UserLogin_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DEM_Injector_UserLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_UserLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_UserLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogin_result& obj);
};

typedef struct _DEM_Injector_UserLogin_presult__isset {
  _DEM_Injector_UserLogin_presult__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_UserLogin_presult__isset;

class DEM_Injector_UserLogin_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DEM_Injector_UserLogin_presult() throw();
  std::string* success;

  _DEM_Injector_UserLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogin_presult& obj);
};

typedef struct _DEM_Injector_UserLogout_args__isset {
  _DEM_Injector_UserLogout_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _DEM_Injector_UserLogout_args__isset;

class DEM_Injector_UserLogout_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DEM_Injector_UserLogout_args(const DEM_Injector_UserLogout_args&);
  DEM_Injector_UserLogout_args& operator=(const DEM_Injector_UserLogout_args&);
  DEM_Injector_UserLogout_args() : sessionID() {
  }

  virtual ~DEM_Injector_UserLogout_args() throw();
  std::string sessionID;

  _DEM_Injector_UserLogout_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const DEM_Injector_UserLogout_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_UserLogout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_UserLogout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogout_args& obj);
};


class DEM_Injector_UserLogout_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~DEM_Injector_UserLogout_pargs() throw();
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogout_pargs& obj);
};

typedef struct _DEM_Injector_UserLogout_result__isset {
  _DEM_Injector_UserLogout_result__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_UserLogout_result__isset;

class DEM_Injector_UserLogout_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DEM_Injector_UserLogout_result(const DEM_Injector_UserLogout_result&);
  DEM_Injector_UserLogout_result& operator=(const DEM_Injector_UserLogout_result&);
  DEM_Injector_UserLogout_result() : success() {
  }

  virtual ~DEM_Injector_UserLogout_result() throw();
  std::string success;

  _DEM_Injector_UserLogout_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DEM_Injector_UserLogout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_UserLogout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_UserLogout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogout_result& obj);
};

typedef struct _DEM_Injector_UserLogout_presult__isset {
  _DEM_Injector_UserLogout_presult__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_UserLogout_presult__isset;

class DEM_Injector_UserLogout_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DEM_Injector_UserLogout_presult() throw();
  std::string* success;

  _DEM_Injector_UserLogout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_UserLogout_presult& obj);
};

typedef struct _DEM_Injector_StoreDEM_Simulation_args__isset {
  _DEM_Injector_StoreDEM_Simulation_args__isset() : sessionID(false), model_name(false), theSimulation(false) {}
  bool sessionID :1;
  bool model_name :1;
  bool theSimulation :1;
} _DEM_Injector_StoreDEM_Simulation_args__isset;

class DEM_Injector_StoreDEM_Simulation_args {
 public:

  static const char* ascii_fingerprint; // = "5246F278007C7DB3EFB6BDC5A4E92A57";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x46,0xF2,0x78,0x00,0x7C,0x7D,0xB3,0xEF,0xB6,0xBD,0xC5,0xA4,0xE9,0x2A,0x57};

  DEM_Injector_StoreDEM_Simulation_args(const DEM_Injector_StoreDEM_Simulation_args&);
  DEM_Injector_StoreDEM_Simulation_args& operator=(const DEM_Injector_StoreDEM_Simulation_args&);
  DEM_Injector_StoreDEM_Simulation_args() : sessionID(), model_name() {
  }

  virtual ~DEM_Injector_StoreDEM_Simulation_args() throw();
  std::string sessionID;
  std::string model_name;
  Simulation theSimulation;

  _DEM_Injector_StoreDEM_Simulation_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_model_name(const std::string& val);

  void __set_theSimulation(const Simulation& val);

  bool operator == (const DEM_Injector_StoreDEM_Simulation_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(model_name == rhs.model_name))
      return false;
    if (!(theSimulation == rhs.theSimulation))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_StoreDEM_Simulation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_StoreDEM_Simulation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_StoreDEM_Simulation_args& obj);
};


class DEM_Injector_StoreDEM_Simulation_pargs {
 public:

  static const char* ascii_fingerprint; // = "5246F278007C7DB3EFB6BDC5A4E92A57";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x46,0xF2,0x78,0x00,0x7C,0x7D,0xB3,0xEF,0xB6,0xBD,0xC5,0xA4,0xE9,0x2A,0x57};


  virtual ~DEM_Injector_StoreDEM_Simulation_pargs() throw();
  const std::string* sessionID;
  const std::string* model_name;
  const Simulation* theSimulation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_StoreDEM_Simulation_pargs& obj);
};

typedef struct _DEM_Injector_StoreDEM_Simulation_result__isset {
  _DEM_Injector_StoreDEM_Simulation_result__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_StoreDEM_Simulation_result__isset;

class DEM_Injector_StoreDEM_Simulation_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DEM_Injector_StoreDEM_Simulation_result(const DEM_Injector_StoreDEM_Simulation_result&);
  DEM_Injector_StoreDEM_Simulation_result& operator=(const DEM_Injector_StoreDEM_Simulation_result&);
  DEM_Injector_StoreDEM_Simulation_result() : success() {
  }

  virtual ~DEM_Injector_StoreDEM_Simulation_result() throw();
  std::string success;

  _DEM_Injector_StoreDEM_Simulation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DEM_Injector_StoreDEM_Simulation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_StoreDEM_Simulation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_StoreDEM_Simulation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_StoreDEM_Simulation_result& obj);
};

typedef struct _DEM_Injector_StoreDEM_Simulation_presult__isset {
  _DEM_Injector_StoreDEM_Simulation_presult__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_StoreDEM_Simulation_presult__isset;

class DEM_Injector_StoreDEM_Simulation_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DEM_Injector_StoreDEM_Simulation_presult() throw();
  std::string* success;

  _DEM_Injector_StoreDEM_Simulation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_StoreDEM_Simulation_presult& obj);
};

typedef struct _DEM_Injector_DeleteModelContent_args__isset {
  _DEM_Injector_DeleteModelContent_args__isset() : sessionID(false), model_name(false) {}
  bool sessionID :1;
  bool model_name :1;
} _DEM_Injector_DeleteModelContent_args__isset;

class DEM_Injector_DeleteModelContent_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DEM_Injector_DeleteModelContent_args(const DEM_Injector_DeleteModelContent_args&);
  DEM_Injector_DeleteModelContent_args& operator=(const DEM_Injector_DeleteModelContent_args&);
  DEM_Injector_DeleteModelContent_args() : sessionID(), model_name() {
  }

  virtual ~DEM_Injector_DeleteModelContent_args() throw();
  std::string sessionID;
  std::string model_name;

  _DEM_Injector_DeleteModelContent_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_model_name(const std::string& val);

  bool operator == (const DEM_Injector_DeleteModelContent_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(model_name == rhs.model_name))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_DeleteModelContent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_DeleteModelContent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_DeleteModelContent_args& obj);
};


class DEM_Injector_DeleteModelContent_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~DEM_Injector_DeleteModelContent_pargs() throw();
  const std::string* sessionID;
  const std::string* model_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_DeleteModelContent_pargs& obj);
};

typedef struct _DEM_Injector_DeleteModelContent_result__isset {
  _DEM_Injector_DeleteModelContent_result__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_DeleteModelContent_result__isset;

class DEM_Injector_DeleteModelContent_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DEM_Injector_DeleteModelContent_result(const DEM_Injector_DeleteModelContent_result&);
  DEM_Injector_DeleteModelContent_result& operator=(const DEM_Injector_DeleteModelContent_result&);
  DEM_Injector_DeleteModelContent_result() : success() {
  }

  virtual ~DEM_Injector_DeleteModelContent_result() throw();
  std::string success;

  _DEM_Injector_DeleteModelContent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DEM_Injector_DeleteModelContent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DEM_Injector_DeleteModelContent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEM_Injector_DeleteModelContent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_DeleteModelContent_result& obj);
};

typedef struct _DEM_Injector_DeleteModelContent_presult__isset {
  _DEM_Injector_DeleteModelContent_presult__isset() : success(false) {}
  bool success :1;
} _DEM_Injector_DeleteModelContent_presult__isset;

class DEM_Injector_DeleteModelContent_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DEM_Injector_DeleteModelContent_presult() throw();
  std::string* success;

  _DEM_Injector_DeleteModelContent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DEM_Injector_DeleteModelContent_presult& obj);
};

class DEM_InjectorClient : virtual public DEM_InjectorIf {
 public:
  DEM_InjectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DEM_InjectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password);
  void send_UserLogin(const std::string& user_name, const std::string& role, const std::string& password);
  void recv_UserLogin(std::string& _return);
  void UserLogout(std::string& _return, const std::string& sessionID);
  void send_UserLogout(const std::string& sessionID);
  void recv_UserLogout(std::string& _return);
  void StoreDEM_Simulation(std::string& _return, const std::string& sessionID, const std::string& model_name, const Simulation& theSimulation);
  void send_StoreDEM_Simulation(const std::string& sessionID, const std::string& model_name, const Simulation& theSimulation);
  void recv_StoreDEM_Simulation(std::string& _return);
  void DeleteModelContent(std::string& _return, const std::string& sessionID, const std::string& model_name);
  void send_DeleteModelContent(const std::string& sessionID, const std::string& model_name);
  void recv_DeleteModelContent(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DEM_InjectorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DEM_InjectorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DEM_InjectorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UserLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UserLogout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StoreDEM_Simulation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteModelContent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DEM_InjectorProcessor(boost::shared_ptr<DEM_InjectorIf> iface) :
    iface_(iface) {
    processMap_["UserLogin"] = &DEM_InjectorProcessor::process_UserLogin;
    processMap_["UserLogout"] = &DEM_InjectorProcessor::process_UserLogout;
    processMap_["StoreDEM_Simulation"] = &DEM_InjectorProcessor::process_StoreDEM_Simulation;
    processMap_["DeleteModelContent"] = &DEM_InjectorProcessor::process_DeleteModelContent;
  }

  virtual ~DEM_InjectorProcessor() {}
};

class DEM_InjectorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DEM_InjectorProcessorFactory(const ::boost::shared_ptr< DEM_InjectorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DEM_InjectorIfFactory > handlerFactory_;
};

class DEM_InjectorMultiface : virtual public DEM_InjectorIf {
 public:
  DEM_InjectorMultiface(std::vector<boost::shared_ptr<DEM_InjectorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DEM_InjectorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DEM_InjectorIf> > ifaces_;
  DEM_InjectorMultiface() {}
  void add(boost::shared_ptr<DEM_InjectorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UserLogin(std::string& _return, const std::string& user_name, const std::string& role, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogin(_return, user_name, role, password);
    }
    ifaces_[i]->UserLogin(_return, user_name, role, password);
    return;
  }

  void UserLogout(std::string& _return, const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserLogout(_return, sessionID);
    }
    ifaces_[i]->UserLogout(_return, sessionID);
    return;
  }

  void StoreDEM_Simulation(std::string& _return, const std::string& sessionID, const std::string& model_name, const Simulation& theSimulation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StoreDEM_Simulation(_return, sessionID, model_name, theSimulation);
    }
    ifaces_[i]->StoreDEM_Simulation(_return, sessionID, model_name, theSimulation);
    return;
  }

  void DeleteModelContent(std::string& _return, const std::string& sessionID, const std::string& model_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteModelContent(_return, sessionID, model_name);
    }
    ifaces_[i]->DeleteModelContent(_return, sessionID, model_name);
    return;
  }

};

} // namespace

#endif
